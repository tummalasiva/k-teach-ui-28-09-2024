/** @format */

"use strict";
(self.webpackChunkschoolerp = self.webpackChunkschoolerp || []).push([
  [2580],
  {
    28059: (e, t, a) => {
      a.r(t), a.d(t, { default: () => hu });
      var l = a(65043),
        n = a(34535),
        i = a(26240),
        s = a(96446),
        o = a(94109),
        r = a(92314),
        d = a(55263),
        c = a(35721),
        m = a(55376),
        u = a(85865),
        x = a(39336),
        h = a(17392),
        p = a(89611),
        j = a(55896),
        g = a(91707),
        A = a(30681),
        y = a(38968),
        f = a(2050),
        v = a(48734),
        b = a(88911),
        S = a(77739),
        k = a(81045),
        C = a(70378),
        D = a(32143),
        w = a(30279),
        I = a(4598),
        N = a(35475),
        _ = a(73216),
        T = a(75310),
        M = a(99792),
        F = a(1702),
        z = a(52177),
        E = a(67485),
        q = a(93787),
        Y = a(49167),
        W = a(68850),
        R = a(71462),
        P = a(84582),
        J = a(76710),
        V = a(60311),
        B = a(72061),
        O = a(390),
        L = a(97462),
        U = a(10631),
        H = a(59893),
        G = a(79641),
        K = a(5793),
        Q = a(69131),
        Z = a(812),
        $ = a(11634),
        X = a(34977),
        ee = a(56974),
        te = a(25407),
        ae = a(74845),
        le = a(79962),
        ne = a(56487),
        ie = a(95283),
        se = a(94136),
        oe = a(46051),
        re = a(70579);
      const de = {
        SIDE_MENU_DATA: [
          {
            name: "Dashboard",
            path: "/sch/dashboard",
            renderName: [],
            subMenus: [],
            icon: (0, re.jsx)(E.A, { color: "primary", fontSize: "small" }),
          },
          {
            name: "Manage Institute",
            path: "/sch/manage-institute",
            renderName: [""],
            subMenus: [],
            icon: (0, re.jsx)(U.A, { color: "primary", fontSize: "small" }),
          },
          {
            name: "Administrator",
            path: "",
            renderName: [
              "academicYear",
              "userRole",
              "rolePermission",
              "userPasswordReset",
            ],
            icon: (0, re.jsx)(H.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Academic Year",
                renderName: "academicYear",
                path: "/sch/administrator/academicYear",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Roles & Permissions",
                renderName: "rolePermission",
                path: "/sch/administrator/role-permission",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "User Password Reset",
                renderName: "userPasswordReset",
                path: "/sch/administrator/reset-password",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Human Resource",
            path: "",
            renderName: [
              "manageDesignation",
              "manageDepartment",
              "employee",
              "offerLetter",
              "relievingLetter",
              "offBoarding",
              "experienceLetter",
              "teacherActivity",
            ],
            icon: (0, re.jsx)(oe.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Manage Designation",
                renderName: "manageDesignation",
                path: "/sch/human-resource/manage-designation",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Manage Department",
                renderName: "manageDepartment",
                path: "/sch/human-resource/manage-department",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Employee",
                renderName: "employee",
                path: "/sch/human-resource/employee",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Offer-Letter",
                renderName: "offerLetter",
                path: "/sch/human-resource/offer-letter",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Relieving Letter",
                renderName: "relievingLetter",
                path: "/sch/human-resource/relieving-letter",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Off Boarding",
                renderName: "offBoarding",
                path: "/sch/human-resource/off-boarding",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Experience Letter",
                renderName: "experienceLetter",
                path: "/sch/human-resource/experience-letter",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Teacher Activity",
                renderName: "teacherActivity",
                path: "/sch/human-resource/teacher-activity",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Pre-Admission",
            path: "",
            renderName: ["enquiries", "enquiries", "examSchedules", "result"],
            icon: (0, re.jsx)(P.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Enquiries",
                renderName: "enquiries",
                path: "/sch/pre-admission/enquiries",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Exams",
                renderName: "exams",
                path: "/sch/pre-admission/exams",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Exam Schedules",
                renderName: "examSchedules",
                path: "/sch/pre-admission/exam-schedules",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Result",
                renderName: "result",
                path: "/sch/pre-admission/result",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Academic",
            path: "",
            renderName: ["class", "section", "subject"],
            icon: (0, re.jsx)(G.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Class",
                renderName: "class",
                path: "/sch/academic/class",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Section",
                renderName: "section",
                path: "/sch/academic/section",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Subject",
                renderName: "subject",
                path: "/sch/academic/subject",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Attendance",
            path: "",
            renderName: ["studentAttendance", "employeeAttendance"],
            icon: (0, re.jsx)(K.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Student Attendance",
                renderName: "studentAttendance",
                path: "/sch/attendence/student-attendance",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Employee Attendance",
                renderName: "employeeAttendance",
                path: "/sch/attendence/employee-attendance",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Class Routine",
            path: "/sch/class-routine",
            renderName: ["class-routine"],
            subMenus: [],
            icon: (0, re.jsx)(Q.A, { color: "primary", fontSize: "small" }),
          },
          {
            name: "Student",
            path: "",
            renderName: [
              "overview",
              "admitStudent",
              "reshuffle",
              "promotion",
              "bulkAdmission",
              "credential",
              "quickAdmit",
              "studentActivity",
            ],
            icon: (0, re.jsx)(Z.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Overview",
                renderName: "overview",
                path: "/sch/student/overview",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Admit Student",
                renderName: "admitStudent",
                path: "/sch/student/admit-student",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Reshuffle",
                renderName: "reshuffle",
                path: "/sch/student/reshuffle",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Promotion",
                renderName: "promotion",
                path: "/sch/student/promotion",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Bulk Admission",
                renderName: "bulkAdmission",
                path: "/sch/student/bulk-admission",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Credential",
                renderName: "credential",
                path: "/sch/student/credential",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Quick Admit",
                renderName: "quickAdmit",
                path: "/sch/student/quick-admit",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Id Card",
                renderName: "id_card",
                path: "/sch/student/id-card",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Student Activity",
                renderName: "studentActivity",
                path: "/sch/student/student-activity",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Assignment",
            path: "/sch/assignment",
            renderName: ["assgnment"],
            subMenus: [],
            icon: (0, re.jsx)(se.A, { color: "primary", fontSize: "small" }),
          },
          {
            name: "Communication",
            path: "",
            renderName: ["compose", "report", "credentials"],
            icon: (0, re.jsx)($.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Compose",
                renderName: "compose",
                path: "/sch/communication_compose",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Report",
                renderName: "report",
                path: "/sch/communication_report",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Credentials",
                renderName: "credentials",
                path: "/sch/communication_credentials",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Announcement",
            path: "",
            renderName: [
              "notice",
              "news",
              "holiday",
              "awardsAndAchievements",
              "splashNews",
            ],
            icon: (0, re.jsx)(X.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Notice",
                renderName: "notice",
                path: "/sch/announcement/notice",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "News",
                renderName: "news",
                path: "/sch/announcement/news",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Holiday",
                renderName: "holiday",
                path: "/sch/announcement/holiday",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Awards And Achievements",
                renderName: "awardsAndAchievements",
                path: "/sch/announcement/awardsAndAchievements",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Splash News",
                renderName: "splashNews",
                path: "/sch/announcement/splashNews",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Gallery",
            path: "/sch/gallery",
            renderName: ["gallery"],
            subMenus: [],
            icon: (0, re.jsx)(B.A, { color: "primary", fontSize: "small" }),
          },
          {
            name: "Notifications",
            path: "/sch/notifications",
            renderName: ["notifications"],
            subMenus: [],
            icon: (0, re.jsx)(ie.A, { color: "primary", fontSize: "small" }),
          },
          {
            name: "Event",
            path: "/sch/event",
            renderName: ["event"],
            subMenus: [],
            icon: (0, re.jsx)(Z.A, { color: "primary", fontSize: "small" }),
          },
          {
            name: "Exam",
            path: "",
            renderName: [
              "examGrade",
              "examTerm",
              "examSchedule",
              "examHallTicket",
            ],
            icon: (0, re.jsx)(ee.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Exam Grade",
                renderName: "examGrade",
                path: "/sch/exam/exam-grade",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Exam Term",
                renderName: "examTerm",
                path: "/sch/exam/exam-term",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Exam Schedule",
                renderName: "examSchedule",
                path: "/sch/exam/exam-schedule",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Exam Hall Ticket",
                renderName: "examHallTicket",
                path: "/sch/exam/exam-hall-ticket",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Exam Mark",
            path: "",
            renderName: [
              "examAttendance",
              "manageMark",
              "examResult",
              "marksCard",
              "consolidatedMarksSheet",
              "subjectWiseReport",
              "divisionWiseReport",
            ],
            icon: (0, re.jsx)(te.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Exam Attendance",
                renderName: "examAttendance",
                path: "/sch/exam-Mark/exam-Attendance",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Manage Mark",
                renderName: "manageMark",
                path: "/sch/exam-Mark/manage-mark",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Exam Result",
                renderName: "examResult",
                path: "/sch/exam-Mark/exam-result",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Marks Card",
                renderName: "marksCard",
                path: "/sch/exam-Mark/marks-card",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Consolidated Marks Sheet",
                renderName: "consolidatedMarksSheet",
                path: "/sch/exam-Mark/consolidated-marks-sheet",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Subject Wise Report",
                renderName: "subjectWiseReport",
                path: "/sch/exam-Mark/subject-wise-report",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Division Wise Report",
                renderName: "divisionWiseReport",
                path: "/sch/exam-Mark/division-wise-report",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "LMS",
            path: "",
            renderName: ["storage", "courses", "courseContent", "live"],
            icon: (0, re.jsx)(Y.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Storage",
                renderName: "storage",
                path: "/sch/lms/storage",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Courses",
                renderName: "courses",
                path: "/sch/lms/courses",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Course Content",
                renderName: "courseContent",
                path: "/sch/lms/course-content",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Live",
                renderName: "live",
                path: "/sch/lms/live",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Library",
            path: "",
            renderName: [
              "books",
              "periodical",
              "studentLibraryMember",
              "employeeLibraryMember",
              "studentIssueReturn",
            ],
            icon: (0, re.jsx)(Y.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Books",
                renderName: "books",
                path: "/sch/library/books",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Periodical",
                renderName: "periodical",
                path: "/sch/library/periodical",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Student Library Member",
                renderName: "studentLibraryMember",
                path: "/sch/library/student-library-member",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Employee Library Member",
                renderName: "employeeLibraryMember",
                path: "/sch/library/employee-library-member",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Issue & Return",
                renderName: "studentIssueReturn",
                path: "/sch/library/student-issue-return",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Leave Management",
            path: "",
            renderName: [
              "leaveType",
              "employeeLeave",
              "studentLeave",
              "leaveReport",
            ],
            icon: (0, re.jsx)(K.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Leave Type",
                renderName: "leaveType",
                path: "/sch/leave-management/leave-type",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Employee Leave",
                renderName: "employeeLeave",
                path: "/sch/leave-management/employee-leave",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Students Leave",
                renderName: "studentLeave",
                path: "/sch/leave-management/student-leave",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Leave Report",
                renderName: "leaveReport",
                path: "/sch/leave-management/leave-report",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Inventory",
            path: "",
            renderName: [
              "item",
              "vendor",
              "transaction",
              "stockList",
              "issue",
              "sell",
            ],
            icon: (0, re.jsx)(J.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Item",
                renderName: "item",
                path: "/sch/inventory/item",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Vendor",
                renderName: "vendor",
                path: "/sch/inventory/vendor",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "In/Out Transaction",
                renderName: "transaction",
                path: "/sch/inventory/transaction",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Stock List",
                renderName: "stockList",
                path: "/sch/inventory/stockList",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Issue",
                renderName: "issue",
                path: "/sch/inventory/issue",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Sell",
                renderName: "sell",
                path: "/sch/inventory/sell",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Certificate",
            path: "",
            renderName: ["studyCertificate", "transferCertificate"],
            icon: (0, re.jsx)(ae.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Study Certificate",
                renderName: "studyCertificate",
                path: "/sch/certificate/study-certificate",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Transfer Certificate",
                renderName: "transferCertificate",
                path: "/sch/certificate/transfer-certificate",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Fees",
            path: "",
            renderName: [
              "receiptBook",
              "feeMapCategory",
              "collectFees",
              "balanceFee",
              "feeOverview",
              "reconciliation",
            ],
            icon: (0, re.jsx)(le.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Receipt Book",
                renderName: "receiptBook",
                path: "/sch/fees/receipt-book",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Fee Map Category",
                renderName: "feeMapCategory",
                path: "/sch/fees/feeMap-category",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Collect Fees",
                renderName: "collectFees",
                path: "/sch/fees/collect-fees",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Balance Fee",
                renderName: "balanceFee",
                path: "/sch/fees/balance-fee",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Fee Overview",
                renderName: "feeOverview",
                path: "/sch/fees/fee-overview",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Reconciliation",
                renderName: "reconciliation",
                path: "/sch/fees/re-conciliation",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Hostel",
            path: "",
            renderName: [
              "manageHostel",
              "manageRoomType",
              "manageRoomBed",
              "hostelMember",
            ],
            icon: (0, re.jsx)(q.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Manage Hostel",
                renderName: "manageHostel",
                path: "/sch/hostel/manage-hostel",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Manage Room Type",
                renderName: "manageRoomType",
                path: "/sch/hostel/manage-room-type",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Manage Room Bed",
                renderName: "manageRoomBed",
                path: "/sch/hostel/manage-room-bed",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Hostel Member",
                renderName: "hostelMember",
                path: "/sch/hostel/hostel-member",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Transport",
            path: "",
            renderName: [
              "vehicle",
              "manageRoute",
              "routes",
              "trasportMember",
              "vehicleLog",
              "vehicleMaintenance",
            ],
            icon: (0, re.jsx)(W.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Vehicle",
                renderName: "vehicle",
                path: "/sch/transport/vehicle",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Manage Route & Trips",
                renderName: "manageRoute",
                path: "/sch/transport/manage-route",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Routes",
                renderName: "routes",
                path: "/sch/transport/routes",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Trasport Member",
                renderName: "trasportMember",
                path: "/sch/transport/trasport-member",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Vehicle Log",
                renderName: "vehicleLog",
                path: "/sch/transport/vehicle-log",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Vehicle Maintenance",
                renderName: "vehicleMaintenance",
                path: "/sch/transport/vehicle-maintenance",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Payroll",
            path: "",
            renderName: ["salaryGrade", "makePayment"],
            icon: (0, re.jsx)(R.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Salary Grade",
                renderName: "salaryGrade",
                path: "/sch/payroll/salary-grade",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Make Payment",
                renderName: "makePayment",
                path: "/sch/payroll/make-payment",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Report",
            path: "",
            renderName: [
              "libraryReport",
              "studentAttendance",
              "studentYearlyAttendane",
              "employeeAttendance",
              "employeeYearlyAttendance",
              "studentReport",
              "studentActivityReport",
            ],
            icon: (0, re.jsx)(ne.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Library Report",
                renderName: "libraryReport",
                path: "/sch/report/library-report",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Student Attendance",
                renderName: "studentAttendance",
                path: "/sch/report/student-attendance",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Student Yearly Attendane",
                renderName: "studentYearlyAttendaneroutes",
                path: "/sch/report/student-yearly-attendane",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Employee Attendance",
                renderName: "employeeAttendance",
                path: "/sch/report/employee-attendance",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Employee Yearly Attendance",
                renderName: "employeeYearlyAttendance",
                path: "/sch/report/employee-yearly-attendance",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Student Report",
                renderName: "studentReport",
                path: "/sch/report/student-report",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Student Activity Report",
                renderName: "studentActivityReport",
                path: "/sch/report/student-activity-report",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Visitor Info",
            path: "",
            renderName: ["visitorInfo", "studentCheckout"],
            icon: (0, re.jsx)(O.A, { color: "primary", fontSize: "small" }),
            subMenus: [
              {
                name: "Visitor Info",
                renderName: "visitorInfo",
                path: "/sch/visitorInfo/visitor-info",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
              {
                name: "Student Checkout",
                renderName: "studentCheckout",
                path: "/sch/visitorInfo/student-checkout",
                icon: (0, re.jsx)(L.A, { color: "primary", fontSize: "small" }),
              },
            ],
          },
          {
            name: "Help Desk",
            path: "/sch/help-desk",
            renderName: ["Help desk"],
            subMenus: [],
            icon: (0, re.jsx)(Z.A, { color: "primary", fontSize: "small" }),
          },
          {
            name: "Guardian Feedback",
            path: "/sch/guardian-feedback",
            renderName: ["guardianFeedback"],
            subMenus: [],
            icon: (0, re.jsx)(V.A, { color: "primary", fontSize: "small" }),
          },
        ],
      };
      var ce = a(29541),
        me = a(12110),
        ue = a(63336),
        xe = a(68903),
        he = a(50108),
        pe = a(82291),
        je = a(87734),
        ge = a(52185),
        Ae = a(6026),
        ye = a(86150),
        fe = a(21327),
        ve = a(38643),
        be = a(31883),
        Se = a(87715),
        ke = a(13059),
        Ce = a(81728);
      const De = () => {
          const { selectedSetting: e } = (0, l.useContext)(Ce.A),
            [t, a] = (0, l.useState)([]),
            [n, i] = (0, l.useState)([]),
            { ref: o, width: r } = (0, be.A)();
          return (
            (0, l.useEffect)(() => {
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(
                      ke.r.student.getDashboardStudentDetails,
                      { params: { schoolId: e._id } }
                    ),
                    l = t.result.map((e) => {
                      const t = { className: e.className };
                      return (
                        Object.keys(e.sections).forEach((a) => {
                          t[a] = e.sections[a];
                        }),
                        t
                      );
                    });
                  a(l);
                  const n = new Set();
                  t.result.forEach((e) => {
                    Object.keys(e.sections).forEach((e) => {
                      n.add(e);
                    });
                  }),
                    i([...n]);
                } catch (t) {
                  console.log(t);
                }
              })();
            }, [e]),
            (0, re.jsx)(s.A, {
              sx: { display: "flex", flex: 1 },
              ref: o,
              children: (0, re.jsx)(he.u, {
                width: "100%",
                height: "100%",
                children: (0, re.jsx)(ue.A, {
                  sx: { width: "100%", height: "100%" },
                  children: (0, re.jsxs)(pe.E, {
                    width: r ? r - 10 : 700,
                    height: 373,
                    data: t,
                    margin: { top: 20, right: 5, left: 0, bottom: 5 },
                    children: [
                      (0, re.jsx)(je.d, { strokeDasharray: "3 3" }),
                      (0, re.jsx)(ge.W, { dataKey: "className" }),
                      (0, re.jsx)(Ae.h, {}),
                      (0, re.jsx)(ye.m, {}),
                      (0, re.jsx)(fe.s, {}),
                      n.map((e) =>
                        (0, re.jsx)(
                          ve.y,
                          {
                            dataKey: e,
                            fill:
                              "#" +
                              Math.floor(16777215 * Math.random()).toString(16),
                            stackId: "stack",
                          },
                          e
                        )
                      ),
                    ],
                  }),
                }),
              }),
            })
          );
        },
        we = (0, n.Ay)(me.A)((e) => {
          let { theme: t } = e;
          return {
            marginBottom: "15px",
            padding: "20px 0",
            height: "auto",
            width: "100%",
            alignItems: "center",
            justifyContent: "center",
            [t.breakpoints.down("sm")]: { flexDirection: "column" },
            [t.breakpoints.down("xs")]: { flexDirection: "column" },
            [t.breakpoints.down("md")]: { flexDirection: "row" },
          };
        }),
        Ie = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            alignSelf: "center",
            display: "flex",
            justifyContent: "center",
          };
        }),
        Ne =
          ((0, n.Ay)(s.A)((e) => {
            let { theme: t } = e;
            return {
              alignSelf: "center",
              display: "flex",
              alignItems: "center",
              height: "100%",
              justifyContent: "center",
              fontSize: "16px",
              fontWeight: 600,
            };
          }),
          (0, n.Ay)(s.A)((e) => {
            let { theme: t } = e;
            return {
              display: "flex",
              flexDirection: "column",
              textAlign: "center",
            };
          })),
        _e = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "center",
            flexDirection: "column",
            alignItems: "center",
            marginTop: "3px",
          };
        });
      function Te() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var t, l;
              const [n, s] = await Promise.all([
                (0, Se.Jt)(
                  ke.r.studentAttendance.getAttendanceSummaryForToday,
                  { params: { schoolId: e._id } }
                ),
                (0, Se.Jt)(
                  ke.r.employeeAttendance.getEmployeeAttendanceSummaryForToday,
                  { params: { schoolId: e._id } }
                ),
              ]);
              a(null === (t = n.data) || void 0 === t ? void 0 : t.result),
                i(
                  null === s ||
                    void 0 === s ||
                    null === (l = s.data) ||
                    void 0 === l
                    ? void 0
                    : l.result
                );
            } catch (n) {
              console.log(n);
            }
          })();
        }, [e._id]);
        const s = window.localStorage.getItem("isDarkMode");
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(ue.A, {
            sx: {
              padding: { xs: 2, sm: 2, md: "0px 15px", lg: "0px 15px" },
              margin: "20px 0px",
              backgroundColor: (e) =>
                "dark" === e.palette.mode
                  ? "rgba(255,255,255,0.5)"
                  : "whitesmoke",
            },
            children: (0, re.jsxs)(xe.Ay, {
              container: !0,
              spacing: 2,
              children: [
                (0, re.jsxs)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 4,
                  lg: 4,
                  children: [
                    (0, re.jsxs)(we, {
                      children: [
                        (0, re.jsx)(Ie, {
                          children: (0, re.jsx)(Z.A, {
                            sx: {
                              width: "80px",
                              height: "70px",
                              color: "true" === s ? "#fff" : "#1b3779",
                            },
                          }),
                        }),
                        (0, re.jsxs)(Ne, {
                          children: [
                            (0, re.jsx)(u.A, {
                              sx: { fontWeight: 600 },
                              children: "Students Attendance",
                            }),
                            (0, re.jsxs)(_e, {
                              children: [
                                (0, re.jsxs)(b.A, {
                                  direction: "row",
                                  spacing: 2,
                                  children: [
                                    (0, re.jsxs)(u.A, {
                                      fontSize: "12px",
                                      fontWeight: 600,
                                      children: [
                                        (0, re.jsx)("span", {
                                          style: { color: "#FF8042" },
                                          children: "Total Students: ",
                                        }),
                                        null === t || void 0 === t
                                          ? void 0
                                          : t.totalStudents,
                                      ],
                                    }),
                                    (0, re.jsxs)(u.A, {
                                      fontSize: "12px",
                                      fontWeight: 600,
                                      children: [
                                        (0, re.jsx)("span", {
                                          style: { color: "#00C49F" },
                                          children: "Not Taken: ",
                                        }),
                                        null === t || void 0 === t
                                          ? void 0
                                          : t.attendanceNotTaken,
                                      ],
                                    }),
                                  ],
                                }),
                                (0, re.jsxs)(b.A, {
                                  direction: "row",
                                  spacing: 2,
                                  children: [
                                    (0, re.jsxs)(u.A, {
                                      fontSize: "12px",
                                      fontWeight: 600,
                                      children: [
                                        (0, re.jsx)("span", {
                                          style: { color: "#0088FE" },
                                          children: "Total Present: ",
                                        }),
                                        null === t || void 0 === t
                                          ? void 0
                                          : t.totalPresent,
                                      ],
                                    }),
                                    (0, re.jsxs)(u.A, {
                                      fontSize: "12px",
                                      fontWeight: 600,
                                      children: [
                                        (0, re.jsx)("span", {
                                          style: { color: "red" },
                                          children: "Total Absent: ",
                                        }),
                                        null === t || void 0 === t
                                          ? void 0
                                          : t.totalAbsent,
                                      ],
                                    }),
                                  ],
                                }),
                              ],
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(we, {
                      children: [
                        (0, re.jsx)(Ie, {
                          children: (0, re.jsx)(Z.A, {
                            sx: {
                              width: "80px",
                              height: "70px",
                              color: "true" === s ? "#fff" : "#1b3779",
                            },
                          }),
                        }),
                        (0, re.jsxs)(Ne, {
                          children: [
                            (0, re.jsx)(u.A, {
                              sx: { fontWeight: 600 },
                              children: "Employees Attendance",
                            }),
                            (0, re.jsxs)(_e, {
                              children: [
                                (0, re.jsxs)(b.A, {
                                  direction: "row",
                                  spacing: 2,
                                  children: [
                                    (0, re.jsxs)(u.A, {
                                      fontSize: "12px",
                                      fontWeight: 600,
                                      children: [
                                        (0, re.jsxs)("span", {
                                          style: { color: "#FF8042" },
                                          children: ["Total Employees:", " "],
                                        }),
                                        null === n || void 0 === n
                                          ? void 0
                                          : n.totalEmployees,
                                      ],
                                    }),
                                    (0, re.jsxs)(u.A, {
                                      fontSize: "12px",
                                      fontWeight: 600,
                                      children: [
                                        (0, re.jsx)("span", {
                                          style: { color: "#00C49F" },
                                          children: "Not Taken: ",
                                        }),
                                        null === n || void 0 === n
                                          ? void 0
                                          : n.attendanceNotTaken,
                                      ],
                                    }),
                                  ],
                                }),
                                (0, re.jsxs)(b.A, {
                                  direction: "row",
                                  spacing: 2,
                                  children: [
                                    (0, re.jsxs)(u.A, {
                                      fontSize: "12px",
                                      fontWeight: 600,
                                      children: [
                                        (0, re.jsx)("span", {
                                          style: { color: "#0088FE" },
                                          children: "Total Present: ",
                                        }),
                                        null === n || void 0 === n
                                          ? void 0
                                          : n.totalPresent,
                                      ],
                                    }),
                                    (0, re.jsxs)(u.A, {
                                      fontSize: "12px",
                                      fontWeight: 600,
                                      children: [
                                        (0, re.jsx)("span", {
                                          style: { color: "red" },
                                          children: "Total Absent: ",
                                        }),
                                        null === n || void 0 === n
                                          ? void 0
                                          : n.totalAbsent,
                                      ],
                                    }),
                                  ],
                                }),
                                (0, re.jsx)(b.A, {
                                  direction: "row",
                                  spacing: 2,
                                  children: (0, re.jsxs)(u.A, {
                                    fontSize: "12px",
                                    fontWeight: 600,
                                    children: [
                                      (0, re.jsx)("span", {
                                        style: { color: "#FFBB28" },
                                        children: "Total Late: ",
                                      }),
                                      null === n || void 0 === n
                                        ? void 0
                                        : n.totalLate,
                                    ],
                                  }),
                                }),
                              ],
                            }),
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 8,
                  lg: 8,
                  children: (0, re.jsx)(De, {}),
                }),
              ],
            }),
          }),
        });
      }
      var Me = a(24010),
        Fe = a(62007),
        ze = a(29326),
        Ee = a(80889);
      const qe = (0, n.Ay)(me.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            textAlign: "center",
            justifyContent: "space-evenly",
            padding: "25px 0px",
            flexDirection: "column",
          };
        }),
        Ye = (0, n.Ay)(Me.A)((e) => {
          let { theme: t } = e;
          return {
            background: "#1b3779",
            color: "#fff",
            "&:hover": { color: "#1b3779" },
          };
        });
      function We() {
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(ue.A, {
            sx: {
              padding: 2,
              backgroundColor: (e) =>
                "dark" === e.palette.mode
                  ? "rgba(255,255,255,0.5)"
                  : "whitesmoke",
            },
            children: (0, re.jsxs)(xe.Ay, {
              container: !0,
              spacing: 2,
              children: [
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 12,
                  lg: 12,
                  display: "flex",
                  justifyContent: "center",
                  children: (0, re.jsx)(u.A, {
                    sx: {
                      fontSize: 18,
                      fontWeight: "bold",
                      color: (e) =>
                        "dark" === e.palette.mode ? "white" : "black",
                    },
                    children: "Quick Links",
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 2.4,
                  lg: 2.4,
                  children: (0, re.jsx)(N.N_, {
                    to: "/sch/student/add-student",
                    style: { textDecoration: "none" },
                    children: (0, re.jsxs)(qe, {
                      children: [
                        (0, re.jsx)(s.A, {
                          children: (0, re.jsx)(Ye, {
                            size: "small",
                            children: (0, re.jsx)(Z.A, {}),
                          }),
                        }),
                        (0, re.jsx)(s.A, { children: "Admit Students" }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 2.4,
                  lg: 2.4,
                  children: (0, re.jsx)(N.N_, {
                    to: "/sch/human-resource/add-employee",
                    style: { textDecoration: "none" },
                    children: (0, re.jsxs)(qe, {
                      children: [
                        (0, re.jsx)(s.A, {
                          children: (0, re.jsx)(Ye, {
                            size: "small",
                            children: (0, re.jsx)(Z.A, {}),
                          }),
                        }),
                        (0, re.jsx)(s.A, { children: "Admit Employee" }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 2.4,
                  lg: 2.4,
                  children: (0, re.jsx)(N.N_, {
                    to: "/sch/exam-Mark/exam-result",
                    style: { textDecoration: "none" },
                    children: (0, re.jsxs)(qe, {
                      children: [
                        (0, re.jsx)(s.A, {
                          children: (0, re.jsx)(Ye, {
                            size: "small",
                            children: (0, re.jsx)(Fe.A, {}),
                          }),
                        }),
                        (0, re.jsx)(u.A, { children: " Exam Results" }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 2.4,
                  lg: 2.4,
                  children: (0, re.jsx)(N.N_, {
                    to: "/sch/exam-Mark/marks-card",
                    style: { textDecoration: "none" },
                    children: (0, re.jsxs)(qe, {
                      children: [
                        (0, re.jsx)(s.A, {
                          children: (0, re.jsx)(Ye, {
                            size: "small",
                            children: (0, re.jsx)(ze.A, {}),
                          }),
                        }),
                        (0, re.jsx)(u.A, { children: "Marks Cards" }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 2.4,
                  lg: 2.4,
                  children: (0, re.jsx)(N.N_, {
                    to: "/sch/communication_compose",
                    style: { textDecoration: "none" },
                    children: (0, re.jsxs)(qe, {
                      children: [
                        (0, re.jsx)(s.A, {
                          children: (0, re.jsx)(Ye, {
                            size: "small",
                            children: (0, re.jsx)(Ee.A, {}),
                          }),
                        }),
                        (0, re.jsx)(u.A, { children: "Communication" }),
                      ],
                    }),
                  }),
                }),
              ],
            }),
          }),
        });
      }
      var Re = a(24490),
        Pe = (a(66097), a(71995)),
        Je = a.n(Pe),
        Ve = a(60446),
        Be = a.n(Ve),
        Oe = (a(61327), a(73213));
      const Le = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            borderRadius: "5px",
            margin: "18px",
            transform: "translateY(0%)",
            animation: "scroll 15s linear infinite",
            animationPlayState: "running",
            "&:hover": { animationPlayState: "paused" },
            "@keyframes scroll": {
              from: { transform: "translateY(50%)" },
              to: { transform: "translateY(-100%)" },
            },
          };
        }),
        Ue = (0, n.Ay)(me.A)((e) => {
          let { theme: t } = e;
          return { textAlign: "center", margin: "10px 0px", height: "100%" };
        }),
        He = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            textAlign: "center",
            margin: "5px",
            padding: "5px",
            fontWeight: 700,
          };
        }),
        Ge = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            textAlign: "center",
            height: "auto",
            width: "95%",
            marginLeft: "1rem",
            marginRight: "2rem",
            paddingBottom: "5px",
            position: "relative",
          };
        }),
        Ke = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            fontWeight: "bold",
            cursor: "pointer",
            fontSize: "18px",
            borderLeft: "7px solid #ffeb3b",
            paddingLeft: t.spacing(1),
          };
        }),
        Qe = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            fontWeight: 700,
            "&:hover": {
              color: Oe.A.darkPalette.primary.main,
              cursor: "pointer",
            },
          };
        });
      function Ze() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]);
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.notice.list, {
                  params: { schoolId: e._id },
                });
                a(t.result);
              } catch (t) {
                console.log(t);
              }
            })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.holiday.list, {
                    params: { schoolId: e._id },
                  });
                  i(t.result);
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [e._id]),
          (0, re.jsx)(re.Fragment, {
            children: (0, re.jsx)(ue.A, {
              sx: {
                padding: 2,
                mt: 2,
                backgroundColor: (e) =>
                  "dark" === e.palette.mode
                    ? "rgba(255,255,255,0.5)"
                    : "whitesmoke",
              },
              children: (0, re.jsxs)(xe.Ay, {
                container: !0,
                spacing: 2,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 6,
                    lg: 6,
                    children: (0, re.jsx)(Re.Ay, {
                      tileClassName: (e) => {
                        let { date: t } = e;
                        const a = new Date();
                        return t.toDateString() === a.toDateString()
                          ? "blue-day"
                          : "";
                      },
                    }),
                  }),
                  (0, re.jsxs)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 6,
                    lg: 6,
                    children: [
                      (0, re.jsx)(me.A, {
                        sx: { minHeight: "200px", padding: "15px" },
                        children: (0, re.jsxs)(Je(), {
                          open: !0,
                          children: [
                            (0, re.jsx)(Ke, {
                              children: "Notices: (".concat(
                                null === t || void 0 === t ? void 0 : t.length,
                                ")"
                              ),
                            }),
                            (0, re.jsx)(x.A, { sx: { width: "100%", mt: 1 } }),
                            (0, re.jsx)(s.A, {
                              sx: {
                                height: "140px",
                                maxHeight: "140px",
                                overflow: "auto",
                              },
                              children: (0, re.jsxs)(Ue, {
                                elevation: 0,
                                children: [
                                  (0, re.jsx)(Le, {
                                    children:
                                      null === t || void 0 === t
                                        ? void 0
                                        : t.map((e, t) =>
                                            (0, re.jsx)(
                                              Ge,
                                              {
                                                children: (0, re.jsx)(Qe, {
                                                  component: "li",
                                                  children: e.notice,
                                                }),
                                              },
                                              t
                                            )
                                          ),
                                  }),
                                  !(null !== t && void 0 !== t && t.length) &&
                                    (0, re.jsx)(He, {
                                      variant: "h6",
                                      children: "No data found",
                                    }),
                                ],
                              }),
                            }),
                          ],
                        }),
                      }),
                      (0, re.jsx)(me.A, {
                        sx: {
                          minHeight: "200px",
                          padding: "15px",
                          marginTop: "10px",
                        },
                        children: (0, re.jsxs)(Je(), {
                          open: !0,
                          children: [
                            (0, re.jsx)(Ke, {
                              children: "Holidays: (".concat(
                                null === n || void 0 === n ? void 0 : n.length,
                                ")"
                              ),
                            }),
                            (0, re.jsx)(x.A, { sx: { width: "100%", mt: 1 } }),
                            (0, re.jsx)(s.A, {
                              sx: {
                                height: "140px",
                                maxHeight: "140px",
                                overflow: "auto",
                              },
                              children: (0, re.jsxs)(Ue, {
                                elevation: 0,
                                children: [
                                  (0, re.jsx)(Le, {
                                    children:
                                      null === n || void 0 === n
                                        ? void 0
                                        : n.map((e, t) =>
                                            (0, re.jsx)(
                                              Ge,
                                              {
                                                children: (0, re.jsx)(Qe, {
                                                  component: "li",
                                                  children: e.title,
                                                }),
                                              },
                                              t
                                            )
                                          ),
                                  }),
                                  !(null !== n && void 0 !== n && n.length) &&
                                    (0, re.jsx)(He, {
                                      variant: "h6",
                                      children: "No data found",
                                    }),
                                ],
                              }),
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                ],
              }),
            }),
          })
        );
      }
      var $e = a(42518),
        Xe = a(69652),
        et = a(63516);
      function tt() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          t = (0, _.Zp)(),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          d = (0, et.Wx)({
            initialValues: { class: "", section: "", student: "" },
            onSubmit: (e) => {
              e.student && t("/sch/student/edit-student/".concat(e.student));
            },
            enableReinitialize: !0,
          });
        return (
          (0, l.useEffect)(() => {
            d.values.class &&
              (async () => {
                try {
                  if ("all" === d.values.class) {
                    const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                      params: { schoolId: e._id },
                    });
                    s([{ label: "All", value: "all" }]),
                      d.setFieldValue("section", "all");
                  } else {
                    const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                        params: {
                          schoolId: e._id,
                          search: { class: d.values.class },
                        },
                      }),
                      a = [
                        { label: "All", value: "all" },
                        ...t.result.map((e) => ({
                          label: e.name,
                          value: e._id,
                        })),
                      ];
                    s(a), d.setFieldValue("section", "all");
                  }
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [d.values.class, e._id]),
          (0, l.useEffect)(() => {
            d.values.class &&
              d.values.section &&
              (async (t) => {
                try {
                  if ("all" !== t.class && "all" === t.section) {
                    const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                      params: {
                        schoolId: e._id,
                        search: { "academicInfo.class": t.class },
                      },
                    });
                    r(
                      a.result.map((e) => ({
                        ...e,
                        label: ""
                          .concat(e.basicInfo.name, "  | ")
                          .concat(e.academicInfo.rollNumber, " | ")
                          .concat(e.contactNumber, " "),
                        value: e._id,
                      }))
                    );
                  } else if ("all" === t.class) {
                    const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                      params: { schoolId: e._id },
                    });
                    r(
                      t.result.map((e) => ({
                        ...e,
                        label: ""
                          .concat(e.basicInfo.name, "  | ")
                          .concat(e.academicInfo.rollNumber, " | ")
                          .concat(e.contactNumber, " "),
                        value: e._id,
                      }))
                    );
                  } else {
                    const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                      params: {
                        schoolId: e._id,
                        search: {
                          "academicInfo.class": t.class,
                          "academicInfo.section": t.section,
                        },
                      },
                    });
                    r(
                      a.result.map((e) => ({
                        ...e,
                        label: ""
                          .concat(e.basicInfo.name, "  | ")
                          .concat(e.academicInfo.rollNumber, " | ")
                          .concat(e.contactNumber, " "),
                        value: e._id,
                      }))
                    );
                  }
                } catch (a) {
                  console.log(a);
                }
              })(d.values);
          }, [d.values.class, d.values.section, e._id]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  }),
                  a = [
                    { label: "All", value: "all" },
                    ...t.result.map((e) => ({ label: e.name, value: e._id })),
                  ];
                n(a), d.setFieldValue("class", "all");
              } catch (t) {
                console.log(t);
              }
            })();
          }, [e._id]),
          (0, re.jsx)(re.Fragment, {
            children: (0, re.jsx)(ue.A, {
              sx: { padding: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                component: "form",
                onSubmit: d.handleSubmit,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: d,
                      label: "Select Class",
                      options: a,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: d,
                      label: "Select Section",
                      options: i,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "student",
                      formik: d,
                      label: "Select Student",
                      options: o,
                      showSearch: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center" },
                    item: !0,
                    children: (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      type: "submit",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
          })
        );
      }
      function at() {
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Welcome To School ERP " }),
            (0, re.jsx)(tt, {}),
            (0, re.jsx)(Te, {}),
            (0, re.jsx)(We, {}),
            (0, re.jsx)(Ze, {}),
          ],
        });
      }
      var lt = a(52101),
        nt = a(58293),
        it = a(3341),
        st = a(42111),
        ot = a(22505);
      function rt(e) {
        let { disabled: t, title: a, onAddClick: l = () => {} } = e;
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(s.A, {
            sx: {
              position: "fixed",
              width: "-moz-fit-content",
              width: "fit-content",
              right: "70px",
              bottom: "20px",
            },
            children: (0, re.jsx)(S.A, {
              title: a,
              children: (0, re.jsx)(Me.A, {
                variant: "contained",
                onClick: l,
                disabled: t,
                sx: {
                  color: "#ffff",
                  background: Oe.A.darkPalette.primary.main,
                  ":hover": { background: Oe.A.darkPalette.primary.main },
                },
                children: (0, re.jsx)(ot.A, {}),
              }),
            }),
          }),
        });
      }
      var dt = a(30344),
        ct = a(83462),
        mt = a(4219),
        ut = a(35316),
        xt = a(29347),
        ht = a(72812);
      function pt(e) {
        let {
          formTitle: t = "",
          children: a,
          formik: l,
          open: n = !1,
          onClose: s = () => {},
          submitButtonTitle: o = "",
          styles: r = {},
          adding: d = !1,
        } = e;
        const c = (0, i.A)();
        let m = (0, dt.A)(c.breakpoints.down("sm"));
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(ct.A, {
            fullScreen: m,
            open: n,
            onClose: s,
            PaperProps: {
              sx: { width: "100%", maxWidth: 650, ...r },
              component: "form",
              onSubmit: l.handleSubmit,
            },
            children: [
              (0, re.jsx)(mt.A, { sx: { fontWeight: 600 }, children: t }),
              (0, re.jsx)(x.A, {}),
              (0, re.jsx)(ut.A, { sx: { padding: "10px" }, children: a }),
              (0, re.jsxs)(xt.A, {
                children: [
                  (0, re.jsx)($e.A, {
                    size: "small",
                    color: "error",
                    variant: "contained",
                    onClick: s,
                    children: "Close",
                  }),
                  (0, re.jsx)(ht.A, {
                    size: "small",
                    loading: d,
                    variant: "contained",
                    type: "submit",
                    children: o,
                  }),
                ],
              }),
            ],
          }),
        });
      }
      var jt = a(20486);
      const gt = [
        { name: "Academic Year", key: "academicYear" },
        { name: "Active\t", key: "active" },
        { name: "Note\t", key: "note" },
      ];
      var At = a(95482);
      function yt() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          c = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.academicYear.list, {
                params: { schoolId: e._id },
              });
              a(
                t.result.map((e) => ({
                  ...e,
                  academicYear: "".concat(e.from, "-").concat(e.to),
                }))
              );
            } catch (t) {
              console.log(t);
            }
          },
          m = () => {
            i(!1), o(null);
          },
          u = (0, et.Wx)({
            initialValues: {
              from: (null === s || void 0 === s ? void 0 : s.from) || "",
              to: (null === s || void 0 === s ? void 0 : s.to) || "",
              note: (null === s || void 0 === s ? void 0 : s.note) || "",
            },
            onSubmit: async (e) => {
              try {
                const t = { ...e };
                if ((d(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.academicYear.update + "/" + s._id,
                    t
                  );
                  c();
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.academicYear.create,
                    t
                  );
                  c();
                }
                m();
              } catch (t) {
                console.log(t);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        console.log(e, "0000000"),
          (0, l.useEffect)(() => {
            c();
          }, [e._id]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Academic Year" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "switch"],
              bodyDataModal: "academic year",
              bodyData: t,
              tableKeys: gt,
              onEditClick: (e) => {
                o(e), i(!0);
              },
              toggleStatus: "active",
              onToggleSwitch: async (e) => {
                try {
                  const { data: t } = await (0, Se.yJ)(
                    ke.r.academicYear.toggleActiveStatus + "/" + e._id
                  );
                  c();
                } catch (t) {
                  console.log(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Academic Year",
              onAddClick: () => {
                i(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: n,
              formik: u,
              formTitle: "Add Academic Year",
              onClose: m,
              submitButtonTitle: "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "from",
                      label: "From Year",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "to",
                      label: "To Year",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      type: "text",
                      formik: u,
                      name: "note",
                      label: "Drop a note",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const ft = [
        { name: "Designation", key: "name" },
        { name: "Note", key: "note" },
      ];
      function vt() {
        const [e, t] = (0, l.useState)([]),
          [a, n] = (0, l.useState)(!1),
          [i, s] = (0, l.useState)(!1),
          [o, r] = (0, l.useState)(null),
          d = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.designation.list);
              t(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          d();
        }, []);
        const c = () => {
            n(!1), r(null);
          },
          m = (0, et.Wx)({
            initialValues: {
              name: (null === o || void 0 === o ? void 0 : o.name) || "",
              orderSequence:
                (null === o || void 0 === o ? void 0 : o.orderSequence) ||
                e.length + 1,
              note: (null === o || void 0 === o ? void 0 : o.note) || "",
            },
            onSubmit: async (e) => {
              try {
                const t = { ...e };
                if ((s(!0), o)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.designation.update + "/" + o._id,
                    t
                  );
                  d();
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.designation.create,
                    t
                  );
                  d();
                }
                c();
              } catch (t) {
                console.log(t);
              }
              s(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Designation" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: ft,
              bodyDataModal: "designation",
              bodyData: e,
              onEditClick: (e) => {
                console.log(e), r(e), n(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.yH)(
                    ke.r.designation.delete + "/" + e
                  );
                  d();
                } catch (t) {
                  console.log(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Desigation",
              onAddClick: () => {
                n(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: a,
              formik: m,
              formTitle: "Add Desigation",
              onClose: c,
              submitButtonTitle: o ? "Update" : "Add",
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      type: "text",
                      formik: m,
                      name: "name",
                      label: "Desigation",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      disabled: !o,
                      type: "number",
                      formik: m,
                      name: "orderSequence",
                      label: "Order Sequence",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      type: "text",
                      formik: m,
                      name: "note",
                      label: "Drop a note",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const bt = [
        { name: "Department", key: "name" },
        { name: "Note", key: "note" },
      ];
      function St() {
        const [e, t] = (0, l.useState)([]),
          [a, n] = (0, l.useState)(!1),
          [i, s] = (0, l.useState)(null),
          [o, r] = (0, l.useState)(!1),
          d = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.department.list);
              t(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          d();
        }, []);
        const c = () => {
            n(!1), s(null);
          },
          m = (0, et.Wx)({
            initialValues: {
              name:
                null !== i && void 0 !== i && i.name
                  ? null === i || void 0 === i
                    ? void 0
                    : i.name
                  : "",
              orderSequence:
                null !== i && void 0 !== i && i.orderSequence
                  ? null === i || void 0 === i
                    ? void 0
                    : i.orderSequence
                  : e.length + 1,
              note: (null === i || void 0 === i ? void 0 : i.note) || "",
            },
            onSubmit: async (e) => {
              try {
                const t = { ...e };
                if ((r(!0), i)) {
                  await (0, Se.yJ)(ke.r.department.update + "/" + i._id, t);
                  d();
                } else {
                  await (0, Se.bE)(ke.r.department.create, t);
                  d();
                }
                c();
              } catch (t) {
                console.log(t);
              }
              r(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Department" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: bt,
              bodyDataModal: "department",
              bodyData: e,
              onEditClick: (e) => {
                console.log(e), s(e), n(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.department.delete + "/" + e);
                  d();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Department",
              onAddClick: () => {
                n(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: a,
              formik: m,
              formTitle: "Add Department",
              onClose: c,
              submitButtonTitle: i ? "Update" : "Add",
              adding: o,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      type: "text",
                      formik: m,
                      name: "name",
                      label: "Department",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      type: "number",
                      formik: m,
                      name: "orderSequence",
                      label: "Order Sequence",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      type: "text",
                      formik: m,
                      name: "note",
                      label: "Drop a note",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      var kt = a(4599),
        Ct = a(15737);
      const Dt = [
          { name: "Department", key: "name" },
          { name: "Male", key: "male" },
          { name: "Female", key: "female" },
          { name: "Total", key: "total" },
        ],
        wt = [
          { name: "Employee Id", key: "empId", path: "basicInfo" },
          { name: "Photo", key: "photo", path: "basicInfo", type: "image" },
          { name: "Name", key: "name", path: "basicInfo" },
          { name: "Department", key: "name", path: "department" },
          { name: "Designation", key: "name", path: "designation" },
          { name: "Active", key: "active" },
        ],
        It = [
          { name: "Employee Id", key: "empId", path: "basicInfo" },
          { name: "Photo", key: "photo", path: "basicInfo", type: "image" },
          { name: "Name", key: "name", path: "basicInfo" },
          { name: "Department", key: "name", path: "department" },
          { name: "Designation", key: "name", path: "designation" },
          { name: "Active", key: "active" },
        ];
      var Nt = a(79484),
        _t = a(30513),
        Tt = a(62973),
        Mt = a(67784),
        Ft = a(51787);
      function zt() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          t = (0, _.Zp)(),
          [a, n] = (0, l.useState)(0),
          [i, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)(""),
          y = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.employee.list, {
                params: { schoolId: e._id },
              });
              x(t.result);
              const a = t.result
                  .filter((e) => e.active)
                  .map((e) => ({
                    ...e,
                    department: e.academicInfo.department,
                    designation: e.basicInfo.designation,
                  })),
                l = t.result
                  .filter((e) => !e.active)
                  .map((e) => ({
                    ...e,
                    department: e.academicInfo.department,
                    designation: e.basicInfo.designation,
                  }));
              o(a), d(l);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.department.list, {
                  params: { schoolId: e._id },
                }),
                a = t.result.map((e) => {
                  const t =
                      u.filter(
                        (t) =>
                          "male" === t.basicInfo.gender &&
                          !0 === t.active &&
                          t.academicInfo.department._id === e._id
                      ).length || 0,
                    a =
                      u.filter(
                        (t) =>
                          "female" === t.basicInfo.gender &&
                          !0 === t.active &&
                          t.academicInfo.department._id === e._id
                      ).length || 0,
                    l = t + a;
                  return { ...e, male: t, female: a, total: l };
                });
              m(a);
            } catch (t) {
              console.log(t);
            }
          })();
        }, [u, e._id]),
          (0, l.useEffect)(() => {
            y();
          }, [e._id]);
        const f = async (e) => {
            try {
              await (0, Se.yH)(ke.r.employee.delete + "/" + e);
              y();
            } catch (t) {
              console.error(t);
            }
          },
          v = (e) => {
            t("/sch/human-resource/edit-employee/".concat(e._id));
          },
          b = (e) => {
            const { value: t } = e.target;
            A(t.trim()),
              "" !== t.trim()
                ? i.length > 0 &&
                  j(
                    i.filter((e) =>
                      e.basicInfo.name
                        .toLowerCase()
                        .includes(t.toLowerCase().trim())
                    )
                  )
                : j([]);
          };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Employee" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => n(t),
              value: a,
              labels: ["Overview", "Employee List", "Inactive Employee List"],
            }),
            (0, re.jsx)(Ct.A, {
              index: 0,
              value: a,
              children: (0, re.jsx)(jt.A, {
                actions: "",
                tableKeys: Dt,
                bodyData: c,
                bodyDataModal: "employee",
              }),
            }),
            (0, re.jsxs)(Ct.A, {
              index: 1,
              value: a,
              children: [
                (0, re.jsxs)(s.A, {
                  sx: { display: "flex", gap: 2, margin: "15px 0" },
                  children: [
                    (0, re.jsx)(Mt.A, {
                      sx: { ml: 1 },
                      size: "small",
                      value: g,
                      onChange: b,
                      placeholder: "Search here...",
                      variant: "outlined",
                      InputProps: {
                        endAdornment: (0, re.jsx)(Ft.A, {
                          position: "end",
                          children: (0, re.jsx)(h.A, {
                            edge: "end",
                            type: "submit",
                            children: (0, re.jsx)(Nt.A, {}),
                          }),
                        }),
                      },
                    }),
                    (0, re.jsx)(S.A, {
                      title: "Print",
                      children: (0, re.jsx)(h.A, {
                        type: "button",
                        sx: { p: "10px" },
                        "aria-label": "search",
                        children: (0, re.jsx)(_t.A, {}),
                      }),
                    }),
                    (0, re.jsx)(S.A, {
                      title: "Excel Sheet Download",
                      children: (0, re.jsx)(h.A, {
                        type: "button",
                        sx: { p: "10px" },
                        "aria-label": "search",
                        children: (0, re.jsx)(Tt.A, {}),
                      }),
                    }),
                  ],
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["edit", "delete"],
                  tableKeys: wt,
                  bodyData: g ? p : i,
                  bodyDataModal: "employee",
                  onDeleteClick: f,
                  onEditClick: v,
                }),
              ],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 2,
              value: a,
              children: [
                (0, re.jsxs)(s.A, {
                  sx: { display: "flex", gap: 2, margin: "15px 0" },
                  children: [
                    (0, re.jsx)(Mt.A, {
                      sx: { ml: 1 },
                      size: "small",
                      value: g,
                      onChange: b,
                      placeholder: "Search here...",
                      variant: "outlined",
                      InputProps: {
                        endAdornment: (0, re.jsx)(Ft.A, {
                          position: "end",
                          children: (0, re.jsx)(h.A, {
                            edge: "end",
                            type: "submit",
                            children: (0, re.jsx)(Nt.A, {}),
                          }),
                        }),
                      },
                    }),
                    (0, re.jsx)(S.A, {
                      title: "Print",
                      children: (0, re.jsx)(h.A, {
                        type: "button",
                        sx: { p: "10px" },
                        "aria-label": "search",
                        children: (0, re.jsx)(_t.A, {}),
                      }),
                    }),
                    (0, re.jsx)(S.A, {
                      title: "Excel Sheet Download",
                      children: (0, re.jsx)(h.A, {
                        type: "button",
                        sx: { p: "10px" },
                        "aria-label": "search",
                        children: (0, re.jsx)(Tt.A, {}),
                      }),
                    }),
                  ],
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["edit", "delete"],
                  tableKeys: It,
                  bodyDataModal: "employee",
                  bodyData: g ? p : r,
                  onDeleteClick: f,
                  onEditClick: v,
                }),
              ],
            }),
            (0, re.jsx)(rt, {
              title: "Add Employee",
              onAddClick: (e) => {
                t("/sch/human-resource/add-employee");
              },
            }),
          ],
        });
      }
      const Et = [
        { name: "Employee Name", key: "name" },
        { name: "Joining Date", key: "joiningDate", isDate: !0 },
        { name: "Created At", key: "createdAt", isDate: !0 },
      ];
      var qt = a(83094),
        Yt = a(92823),
        Wt = a.n(Yt),
        Rt = (a(25884), a(74802)),
        Pt = a(63709),
        Jt = a(93141),
        Vt = a.n(Jt);
      function Bt(e) {
        let { open: t, content: a, onClose: n, onPrintClick: i, title: s } = e;
        const o = (0, l.useRef)(null);
        return (0, re.jsxs)(ct.A, {
          onClose: n,
          "aria-labelledby": "customized-dialog-title",
          open: t,
          children: [
            (0, re.jsx)(mt.A, {
              sx: { m: 0, p: 2, fontWeight: 600 },
              id: "customized-dialog-title",
              children: s,
            }),
            (0, re.jsx)(h.A, {
              "aria-label": "close",
              onClick: n,
              sx: { position: "absolute", right: 8, top: 8 },
              children: (0, re.jsx)(Rt.A, {}),
            }),
            (0, re.jsx)(ut.A, {
              children: (0, re.jsx)(u.A, {
                gutterBottom: !0,
                children: (0, re.jsx)("div", {
                  class: "printContainer",
                  ref: o,
                  dangerouslySetInnerHTML: { __html: a },
                }),
              }),
            }),
            (0, re.jsx)(xt.A, {
              children: (0, re.jsx)(Vt(), {
                trigger: () =>
                  (0, re.jsx)($e.A, {
                    variant: "contained",
                    size: "small",
                    sx: {
                      background: "#1b3779",
                      ":hover": { background: "#1b3779" },
                    },
                    onClick: i,
                    startIcon: (0, re.jsx)(Pt.A, {}),
                    children: "Print",
                  }),
                content: () => o.current,
              }),
            }),
          ],
        });
      }
      function Ot() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          c = (0, l.useRef)(),
          m = (0, Jt.useReactToPrint)({ content: () => c.current }),
          [u, x] = (0, l.useState)({ open: !1, containt: "" }),
          h = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.offerLetter.list, {
                params: { schoolId: e._id },
              });
              i(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          h();
        }, [e._id]);
        const p = (0, et.Wx)({
          initialValues: {
            name: (null === s || void 0 === s ? void 0 : s.name) || "",
            joiningDate:
              null !== s && void 0 !== s && s.joiningDate
                ? Be()(
                    null === s || void 0 === s ? void 0 : s.joiningDate
                  ).format("YYYY/MM/DD")
                : null,
            offerLetter:
              (null === s || void 0 === s ? void 0 : s.offerLetter) ||
              " <strong>Congratulations! You've Been Selected for the Role of [Job Title]</strong>\n          <p>[Company Name]</p>\n          <p>[Address eg. Excellent English Medium Primary & High School Ittangihal road, Vijaypur, Karnataka 586103]</p>\n          <p>[City, State, ZIP Code]</p>\n          <p>Date: [DD, MM, YY]</p>\n          <strong>Dear [Candidate's Full Name],</strong>\n          <p>We are thrilled to offer you the position of [Job Title] at [Company Name]. After careful consideration, we believe your skills, experience, and vision make you the perfect fit for our team.</p>\n          <strong>Position Details:</strong>\n            <p><strong>- Job Title:</strong> [Job Title]</p>\n            <p><strong>- Department:</strong> [Department]</p>\n            <p><strong>- Supervisor:</strong> [Supervisor/Manager Name]</p>\n            <p><strong>- Start Date:</strong> [Start Date]</p>\n            <p><strong>- Compensation:</strong> [Salary or Compensation Details]</p>\n        <strong>Work Hours:</strong>\n        <p>[Regular work hours, any flexible schedule options, etc.]</p>\n        <p>We believe that [Company Name] is a place where you can grow and thrive. Your role as [Job Title] will be pivotal in driving our company's success and we look forward to the innovative contributions you will bring to our team.</p>\n        <p>Please indicate your acceptance of this offer by signing and returning a copy of this letter by <strong>[Acceptance Deadline]</strong>. Should you have any questions or need further clarification, feel free to reach out to <strong>[HR Contact Name]</strong> at <strong>[HR Contact Email]</strong> or <strong>[HR Contact Phone Number]</strong>.</p>\n        <p>We eagerly await your positive response and look forward to welcoming you to the [Company Name] family.</p>\n        <p>Warm Regards,</p>\n        <p>[HR, Manager Name]</p>\n        <p>[Contact Information]</p>\n        <br/>\n        <p style=\"text-align:\"center;\">&copy; [Year] [Company Name]. All rights reserved.</p>\n      ",
          },
          onSubmit: async (t, l) => {
            let { resetForm: n } = l;
            try {
              const l = { ...t, schoolId: e._id };
              if ((d(!0), s)) {
                await (0, Se.yJ)(ke.r.offerLetter.update + "/" + s._id, l);
                h();
              } else {
                await (0, Se.bE)(ke.r.offerLetter.create, l);
                h();
              }
              n(), a(0);
            } catch (i) {
              console.log(i);
            }
            d(!1);
          },
          enableReinitialize: !0,
        });
        (0, l.useEffect)(() => {
          1 === t && (p.resetForm(), o(null));
        }, [t]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Offer Letter" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                a(t);
              },
              value: t,
              labels:
                s && 2 === t
                  ? [
                      "Offer letter list",
                      "Add offer letter",
                      "Edit offer letter",
                    ]
                  : ["Offer letter list", "Add offer Letter"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: t,
              children: [
                (0, re.jsx)(jt.A, {
                  actions: ["view", "edit", "delete"],
                  tableKeys: Et,
                  bodyDataModal: "offer letter",
                  bodyData: n,
                  onEditClick: (e) => {
                    o(e), a(2);
                  },
                  onDeleteClick: async (e) => {
                    try {
                      await (0, Se.yH)(ke.r.offerLetter.delete + "/" + e);
                      h();
                    } catch (t) {
                      console.error(t);
                    }
                  },
                  onViewClick: (e) => {
                    x({ ...u, open: !0, containt: e.offerLetter });
                  },
                }),
                (0, re.jsx)(Bt, {
                  title: "Offer Letter",
                  open: u.open,
                  content: u.containt,
                  onClose: () => {
                    x({ ...u, open: !1 });
                  },
                  onPrintClick: m,
                }),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: t,
              children: (0, re.jsx)("form", {
                onSubmit: p.handleSubmit,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "name",
                        formik: p,
                        label: "Employee Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: p,
                        label: "Joining Date",
                        name: "joiningDate",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(Wt(), {
                        theme: "snow",
                        value: p.values.offerLetter,
                        required: !0,
                        onChange: (e) => p.setFieldValue("offerLetter", e),
                        style: { height: "220px" },
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      mt: 6,
                      gap: 1,
                      display: "flex",
                      justifyContent: "flex-end",
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          onClick: () => a(0),
                          color: "error",
                          variant: "contained",
                          children: "Cancel",
                        }),
                        (0, re.jsx)(ht.A, {
                          loading: r,
                          size: "small",
                          type: "submit",
                          variant: "contained",
                          children: "Submit",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
            (0, re.jsx)(Ct.A, {
              index: 2,
              value: t,
              children: (0, re.jsx)("form", {
                onSubmit: p.handleSubmit,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "name",
                        formik: p,
                        label: "Employee Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: p,
                        label: "Joining Date",
                        name: "joiningDate",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(Wt(), {
                        theme: "snow",
                        required: !0,
                        value: p.values.offerLetter,
                        onChange: (e) => p.setFieldValue("offerLetter", e),
                        style: { height: "220px" },
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      mt: 6,
                      gap: 1,
                      display: "flex",
                      justifyContent: "flex-end",
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          onClick: () => a(0),
                          color: "error",
                          variant: "contained",
                          children: "Cancel",
                        }),
                        (0, re.jsx)(ht.A, {
                          loading: r,
                          size: "small",
                          type: "submit",
                          variant: "contained",
                          children: "Submit",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const Lt = [
        { name: "Employee Name", key: "name" },
        { name: "Joining Date", key: "joiningDate", isDate: !0 },
        { name: "Created At", key: "createdAt", isDate: !0 },
      ];
      function Ut() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)({ open: !1, containt: "" }),
          u = (0, l.useRef)(),
          x = (0, Jt.useReactToPrint)({ content: () => u.current }),
          h = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.relievingLetter.list, {
                params: { schoolId: e._id },
              });
              i(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          h();
        }, [e._id]);
        const p = (0, et.Wx)({
          initialValues: {
            name: (null === s || void 0 === s ? void 0 : s.name) || "",
            joiningDate:
              null !== s && void 0 !== s && s.joiningDate
                ? Be()(
                    null === s || void 0 === s ? void 0 : s.joiningDate
                  ).format("YYYY/MM/DD")
                : null,
            relievingLetter:
              (null === s || void 0 === s ? void 0 : s.relievingLetter) ||
              "<strong>Relieving Letter</strong>\n        <p>[Company Name]</p>\n        <p>Excellent English Medium Primary & High School Ittangihal road, Vijaypur, Karnataka 586103</p>\n        <p>Date: DD, MM, YY\t</p>\n        <p>Dear [Employee's Full Name],</p>\n        <p>We hereby acknowledge receipt of your resignation letter dated <strong>[Resignation Date]</strong>, in which you requested to be relieved from your position as <strong>[Employee's Designation]</strong> at <strong>[Company Name]</strong>. We are pleased to provide you with your relieving letter.</p>\n        <p>This is to inform you that you <strong>[Employee ID]</strong> will be relieved after careful consideration and necessary formalities.</p>\n        <p>You have successfully completed your tenure at <strong>[Company Name]</strong> as <strong>[Job Title]</strong> from <strong>[Joining Date]</strong> to <strong>[Last Working Date]</strong>. We appreciate your dedicated service and commitment during your time with us.</p>\n        <p>Sincerely,</p>\n        <p>HR, Manager</p>\n        <p>[Contact Information]</p>\n        <br/>\n        <p>&copy; [Year] [Company Name]. All rights reserved.</p>\n      ",
          },
          onSubmit: async (t, l) => {
            let { resetForm: n } = l;
            try {
              const l = { ...t, schoolId: e._id };
              if ((d(!0), s)) {
                await (0, Se.yJ)(ke.r.relievingLetter.update + "/" + s._id, l);
                h();
              } else {
                await (0, Se.bE)(ke.r.relievingLetter.create, l);
                h();
              }
              n(), a(0);
            } catch (i) {
              console.log(i);
            }
            d(!1);
          },
          enableReinitialize: !0,
        });
        (0, l.useEffect)(() => {
          1 === t && (p.resetForm(), o(null));
        }, [t]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Relieving letter" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                a(t);
              },
              value: t,
              labels:
                s && 2 === t
                  ? [
                      "Relieving letter list",
                      "Add relieving letter",
                      "Edit relieving letter",
                    ]
                  : ["Relieving letter list", "Add relieving letter"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: t,
              children: [
                (0, re.jsx)(jt.A, {
                  actions: ["view", "edit", "delete"],
                  tableKeys: Lt,
                  bodyDataModal: "relieving letter",
                  bodyData: n,
                  onEditClick: (e) => {
                    console.log(e), o(e), a(2);
                  },
                  onDeleteClick: async (e) => {
                    try {
                      await (0, Se.yH)(ke.r.relievingLetter.delete + "/" + e);
                      h();
                    } catch (t) {
                      console.error(t);
                    }
                  },
                  onViewClick: (e) => {
                    m({ ...c, open: !0, containt: e.relievingLetter });
                  },
                }),
                (0, re.jsx)(Bt, {
                  title: "Relieving  Letter",
                  open: c.open,
                  content: c.containt,
                  onClose: () => {
                    m({ ...c, open: !1 });
                  },
                  onPrintClick: x,
                }),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: t,
              children: (0, re.jsx)("form", {
                onSubmit: p.handleSubmit,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "name",
                        formik: p,
                        label: "Employee Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: p,
                        label: "Date",
                        name: "joiningDate",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(Wt(), {
                        theme: "snow",
                        required: !0,
                        value: p.values.relievingLetter,
                        onChange: (e) => p.setFieldValue("relievingLetter", e),
                        style: { height: "220px" },
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      gap: 1,
                      mt: 6,
                      display: "flex",
                      justifyContent: "flex-end",
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          onClick: () => a(0),
                          color: "error",
                          variant: "contained",
                          children: "Cancel",
                        }),
                        (0, re.jsx)(ht.A, {
                          loading: r,
                          size: "small",
                          type: "submit",
                          variant: "contained",
                          children: "Submit",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
            (0, re.jsx)(Ct.A, {
              index: 2,
              value: t,
              children: (0, re.jsx)("form", {
                onSubmit: p.handleSubmit,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "name",
                        formik: p,
                        label: "Employee Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: p,
                        label: "Date",
                        name: "joiningDate",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(Wt(), {
                        theme: "snow",
                        required: !0,
                        value: p.values.relievingLetter,
                        onChange: (e) => p.setFieldValue("relievingLetter", e),
                        style: { height: "220px" },
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      mt: 6,
                      gap: 1,
                      display: "flex",
                      justifyContent: "flex-end",
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          onClick: () => a(0),
                          color: "error",
                          variant: "contained",
                          children: "Cancel",
                        }),
                        (0, re.jsx)(ht.A, {
                          loading: r,
                          size: "small",
                          type: "submit",
                          variant: "contained",
                          children: "Submit",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const Ht = [
        { name: "Employee name", key: "name" },
        { name: "Joininng Date", key: "date" },
        { name: "Created At", key: "createdAt" },
      ];
      var Gt = a(10155);
      const Kt = [
          { label: "Male", value: "male" },
          { label: "Female", value: "female" },
        ],
        Qt = [
          { label: "A+", value: "a" },
          { label: "A-", value: "a-" },
          { label: "B+", value: "b+" },
          { label: "B-", value: "b-" },
          { label: "O+", value: "o+" },
          { label: "O-", value: "o-" },
          { label: "AB+", value: "ab+" },
          { label: "AB-", value: "ab-" },
        ];
      function Zt() {
        const [e, t] = (0, l.useState)(0),
          [a, n] = (0, l.useState)([{ name: "", file: null }]),
          [i, o] = (0, l.useState)([]),
          r = (0, et.Wx)({
            initialValues: {
              userType: "",
              user: "",
              name: "",
              bloodGroup: "",
              dob: Be()(new Date()),
              joiningDate: Be()(new Date()),
              resignDate: Be()(new Date()),
              relivingDate: Be()(new Date()),
              gender: "",
              contactNumber: "",
              status: "",
              feedback: "",
            },
            onSubmit: console.log("nnnn"),
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Employee" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, a) => t(a),
              value: e,
              labels: ["Off-Boarding letter list", "Add Off-Boarding"],
            }),
            (0, re.jsx)(Ct.A, {
              index: 0,
              value: e,
              children: (0, re.jsx)(jt.A, {
                actions: ["edit"],
                tableKeys: Ht,
                bodyDataModal: "Off-Boarding letter",
                bodyData: i,
              }),
            }),
            (0, re.jsxs)(Ct.A, {
              index: 1,
              value: e,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "userType",
                          formik: r,
                          label: "Select User Type",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "user",
                          formik: r,
                          label: "Select User",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        alignSelf: "center",
                        children: (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          children: "Find",
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)(u.A, {
                          variant: "h6",
                          fontWeight: "bold",
                          children: "Basic Information",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "name",
                          formik: r,
                          label: "Name",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "gender",
                          formik: r,
                          label: "Select Gender",
                          options: Kt,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "bloodGroup",
                          formik: r,
                          label: "Select Blood Group",
                          options: Qt,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          required: !0,
                          name: "dob",
                          formik: r,
                          label: "DOB",
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)(u.A, {
                          variant: "h6",
                          fontWeight: "bold",
                          children: "Working Information",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          required: !0,
                          name: "joiningDate",
                          formik: r,
                          label: "Joining Date",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          required: !0,
                          name: "resignDate",
                          formik: r,
                          label: "Resign Date",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          required: !0,
                          name: "relivingDate",
                          formik: r,
                          label: "RelivingD ate",
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)(u.A, {
                          variant: "h6",
                          fontWeight: "bold",
                          children: "Profile Information",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "status",
                          formik: r,
                          label: "Select Status",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 9,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "feedback",
                          formik: r,
                          label: "Feedback",
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)(u.A, {
                          variant: "h6",
                          fontWeight: "bold",
                          children: "Additional Document Information",
                        }),
                      }),
                      a.map((e, t) =>
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 4,
                              item: !0,
                              children: (0, re.jsx)(At.A, {
                                required: !0,
                                name: "name",
                                formik: r,
                                label: "Name",
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 12,
                              lg: 4,
                              item: !0,
                              children: (0, re.jsx)(At.A, {
                                required: !0,
                                name: "file",
                                formik: r,
                                label: "Select Image",
                                type: "file",
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 1,
                              md: 1,
                              lg: 3,
                              mt: 1,
                              alignSelf: "center",
                              children: (0, re.jsx)($e.A, {
                                onClick: () =>
                                  ((e) => {
                                    const t = [...a];
                                    t.splice(e, 1), n(t);
                                  })(t),
                                children: (0, re.jsx)(Gt.A, { color: "error" }),
                              }),
                            }),
                          ],
                        })
                      ),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "outlined",
                          onClick: () => {
                            n([...a, { name: "", file: "" }]);
                          },
                          startIcon: (0, re.jsx)(ot.A, {}),
                          children: "Add",
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsxs)(s.A, {
                  display: "flex",
                  justifyContent: "flex-end",
                  gap: 1,
                  children: [
                    (0, re.jsx)($e.A, {
                      size: "small",
                      color: "error",
                      variant: "contained",
                      children: "Cancel",
                    }),
                    (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      children: "Submit",
                    }),
                  ],
                }),
              ],
            }),
          ],
        });
      }
      const $t = [
        { name: "Employee Name", key: "name" },
        { name: "Joining Date", key: "joiningDate", isDate: !0 },
        { name: "Created At", key: "createdAt", isDate: !0 },
      ];
      function Xt() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          c = (0, l.useRef)(),
          [m, u] = (0, l.useState)({ open: !1, containt: "" }),
          x = (0, Jt.useReactToPrint)({ content: () => c.current }),
          h = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.experienceLetter.list, {
                params: { schoolId: e._id },
              });
              i(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          h();
        }, [e._id]);
        const p = (0, et.Wx)({
          initialValues: {
            name: (null === s || void 0 === s ? void 0 : s.name) || "",
            joiningDate:
              null !== s && void 0 !== s && s.joiningDate
                ? Be()(
                    null === s || void 0 === s ? void 0 : s.joiningDate
                  ).format("YYYY/MM/DD")
                : null,
            experienceLetter:
              (null === s || void 0 === s ? void 0 : s.experienceLetter) ||
              " <strong>Experience Letter</strong>\n          <p>Webpruce Company</p>\n          <p>Date: 12, January 2024</p>\n          <p>Place: Excellent English Medium Primary & High School Ittangihal road, Vijaypur, Karnataka 586103</p>\n          <p>To Whom It May Concern,</p>\n          <p>This is to certify that <strong>[Employee's Full Name]</strong> was employed with us as a <strong>[Job Title]</strong> in the <strong>[Department]</strong> department from <strong>[Start Date]</strong> to <strong>[End Date]</strong>.</p>\n          <p>During their tenure with us, [Employee's Full Name] was responsible for:</p>\n          <p>- Key Responsibility 1</p>\n          <p>- Key Responsibility 2</p>\n          <p>We found [Employee's Full Name] to be a dedicated and reliable employee who consistently showed a high level of professionalism. They are leaving us due to [reason for leaving, if appropriate], and we wish them all the best in their future endeavors.</p>\n          <p>We highly recommend [Employee's Full Name] for any future employment opportunities and are confident that they will be an asset to any organization they join.</p>\n          <p>If you require any further information, please do not hesitate to contact us.</p>\n          <p>Warm Regards,</p>\n          <p><strong>[Your Name]</strong></p>\n          <p><strong>[Your Job Title]</strong></p>\n          <p><strong>[Contact Information]</strong></p>\n          <br/>\n          <p>&copy; [Year] [Company Name]. All rights reserved.</p>\n        ",
          },
          onSubmit: async (t, l) => {
            let { resetForm: n } = l;
            try {
              const l = { ...t, schoolId: e._id };
              if ((d(!0), s)) {
                await (0, Se.yJ)(ke.r.experienceLetter.update + "/" + s._id, l);
                h();
              } else {
                await (0, Se.bE)(ke.r.experienceLetter.create, l);
                h();
              }
              a(0), n();
            } catch (i) {
              console.log(i);
            }
            d(!1);
          },
          enableReinitialize: !0,
        });
        (0, l.useEffect)(() => {
          1 === t && (p.resetForm(), o(null));
        }, [t]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Experience Letter" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                a(t);
              },
              value: t,
              labels:
                s && 2 === t
                  ? [
                      "Experience letter list",
                      "Add experience letter",
                      "Edit experience letter",
                    ]
                  : ["Experience letter list", "Add experience Letter"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: t,
              children: [
                (0, re.jsx)(jt.A, {
                  actions: ["view", "edit", "delete"],
                  tableKeys: $t,
                  bodyDataModal: "experience  letter",
                  bodyData: n,
                  onEditClick: (e) => {
                    console.log(e), o(e), a(2);
                  },
                  onDeleteClick: async (e) => {
                    try {
                      await (0, Se.yH)(ke.r.experienceLetter.delete + "/" + e);
                      h();
                    } catch (t) {
                      console.error(t);
                    }
                  },
                  onViewClick: (e) => {
                    u({ ...m, open: !0, containt: e.experienceLetter });
                  },
                }),
                (0, re.jsx)(Bt, {
                  title: "Experience Letter",
                  open: m.open,
                  content: m.containt,
                  onClose: () => {
                    u({ ...m, open: !1 });
                  },
                  onPrintClick: x,
                }),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: t,
              children: (0, re.jsxs)("form", {
                onSubmit: p.handleSubmit,
                children: [
                  " ",
                  (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          type: "text",
                          name: "name",
                          formik: p,
                          label: "Employee Name",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: p,
                          label: "Joining Date",
                          name: "joiningDate",
                          required: !0,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)(Wt(), {
                          theme: "snow",
                          required: !0,
                          value: p.values.experienceLetter,
                          onChange: (e) =>
                            p.setFieldValue("experienceLetter", e),
                          onBlur: p.handleBlur("experienceLetter"),
                          style: { height: "220px" },
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        mt: 6,
                        gap: 1,
                        display: "flex",
                        justifyContent: "flex-end",
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            onClick: () => a(0),
                            color: "error",
                            variant: "contained",
                            children: "Cancel",
                          }),
                          (0, re.jsx)(ht.A, {
                            size: "small",
                            loading: r,
                            variant: "contained",
                            type: "submit",
                            children: "Submit",
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            }),
            (0, re.jsx)(Ct.A, {
              index: 2,
              value: t,
              children: (0, re.jsxs)("form", {
                onSubmit: p.handleSubmit,
                children: [
                  " ",
                  (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          type: "text",
                          name: "name",
                          formik: p,
                          label: "Employee Name",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: p,
                          label: "Joining Date",
                          name: "joiningDate",
                          required: !0,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)(Wt(), {
                          theme: "snow",
                          required: !0,
                          value: p.values.experienceLetter,
                          onChange: (e) =>
                            p.setFieldValue("experienceLetter", e),
                          onBlur: p.handleBlur("experienceLetter"),
                          style: { height: "220px" },
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        gap: 1,
                        item: !0,
                        mt: 6,
                        display: "flex",
                        justifyContent: "flex-end",
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            onClick: () => a(0),
                            color: "error",
                            variant: "contained",
                            children: "Cancel",
                          }),
                          (0, re.jsx)(ht.A, {
                            size: "small",
                            loading: r,
                            variant: "contained",
                            type: "submit",
                            children: "Submit",
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const ea = [
        { name: "Date", key: "createdAt", isDate: !0 },
        { name: "Topic", key: "topic" },
      ];
      function ta() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)(null),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)([]),
          [A, y] = (0, l.useState)([]),
          [f, v] = (0, l.useState)([]);
        let b = window.localStorage.getItem(process.env.REACT_APP_CURRENT_USER),
          S = JSON.parse(b);
        const k = async (t) => {
            try {
              m(!0);
              const { data: a } = await (0, Se.Jt)(ke.r.teacherActivity.list, {
                params: {
                  schoolId: e._id,
                  search: {
                    teacher: t.teacher,
                    class: t.class,
                    section: t.section,
                    subject: t.subject,
                    fromDate: Be()(t.fromDate).format("YYYY/MM/DD"),
                    toDate: Be()(t.toDate).format("YYYY/MM/DD"),
                  },
                },
              });
              o(a.result), m(!1);
            } catch (a) {
              console.log(a), m(!1);
            }
          },
          C = () => {
            a(0), i(null), k();
          },
          D = async (t) => {
            try {
              const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                params: { schoolId: e._id, search: { class: t } },
              });
              g(a.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (a) {
              console.error(a);
            }
          },
          w = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.subject.list, {
                params: {
                  schoolId: e._id,
                  search: { class: I.values.class || N.values.class },
                },
              });
              y(t.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (t) {
              console.error(t);
            }
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var t;
              const { data: a } = await (0, Se.Jt)(ke.r.employee.list, {
                  params: { schoolId: e._id },
                }),
                l =
                  null === (t = a.result) || void 0 === t
                    ? void 0
                    : t
                        .filter((e) =>
                          e.role.name
                            .toLowerCase()
                            .match(new RegExp("Teacher", "i"))
                        )
                        .map((e) => ({
                          label: e.basicInfo.name,
                          value: e._id,
                        })),
                n = [{ label: "Me", value: S._id }, ...l];
              v(n);
            } catch (a) {
              console.log(a);
            }
          })();
        }, [e]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                x(
                  e.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                ),
                  I.setFieldValue("academicYear", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  });
                  p(t.result.map((e) => ({ label: e.name, value: e._id })));
                } catch (t) {
                  console.error(t);
                }
              })();
          }, [e]);
        const I = (0, et.Wx)({
            initialValues: {
              academicYear:
                (null === n || void 0 === n ? void 0 : n.academicYear._id) ||
                "",
              class: (null === n || void 0 === n ? void 0 : n.class._id) || "",
              section:
                (null === n || void 0 === n ? void 0 : n.section._id) || "",
              subject:
                (null === n || void 0 === n ? void 0 : n.subject._id) || "",
              topic: (null === n || void 0 === n ? void 0 : n.topic) || "",
            },
            onSubmit: async (t) => {
              try {
                const a = { ...t, schoolId: e._id };
                if ((d(!0), n)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.teacherActivity.update + "/" + n._id,
                    a
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.teacherActivity.create,
                    a
                  );
                }
                N.handleSubmit(), C(), d(!1);
              } catch (a) {
                console.error(a), d(!1);
              }
              d(!1);
            },
            enableReinitialize: !0,
          }),
          N = (0, et.Wx)({
            initialValues: {
              teacher: "",
              class: "",
              section: "",
              subject: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: k,
          });
        (0, l.useEffect)(() => {
          I.values.class && (D(I.values.class), w(), N.resetForm());
        }, [I.values.class]),
          (0, l.useEffect)(() => {
            N.values.class && (D(N.values.class), w(), I.resetForm());
          }, [N.values.class]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Teacher Activity" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                1 !== t && i(null), a(t);
              },
              value: t,
              labels: ["All Activity", n ? "Edit Activity" : "Add Activity"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: t,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsx)("form", {
                    onSubmit: N.handleSubmit,
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "teacher",
                            formik: N,
                            label: "Select Teacher",
                            options: f,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "class",
                            formik: N,
                            label: "Class",
                            options: h,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "section",
                            formik: N,
                            label: "Section",
                            options: j,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "subject",
                            formik: N,
                            label: "Subject",
                            options: A,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            formik: N,
                            label: "From Date",
                            name: "fromDate",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            formik: N,
                            label: "To Date",
                            name: "toDate",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 12,
                          lg: 12,
                          item: !0,
                          display: "flex",
                          justifyContent: "flex-end",
                          children: (0, re.jsx)(ht.A, {
                            loading: c,
                            size: "small",
                            type: "submit",
                            variant: "contained",
                            children: "Find",
                          }),
                        }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["edit", "delete"],
                  tableKeys: ea,
                  bodyDataModal: "teacher activity",
                  bodyData: s,
                  onDeleteClick: async (e) => {
                    try {
                      await (0, Se.yH)(ke.r.teacherActivity.delete + "/" + e);
                      k(), N.handleSubmit();
                    } catch (t) {
                      console.error(t);
                    }
                  },
                  onEditClick: (e) => {
                    i(e), a(1);
                  },
                }),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: t,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsx)("form", {
                  onSubmit: I.handleSubmit,
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "academicYear",
                          formik: I,
                          label: "Select Academic Year",
                          options: u,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "class",
                          formik: I,
                          label: "Select Class",
                          options: h,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "section",
                          formik: I,
                          label: "Select Section",
                          options: j,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "subject",
                          formik: I,
                          label: "Select subject",
                          options: A,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "topic",
                          formik: I,
                          label: "Topic covered",
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        mt: 1,
                        display: "flex",
                        justifyContent: "flex-end",
                        gap: 1,
                        item: !0,
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            color: "error",
                            variant: "contained",
                            onClick: C,
                            children: "Cancel",
                          }),
                          (0, re.jsx)(ht.A, {
                            loading: r,
                            size: "small",
                            type: "submit",
                            variant: "contained",
                            children: n ? "Update" : "Submit",
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
            }),
          ],
        });
      }
      const aa = [{ name: "Role Name", key: "name" }],
        la = [
          {
            module: "Institute Selector",
            subModule: [{ module: "Institute Selector", permissions: [] }],
          },
          {
            module: "Dashboard",
            subModule: [{ module: "Dashboard", permissions: [] }],
          },
          {
            module: "Institute",
            subModule: [{ module: "Institute", permissions: [] }],
          },
          {
            module: "Administrator",
            subModule: [
              { module: "Academic Year", permissions: [] },
              { module: "Roles and Permissions", permissions: [] },
            ],
          },
          {
            module: "Human Resources",
            subModule: [
              { module: "Designation", permissions: [] },
              { module: "Department", permissions: [] },
              { module: "Employee", permissions: [] },
              { module: "Offer Letter", permissions: [] },
              { module: "Relieving Letter", permissions: [] },
              { module: "Off Boarding", permissions: [] },
              { module: "Experience Letter", permissions: [] },
              { module: "Teacher Activity", permissions: [] },
            ],
          },
          {
            module: "Pre-Admission",
            subModule: [
              { module: "Enquiries", permissions: [] },
              { module: "Exams", permissions: [] },
              { module: "Exam Schedules", permissions: [] },
              { module: "Result", permissions: [] },
            ],
          },
          {
            module: "Academic",
            subModule: [
              { module: "Class", permissions: [] },
              { module: "Section", permissions: [] },
              { module: "Subject", permissions: [] },
            ],
          },
          {
            module: "Attendance",
            subModule: [
              { module: "Student Attendance", permissions: [] },
              { module: "Employee Attendance", permissions: [] },
            ],
          },
          {
            module: "Class Routine",
            subModule: [{ module: "Class Routine", permissions: [] }],
          },
          {
            module: "Student",
            subModule: [
              { module: "Overview", permissions: [] },
              { module: "Admit Student", permissions: [] },
              { module: "Reshuffle", permissions: [] },
              { module: "Promotion", permissions: [] },
              { module: "Bulk Admission", permissions: [] },
              { module: "Credential", permissions: [] },
              { module: "Quick Admit", permissions: [] },
              { module: "Student Activity", permissions: [] },
            ],
          },
          {
            module: "Assignment",
            subModule: [{ module: "Assignment", permissions: [] }],
          },
          {
            module: "Communication",
            subModule: [
              { module: "Compose", permissions: [] },
              { module: "Report", permissions: [] },
              { module: "Credential", permissions: [] },
            ],
          },
          {
            module: "Announcement",
            subModule: [
              { module: "Notice", permissions: [] },
              { module: "News", permissions: [] },
              { module: "Holiday", permissions: [] },
              { module: "Awards And Achievement", permissions: [] },
              { module: "Splash News", permissions: [] },
            ],
          },
          {
            module: "Gallery",
            subModule: [{ module: "Gallery", permissions: [] }],
          },
          {
            module: "Notification",
            subModule: [{ module: "Notification", permissions: [] }],
          },
          {
            module: "Event",
            subModule: [{ module: "Event", permissions: [] }],
          },
          {
            module: "Exam",
            subModule: [
              { module: "Exam Grade", permissions: [] },
              { module: "Exam Term", permissions: [] },
              { module: "Exam Schedule", permissions: [] },
              { module: "Exam Hall Ticket", permissions: [] },
            ],
          },
          {
            module: "Exam Mark",
            subModule: [
              { module: "Exam Attendance", permissions: [] },
              { module: "Manage Mark", permissions: [] },
              { module: "Exam Result", permissions: [] },
              { module: "Marks Card", permissions: [] },
              { module: "Consolidated Marks Sheet", permissions: [] },
              { module: "Subject Wise Report", permissions: [] },
              { module: "Division Wise Report", permissions: [] },
            ],
          },
          {
            module: "LMS",
            subModule: [
              { module: "Storage", permissions: [] },
              { module: "Courses", permissions: [] },
              { module: "Course Content", permissions: [] },
              { module: "Live", permissions: [] },
            ],
          },
          {
            module: "Library",
            subModule: [
              { module: "Books", permissions: [] },
              { module: "Periodical", permissions: [] },
              { module: "Student Library Member", permissions: [] },
              { module: "Employee Library Member", permissions: [] },
              { module: "Issue and Returns", permissions: [] },
            ],
          },
          {
            module: "Leave Management",
            subModule: [
              { module: "Leave Type", permissions: [] },
              { module: "Employee Leave", permissions: [] },
              { module: "Student Leave", permissions: [] },
              { module: "Leave Report", permissions: [] },
            ],
          },
          {
            module: "Inventory",
            subModule: [
              { module: "Item", permissions: [] },
              { module: "Vendor", permissions: [] },
              { module: "In/Out Transaction", permissions: [] },
              { module: "Stock ist", permissions: [] },
              { module: "Issue", permissions: [] },
              { module: "Sell", permissions: [] },
            ],
          },
          {
            module: "Certificate",
            subModule: [
              { module: "Study Certificate", permissions: [] },
              { module: "Transfer Certificate", permissions: [] },
            ],
          },
          {
            module: "Fees",
            subModule: [
              { module: "Receipt Book", permissions: [] },
              { module: "Fee Map Category", permissions: [] },
              { module: "Collect Fees", permissions: [] },
              { module: "Balance Fee", permissions: [] },
              { module: "Fee Overview", permissions: [] },
              { module: "Reconciliation", permissions: [] },
            ],
          },
          {
            module: "Hostel",
            subModule: [
              { module: "Manage Hostel", permissions: [] },
              { module: "Manage Room Type", permissions: [] },
              { module: "Manage Room Bed", permissions: [] },
              { module: "Hostel Member", permissions: [] },
            ],
          },
          {
            module: "Transport",
            subModule: [
              { module: "Vehicle", permissions: [] },
              { module: "Manage Route And Trips", permissions: [] },
              { module: "Routes", permissions: [] },
              { module: "Transport Member", permissions: [] },
              { module: "Vehicle Log", permissions: [] },
              { module: "Vehicle Maintenance", permissions: [] },
            ],
          },
          {
            module: "Payroll",
            subModule: [
              { module: "Salary Grade", permissions: [] },
              { module: "Make Payment", permissions: [] },
            ],
          },
          {
            module: "Report",
            subModule: [
              { module: "Library Report", permissions: [] },
              { module: "Student Attendance", permissions: [] },
              { module: "Studnet Yearly Attendance", permissions: [] },
              { module: "Emplyee Attendance", permissions: [] },
              { module: "Employee Yearly Attendance", permissions: [] },
              { module: "Student Report", permissions: [] },
              { module: "Student Activity Report", permissions: [] },
            ],
          },
          {
            module: "Visitor Info",
            subModule: [
              { module: "Visitor Info", permissions: [] },
              { module: "Student Checkout", permissions: [] },
            ],
          },
          {
            module: "Help Desk",
            subModule: [{ module: "Help Desk", permissions: [] }],
          },
          {
            module: "Guardian Feedback",
            subModule: [{ module: "Guardian Feedback", permissions: [] }],
          },
        ];
      var na = a(79650),
        ia = a(71806),
        sa = a(84882),
        oa = a(28076),
        ra = a(39652),
        da = a(51962),
        ca = a(73460);
      function ma(e, t) {
        const a = e.indexOf(t);
        return -1 === a ? e.push(t) : e.splice(a, 1), e;
      }
      function ua(e, t) {
        const a = e.indexOf(t);
        return -1 !== a && e.splice(a, 1), e;
      }
      const xa = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "flex-end",
            gap: t.spacing(2),
            position: "fixed",
            bottom: 0,
            right: 0,
            left: 0,
            background: "whitesmoke",
            padding: t.spacing(2),
            zIndex: 1e3,
          };
        }),
        ha = ["view", "add", "update", "delete"];
      function pa() {
        const [e, t] = l.useState(0),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)(null),
          [o, r] = (0, l.useState)(!1),
          [d, c] = (0, l.useState)([]),
          [m, x] = (0, l.useState)(["view", "add", "update", "delete"]);
        (0, l.useEffect)(() => {
          h(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.role.getRoleKeys);
                if (i) {
                  let t = [...i.permissions];
                  for (let a of e.result)
                    t.find((e) => e.module == a.module) || t.push(a);
                  c(t);
                } else c(e.result);
              } catch (e) {
                console.log(e);
              }
            })(),
            0 == e && s(null);
        }, [e]);
        const h = async () => {
          try {
            const { data: e } = await (0, Se.Jt)(ke.r.role.list);
            n(e.result);
          } catch (e) {
            console.log(e);
          }
        };
        (0, l.useEffect)(() => {
          h();
        }, []);
        const p = async (e) => {
            let a = { ...e, permissions: d };
            i || (a.permissions = d.map((e) => ({ ...e, permissions: [] })));
            try {
              if (i) {
                const { data: e } = await (0, Se.yJ)(
                  ke.r.role.update + "/" + i._id,
                  a
                );
                t(0), h();
              } else {
                const { data: e } = await (0, Se.bE)(ke.r.role.create, a);
                t(0), h();
              }
              j.resetForm(), r(!1);
            } catch (l) {
              console.log(l);
            }
          },
          j = (0, et.Wx)({
            initialValues: { name: "" },
            onSubmit: p,
            enableReinitialize: !0,
          }),
          g = (0, et.Wx)({
            initialValues: {
              name: (null === i || void 0 === i ? void 0 : i.name) || "",
            },
            onSubmit: p,
            enableReinitialize: !0,
          }),
          A = (e) => {
            c(
              d.map((t) => {
                return {
                  ...t,
                  permissions: m.includes(e)
                    ? ua(t.permissions, e)
                    : ((a = t.permissions),
                      (l = e),
                      a.includes(l) || a.push(l),
                      a),
                };
                var a, l;
              })
            );
          };
        (0, l.useEffect)(() => {
          let e = [];
          for (let t of ha)
            d.every((e) => e.permissions.includes(t.toLowerCase()))
              ? e.push(t.toLowerCase())
              : e.filter((e) => e !== t);
          x(e);
        }, [d]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Role Permission" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, a) => {
                t(a);
              },
              value: e,
              labels: i && 1 === e ? ["List", "Edit"] : ["List"],
            }),
            (0, re.jsxs)(Ct.A, {
              value: e,
              index: 0,
              children: [
                (0, re.jsx)(jt.A, {
                  actions: ["edit", "delete"],
                  bodyDataModal: "role permission",
                  bodyData: a,
                  onEditClick: (e) => {
                    s(e), t(1);
                  },
                  tableKeys: aa,
                  onDeleteClick: async (e) => {
                    try {
                      const { data: t } = await (0, Se.yH)(
                        ke.r.role.delete + "/" + e
                      );
                      n(a.filter((t) => t._id !== e));
                    } catch (t) {
                      console.log(t);
                    }
                  },
                }),
                (0, re.jsx)(rt, {
                  title: "Add Role",
                  onAddClick: () => {
                    t(0), r(!0);
                  },
                }),
              ],
            }),
            (0, re.jsx)(pt, {
              open: o,
              formik: j,
              formTitle: "Create Role",
              onClose: () => r(!1),
              submitButtonTitle: "Create",
              children: (0, re.jsx)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 12,
                  md: 12,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    type: "text",
                    formik: j,
                    name: "name",
                    label: "Role Name",
                    required: !0,
                  }),
                }),
              }),
            }),
            i &&
              1 == e &&
              (0, re.jsxs)(Ct.A, {
                value: e,
                index: 1,
                children: [
                  (0, re.jsxs)(xe.Ay, {
                    container: !0,
                    rowSpacing: 1,
                    columnSpacing: 2,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "name",
                          type: "text",
                          formik: g,
                          label: "Role Name",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        children: (0, re.jsxs)(u.A, {
                          sx: {
                            margin: "10px 0px",
                            fontWeight: "500",
                            fontSize: "16px",
                            fontWeight: 700,
                          },
                          children: [" ", "Set permission for this role"],
                        }),
                      }),
                    ],
                  }),
                  (0, re.jsx)(na.A, {
                    component: ue.A,
                    sx: { marginBottom: "60px", maxHeight: 650 },
                    children: (0, re.jsxs)(ia.A, {
                      stickyHeader: !0,
                      "aria-label": "sticky table",
                      children: [
                        (0, re.jsx)(sa.A, {
                          children: (0, re.jsxs)(oa.A, {
                            children: [
                              (0, re.jsx)(ra.A, {
                                sx: {
                                  color: (e) =>
                                    "dark" === e.palette.mode
                                      ? "white"
                                      : "black",
                                  fontWeight: 700,
                                  paddingLeft: "15px",
                                },
                                children: "Module Name",
                              }),
                              (0, re.jsxs)(ra.A, {
                                sx: {
                                  color: (e) =>
                                    "dark" === e.palette.mode
                                      ? "white"
                                      : "black",
                                  fontWeight: 700,
                                },
                                align: "center",
                                children: [
                                  "View",
                                  (0, re.jsx)(da.A, {
                                    onChange: () => A("view"),
                                    name: "view",
                                    checked: m.includes("view"),
                                  }),
                                ],
                              }),
                              (0, re.jsxs)(ra.A, {
                                sx: {
                                  color: (e) =>
                                    "dark" === e.palette.mode
                                      ? "white"
                                      : "black",
                                  fontWeight: 700,
                                },
                                align: "center",
                                children: [
                                  "Add",
                                  " ",
                                  (0, re.jsx)(da.A, {
                                    checked: m.includes("add"),
                                    onChange: () => A("add"),
                                    name: "add",
                                  }),
                                  " ",
                                ],
                              }),
                              (0, re.jsxs)(ra.A, {
                                sx: {
                                  color: (e) =>
                                    "dark" === e.palette.mode
                                      ? "white"
                                      : "black",
                                  fontWeight: 700,
                                },
                                align: "center",
                                children: [
                                  "Update",
                                  " ",
                                  (0, re.jsx)(da.A, {
                                    checked: m.includes("update"),
                                    onChange: () => A("update"),
                                    name: "update",
                                  }),
                                ],
                              }),
                              (0, re.jsxs)(ra.A, {
                                sx: {
                                  color: (e) =>
                                    "dark" === e.palette.mode
                                      ? "white"
                                      : "black",
                                  fontWeight: 700,
                                },
                                align: "center",
                                children: [
                                  "Delete",
                                  " ",
                                  (0, re.jsx)(da.A, {
                                    checked: m.includes("delete"),
                                    onChange: () => A("delete"),
                                    name: "delete",
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                        (0, re.jsx)(ca.A, {
                          children: la.map((e, t) => {
                            const { module: a, subModule: l } = e;
                            return (0, re.jsxs)(re.Fragment, {
                              children: [
                                (0, re.jsx)(
                                  oa.A,
                                  {
                                    children: (0, re.jsx)(ra.A, {
                                      colSpan: 5,
                                      sx: {
                                        backgroundColor: (e) =>
                                          "dark" === e.palette.mode
                                            ? "rgba(32,33,32,1)"
                                            : e.palette.grey[100],
                                      },
                                      children: (0, re.jsx)(u.A, {
                                        fontWeight: "bold",
                                        paddingLeft: "10px",
                                        children: a,
                                      }),
                                    }),
                                  },
                                  t
                                ),
                                l.map((e, t) =>
                                  (0, re.jsxs)(oa.A, {
                                    k: e.module + t.toString(),
                                    children: [
                                      (0, re.jsx)(ra.A, {
                                        align: "center",
                                        children: e.module,
                                      }),
                                      ha.map((t) => {
                                        var a, l;
                                        return (0, re.jsx)(
                                          ra.A,
                                          {
                                            align: "center",
                                            children: (0, re.jsx)(da.A, {
                                              onChange: () =>
                                                ((e, t) => {
                                                  c(
                                                    d.map((a) =>
                                                      a.module === e
                                                        ? {
                                                            ...a,
                                                            permissions: ma(
                                                              a.permissions,
                                                              t.toLowerCase()
                                                            ),
                                                          }
                                                        : a
                                                    )
                                                  );
                                                })(e.module, t),
                                              checked:
                                                (null ===
                                                  (a = d.find(
                                                    (t) => t.module === e.module
                                                  )) ||
                                                void 0 === a ||
                                                null === (l = a.permissions) ||
                                                void 0 === l
                                                  ? void 0
                                                  : l.includes(t)) || !1,
                                            }),
                                          },
                                          t
                                        );
                                      }),
                                    ],
                                  })
                                ),
                              ],
                            });
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    container: !0,
                    children: (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      md: 12,
                      children: (0, re.jsx)(xa, {
                        sx: {
                          backgroundColor: (e) =>
                            "dark" === e.palette.mode
                              ? "rgba(32,33,32,1)"
                              : e.palette.grey[100],
                        },
                        children: (0, re.jsxs)(b.A, {
                          spacing: 2,
                          direction: "row",
                          children: [
                            (0, re.jsx)($e.A, {
                              onClick: () => {
                                t(0);
                              },
                              variant: "contained",
                              color: "error",
                              size: "small",
                              children: "Cancel",
                            }),
                            (0, re.jsx)($e.A, {
                              onClick: g.handleSubmit,
                              variant: "contained",
                              size: "small",
                              children: "Update",
                            }),
                          ],
                        }),
                      }),
                    }),
                  }),
                ],
              }),
          ],
        });
      }
      const ja = [{ name: "Role Name", key: "role" }];
      function ga() {
        const [e, t] = (0, l.useState)([]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "User Role" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit"],
              bodyDataModal: "user role",
              bodyData: e,
              tableKeys: ja,
            }),
          ],
        });
      }
      const Aa = [
        { label: "Student", value: "student" },
        { label: "Employee", value: "employee" },
      ];
      function ya() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)(!1),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          h = (0, et.Wx)({
            initialValues: {
              userType: "",
              employeeId: "",
              password: "",
              class: "",
              section: "",
              student: "",
              role: "",
            },
            onSubmit: async (t, a) => {
              let { resetForm: l } = a;
              console.log(t.userType, "kkkkk");
              try {
                const a = {
                  ...t,
                  schoolId: e._id,
                  userType: t.userType,
                  employeeId: t.employeeId,
                  studentId: t.student,
                  password: t.password,
                };
                o(!0);
                const { data: n } = await (0, Se.bE)(
                  ke.r.account.changePasswordForUser,
                  a
                );
                l(), o(!1);
              } catch (n) {
                console.log(n), o(!1);
              }
            },
            enableReinitialize: !0,
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.role.list),
                  t = e.result
                    .filter((e) => {
                      var t;
                      return (
                        "student" !==
                        (null === (t = e.name) || void 0 === t
                          ? void 0
                          : t.toLowerCase())
                      );
                    })
                    .map((e) => ({ label: e.name, value: e._id }));
                a(t);
              } catch (e) {
                console.error(e);
              }
            })();
          }, [e]),
          (0, l.useEffect)(() => {
            h.values.role &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.employee.list, {
                    params: {
                      schoolId: e._id,
                      search: { role: h.values.role },
                    },
                  });
                  i(
                    t.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [h.values.role, e._id]),
          (0, l.useEffect)(() => {
            h.values.class &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: h.values.class },
                    },
                  });
                  h.setFieldValue(
                    "section",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  ),
                    x(
                      a.result.map((e) => ({
                        ...e,
                        label: e.name,
                        value: e._id,
                      }))
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [h.values.class]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                m(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  h.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
          }, [e._id]),
          (0, l.useEffect)(() => {
            h.values.class &&
              h.values.section &&
              e &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        "academicInfo.class": h.values.class,
                        "academicInfo.section": h.values.section,
                      },
                    },
                  });
                  d(
                    a.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    h.setFieldValue(
                      "student",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [h.values.class, h.values.section, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "User Password Reset" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2 },
                children: (0, re.jsx)("form", {
                  onSubmit: h.handleSubmit,
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "userType",
                          formik: h,
                          label: "User Type",
                          options: Aa,
                        }),
                      }),
                      "student" === h.values.userType &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "class",
                                formik: h,
                                label: "Select Class",
                                options: c,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "section",
                                formik: h,
                                label: "Select Section",
                                options: u,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "student",
                                formik: h,
                                label: "Select Student",
                                options: r,
                              }),
                            }),
                          ],
                        }),
                      "employee" === h.values.userType &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "role",
                                formik: h,
                                label: "Role",
                                options: t,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "employeeId",
                                formik: h,
                                label: "Employees",
                                options: n,
                              }),
                            }),
                          ],
                        }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          formik: h,
                          label: "Password",
                          name: "password",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        style: { alignSelf: "center" },
                        item: !0,
                        children: (0, re.jsx)(ht.A, {
                          loading: s,
                          size: "small",
                          type: "submit",
                          variant: "contained",
                          children: "Change Password",
                        }),
                      }),
                    ],
                  }),
                }),
              }),
            ],
          })
        );
      }
      const fa = [
        { name: "Student Name", key: "studentName" },
        { name: "Class", key: "class" },
        { name: "Submitted On", key: "submittedOn", isDate: !0 },
      ];
      var va = a(77502),
        ba = a(25434),
        Sa = a(33438);
      function ka(e) {
        let { open: t, onClose: a, title: l, children: n } = e;
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(ct.A, {
            onClose: a,
            "aria-labelledby": "customized-dialog-title",
            open: t,
            children: [
              (0, re.jsx)(mt.A, {
                sx: { m: 0, p: 2, fontWeight: 600 },
                id: "customized-dialog-title",
                children: l,
              }),
              (0, re.jsx)(h.A, {
                "aria-label": "close",
                onClick: a,
                sx: { position: "absolute", right: 8, top: 8 },
                children: (0, re.jsx)(Sa.A, {}),
              }),
              (0, re.jsx)(ut.A, { sx: { padding: "10px" }, children: n }),
            ],
          }),
        });
      }
      const Ca = (0, n.Ay)(s.A)({
          display: "flex",
          justifyContent: "flex-start",
          alignItems: "center",
          marginBottom: "20px",
        }),
        Da = (0, n.Ay)(oa.A)((e) => {
          let { theme: t } = e;
          return {
            width: "200px",
            "&:nth-of-type(odd)": {
              backgroundColor:
                "dark" === t.palette.mode ? "rgb(81 81 81)" : "#F0F8FF",
            },
          };
        }),
        wa = (0, n.Ay)(ra.A)((e) => {
          let { theme: t } = e;
          return {
            width: "200px",
            border: "1px solid gray",
            ["&.".concat(va.A.head)]: {
              backgroundColor: "blue",
              color: "#000",
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        }),
        Ia = (e) => {
          let { onUpdate: t = () => {}, data: a = {} } = e;
          const [n, i] = (0, l.useState)(!1),
            s = async (e) => {
              try {
                i(!0),
                  await (0, Se.yJ)(
                    ke.r.preadmissionEnqiry.update + "/" + a._id,
                    { status: e }
                  ),
                  i(!1),
                  t();
              } catch (l) {
                console.log(l), i(!1);
              }
            };
          return (0, re.jsx)(re.Fragment, {
            children: (0, re.jsxs)(b.A, {
              spacing: 2,
              direction: "row",
              justifyContent: "center",
              children: [
                ["Approved", "Pending"].includes(a.status)
                  ? (0, re.jsx)(ht.A, {
                      variant: "contained",
                      size: "small",
                      loading: "Rejected" == n,
                      onClick: () => s("Rejected"),
                      color: "error",
                      children: "Reject",
                    })
                  : null,
                ["Rejected", "Pending"].includes(a.status)
                  ? (0, re.jsx)(ht.A, {
                      size: "small",
                      variant: "contained",
                      loading: "Approved" == n,
                      onClick: () => s("Approved"),
                      color: "success",
                      children: "Approve",
                    })
                  : null,
              ],
            }),
          });
        };
      function Na() {
        var e,
          t,
          a,
          n,
          i,
          s,
          o,
          r,
          d,
          c,
          m,
          x,
          h,
          p,
          j,
          g,
          A,
          y,
          f,
          v,
          b,
          S,
          k,
          C,
          D,
          w,
          I,
          N,
          _,
          T,
          M,
          F,
          z,
          E,
          q,
          Y,
          W,
          R,
          P,
          J,
          V,
          B,
          O,
          L,
          U,
          H,
          G,
          K,
          Q,
          Z,
          $,
          X,
          ee,
          te,
          ae,
          le,
          ne,
          ie,
          se,
          oe,
          de,
          me,
          he,
          pe,
          je,
          ge,
          Ae,
          ye,
          fe,
          ve,
          be,
          De,
          we,
          Ie,
          Ne,
          _e,
          Te,
          Me,
          Fe,
          ze,
          Ee,
          qe,
          Ye,
          We,
          Re,
          Pe,
          Je,
          Ve,
          Oe,
          Le,
          Ue,
          He,
          Ge,
          Ke,
          Qe,
          Ze,
          tt,
          at,
          lt,
          nt,
          it,
          st,
          ot,
          rt,
          dt,
          ct,
          mt,
          xt,
          pt,
          gt,
          At,
          yt,
          ft,
          vt,
          bt,
          St,
          kt,
          Ct,
          Dt,
          wt,
          It,
          Nt,
          _t,
          Tt,
          Mt,
          Ft,
          zt,
          Et,
          Yt,
          Wt,
          Rt,
          Pt,
          Jt,
          Vt,
          Bt,
          Ot,
          Lt,
          Ut,
          Ht,
          Gt,
          Kt,
          Qt,
          Zt,
          $t,
          Xt,
          ea,
          ta,
          aa,
          la,
          na,
          sa,
          oa,
          ra,
          da,
          ma,
          ua,
          xa,
          ha,
          pa,
          ja,
          ga,
          Aa,
          ya,
          va,
          Sa,
          Na,
          _a,
          Ta,
          Ma,
          Fa,
          za,
          Ea,
          qa,
          Ya,
          Wa,
          Ra,
          Pa,
          Ja,
          Va,
          Ba,
          Oa,
          La,
          Ua,
          Ha,
          Ga,
          Ka,
          Qa,
          Za,
          $a,
          Xa,
          el,
          tl,
          al,
          ll,
          nl,
          il,
          sl,
          ol,
          rl,
          dl,
          cl,
          ml,
          ul,
          xl,
          hl,
          pl,
          jl,
          gl,
          Al,
          yl,
          fl,
          vl,
          bl,
          Sl,
          kl,
          Cl,
          Dl,
          wl;
        const { selectedSetting: Il } = (0, l.useContext)(Ce.A),
          [Nl, _l] = (0, l.useState)("Pending"),
          [Tl, Ml] = (0, l.useState)([]),
          [Fl, zl] = (0, l.useState)([]),
          [El, ql] = (0, l.useState)([]),
          [Yl, Wl] = (0, l.useState)([]),
          [Rl, Pl] = (0, l.useState)(!1),
          [Jl, Vl] = (0, l.useState)({
            open: !1,
            contents: "",
            action: () => {},
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list, {
                params: { schoolId: Il._id },
              });
              ql(
                e.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                Ol.setFieldValue("academicYear", e.result[0]._id);
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: Il._id },
                });
                Wl(
                  e.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                ),
                  Ol.setFieldValue("class", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })();
        }, [Il._id]);
        const Bl = async (e) => {
            try {
              Pl(!0);
              const { data: t } = await (0, Se.Jt)(
                ke.r.preadmissionEnqiry.list,
                {
                  params: {
                    schoolId: Il._id,
                    search: {
                      "studentDetails.academicDetails.academicYear":
                        e.academicYear,
                      "studentDetails.academicDetails.class": e.class,
                      fromDate: e.fromDate,
                      toDate: e.toDate,
                    },
                  },
                }
              );
              let a = t.result.map((e) => {
                var t, a, l, n, i;
                return {
                  ...e,
                  studentName:
                    null === (t = e.studentDetails) ||
                    void 0 === t ||
                    null === (a = t.basicDetails) ||
                    void 0 === a
                      ? void 0
                      : a.name,
                  submittedOn: e.createdAt,
                  class:
                    null === (l = e.studentDetails) ||
                    void 0 === l ||
                    null === (n = l.academicDetails) ||
                    void 0 === n ||
                    null === (i = n.class) ||
                    void 0 === i
                      ? void 0
                      : i.name,
                };
              });
              Ml(a), zl(a.filter((e) => e.status === Nl));
            } catch (t) {
              console.log(t);
            }
            Pl(!1);
          },
          Ol = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              class: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: Bl,
          });
        (0, l.useEffect)(() => {
          if (!Nl) return zl(Tl);
          zl(Tl.filter((e) => e.status === Nl));
        }, [Nl]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Enquiries" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                component: "form",
                onSubmit: Ol.handleSubmit,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: Ol,
                      label: "Select Academic Year",
                      options: El,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: Ol,
                      label: "Select Class",
                      options: Yl,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: Ol,
                      label: "From Date",
                      name: "fromDate",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: Ol,
                      label: "To Date",
                      name: "toDate",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center" },
                    item: !0,
                    children: (0, re.jsx)(ht.A, {
                      loading: Rl,
                      size: "small",
                      variant: "contained",
                      type: "submit",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(Ca, {
              children: (0, re.jsx)(ba.A, {
                variant: "outlined",
                "aria-label": "outlined button group",
                children: ["Pending", "Approved", "Rejected"].map((e, t) =>
                  (0, re.jsxs)(
                    $e.A,
                    {
                      variant: "outlined",
                      onClick: () => {
                        _l(e);
                      },
                      style: {
                        backgroundColor: Nl === e ? "#1b3779" : "",
                        color: Nl === e ? "white" : "black",
                        textTransform: "capitalize",
                      },
                      children: [
                        e,
                        ":",
                        Tl.filter((t) => t.status === e).length,
                      ],
                    },
                    t
                  )
                ),
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["custom", "delete", "view"],
              tableKeys: fa,
              bodyDataModal: "enquiries",
              bodyData: Fl,
              onUpdate: Ol.handleSubmit,
              CustomAction: Ia,
              onViewClick: (e) => {
                Vl({ ...Jl, open: !0, contents: e });
              },
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.Jt)(
                    ke.r.preadmissionEnqiry.delete + "/" + e
                  );
                  Bl(), Ol.handleSubmit();
                } catch (t) {
                  console.log(t);
                }
              },
            }),
            (0, re.jsxs)(ka, {
              title: "Enquiry Details",
              open: null === Jl || void 0 === Jl ? void 0 : Jl.open,
              tableData: null === Jl || void 0 === Jl ? void 0 : Jl.contents,
              onClose: (e) => {
                Vl({ ...Jl, open: !1 });
              },
              children: [
                (0, re.jsxs)(ut.A, {
                  dividers: !0,
                  sx: {
                    display: {
                      xs: "none",
                      sm: "block",
                      md: "block",
                      lg: "block",
                    },
                  },
                  children: [
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Academic Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsx)(ca.A, {
                        children: (0, re.jsxs)(Da, {
                          children: [
                            (0, re.jsx)(wa, {
                              align: "left",
                              sx: { fontWeight: "bold" },
                              children: "Class",
                            }),
                            (0, re.jsx)(wa, {
                              align: "left",
                              children:
                                (null === Jl || void 0 === Jl
                                  ? void 0
                                  : Jl.contents.class) || "NA",
                            }),
                            (0, re.jsx)(wa, {
                              align: "left",
                              sx: { fontWeight: "bold" },
                              children: "Academic Year",
                            }),
                            (0, re.jsx)(wa, {
                              align: "left",
                              children:
                                ""
                                  .concat(
                                    null === Jl ||
                                      void 0 === Jl ||
                                      null === (e = Jl.contents) ||
                                      void 0 === e ||
                                      null === (t = e.studentDetails) ||
                                      void 0 === t ||
                                      null === (a = t.academicDetails) ||
                                      void 0 === a ||
                                      null === (n = a.academicYear) ||
                                      void 0 === n
                                      ? void 0
                                      : n.from,
                                    " - "
                                  )
                                  .concat(
                                    null === Jl ||
                                      void 0 === Jl ||
                                      null === (i = Jl.contents) ||
                                      void 0 === i ||
                                      null === (s = i.studentDetails) ||
                                      void 0 === s ||
                                      null === (o = s.academicDetails) ||
                                      void 0 === o ||
                                      null === (r = o.academicYear) ||
                                      void 0 === r
                                      ? void 0
                                      : r.to
                                  ) || "NA",
                            }),
                          ],
                        }),
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Basic Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Student Name",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (d = Jl.contents) ||
                                  void 0 === d
                                    ? void 0
                                    : d.studentName) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Date Of Birth",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children: Be()(
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (c = Jl.contents) ||
                                  void 0 === c ||
                                  null === (m = c.studentDetails) ||
                                  void 0 === m ||
                                  null === (x = m.basicDetails) ||
                                  void 0 === x
                                    ? void 0
                                    : x.dob) || "NA"
                                ).format("DD-MM-YYYY"),
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Gender",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (h = Jl.contents) ||
                                  void 0 === h ||
                                  null === (p = h.studentDetails) ||
                                  void 0 === p ||
                                  null === (j = p.basicDetails) ||
                                  void 0 === j
                                    ? void 0
                                    : j.gender) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Blood Group",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (g = Jl.contents) ||
                                  void 0 === g ||
                                  null === (A = g.studentDetails) ||
                                  void 0 === A ||
                                  null === (y = A.basicDetails) ||
                                  void 0 === y ||
                                  null === (f = y.bloodGroup) ||
                                  void 0 === f
                                    ? void 0
                                    : f.toUpperCase()) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Religion",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (v = Jl.contents) ||
                                  void 0 === v ||
                                  null === (b = v.studentDetails) ||
                                  void 0 === b ||
                                  null === (S = b.basicDetails) ||
                                  void 0 === S
                                    ? void 0
                                    : S.caste) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Caste Income Certificate Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (k = Jl.contents) ||
                                  void 0 === k ||
                                  null === (C = k.studentDetails) ||
                                  void 0 === C ||
                                  null === (D = C.basicDetails) ||
                                  void 0 === D
                                    ? void 0
                                    : D.casteIncomeCertificateNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Mother Tongue",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (w = Jl.contents) ||
                                  void 0 === w ||
                                  null === (I = w.studentDetails) ||
                                  void 0 === I ||
                                  null === (N = I.basicDetails) ||
                                  void 0 === N
                                    ? void 0
                                    : N.motherTongue) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Birth Place",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (_ = Jl.contents) ||
                                  void 0 === _ ||
                                  null === (T = _.studentDetails) ||
                                  void 0 === T ||
                                  null === (M = T.basicDetails) ||
                                  void 0 === M
                                    ? void 0
                                    : M.birthPlace) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Aadhar Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (F = Jl.contents) ||
                                  void 0 === F ||
                                  null === (z = F.studentDetails) ||
                                  void 0 === z ||
                                  null === (E = z.basicDetails) ||
                                  void 0 === E
                                    ? void 0
                                    : E.aadharNumber) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Contact Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Contact Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (q = Jl.contents) ||
                                  void 0 === q ||
                                  null === (Y = q.studentDetails) ||
                                  void 0 === Y ||
                                  null === (W = Y.contactDetails) ||
                                  void 0 === W
                                    ? void 0
                                    : W.contactNumber) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Guardian Name",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (R = Jl.contents) ||
                                  void 0 === R ||
                                  null === (P = R.studentDetails) ||
                                  void 0 === P ||
                                  null === (J = P.contactDetails) ||
                                  void 0 === J
                                    ? void 0
                                    : J.guardianName) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Guardian Contact Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (V = Jl.contents) ||
                                  void 0 === V ||
                                  null === (B = V.studentDetails) ||
                                  void 0 === B ||
                                  null === (O = B.contactDetails) ||
                                  void 0 === O
                                    ? void 0
                                    : O.guardianContactNumber) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Alternate Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (L = Jl.contents) ||
                                  void 0 === L ||
                                  null === (U = L.studentDetails) ||
                                  void 0 === U ||
                                  null === (H = U.contactDetails) ||
                                  void 0 === H
                                    ? void 0
                                    : H.alternateNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Relation With Guardian",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (G = Jl.contents) ||
                                  void 0 === G ||
                                  null === (K = G.studentDetails) ||
                                  void 0 === K ||
                                  null === (Q = K.contactDetails) ||
                                  void 0 === Q
                                    ? void 0
                                    : Q.relationWithGuardian) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "National Id",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Z = Jl.contents) ||
                                  void 0 === Z ||
                                  null === ($ = Z.studentDetails) ||
                                  void 0 === $ ||
                                  null === (X = $.contactDetails) ||
                                  void 0 === X
                                    ? void 0
                                    : X.nationalId) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Present Address",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (ee = Jl.contents) ||
                                  void 0 === ee ||
                                  null === (te = ee.studentDetails) ||
                                  void 0 === te ||
                                  null === (ae = te.contactDetails) ||
                                  void 0 === ae
                                    ? void 0
                                    : ae.presentAddress) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Permanent Address",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (le = Jl.contents) ||
                                  void 0 === le ||
                                  null === (ne = le.studentDetails) ||
                                  void 0 === ne ||
                                  null === (ie = ne.contactDetails) ||
                                  void 0 === ie
                                    ? void 0
                                    : ie.permanentAddress) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Previous School Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            width: 200,
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Previous School Name",
                              }),
                              (0, re.jsx)(wa, {
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (se = Jl.contents) ||
                                  void 0 === se ||
                                  null === (oe = se.studentDetails) ||
                                  void 0 === oe ||
                                  null === (de = oe.previousSchoolDetails) ||
                                  void 0 === de
                                    ? void 0
                                    : de.schoolName) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Previous Class",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (me = Jl.contents) ||
                                  void 0 === me ||
                                  null === (he = me.studentDetails) ||
                                  void 0 === he ||
                                  null === (pe = he.previousSchoolDetails) ||
                                  void 0 === pe
                                    ? void 0
                                    : pe.class) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "TC Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (je = Jl.contents) ||
                                  void 0 === je ||
                                  null === (ge = je.studentDetails) ||
                                  void 0 === ge ||
                                  null === (Ae = ge.previousSchoolDetails) ||
                                  void 0 === Ae
                                    ? void 0
                                    : Ae.tcNumber) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Father Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Name",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (ye = Jl.contents) ||
                                  void 0 === ye ||
                                  null === (fe = ye.studentDetails) ||
                                  void 0 === fe ||
                                  null === (ve = fe.fatherDetails) ||
                                  void 0 === ve
                                    ? void 0
                                    : ve.name) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Contact Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (be = Jl.contents) ||
                                  void 0 === be ||
                                  null === (De = be.studentDetails) ||
                                  void 0 === De ||
                                  null === (we = De.fatherDetails) ||
                                  void 0 === we
                                    ? void 0
                                    : we.contactNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Education",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Ie = Jl.contents) ||
                                  void 0 === Ie ||
                                  null === (Ne = Ie.studentDetails) ||
                                  void 0 === Ne ||
                                  null === (_e = Ne.fatherDetails) ||
                                  void 0 === _e
                                    ? void 0
                                    : _e.education) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Profession",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Te = Jl.contents) ||
                                  void 0 === Te ||
                                  null === (Me = Te.studentDetails) ||
                                  void 0 === Me ||
                                  null === (Fe = Me.fatherDetails) ||
                                  void 0 === Fe
                                    ? void 0
                                    : Fe.profession) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Designation",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (ze = Jl.contents) ||
                                  void 0 === ze ||
                                  null === (Ee = ze.studentDetails) ||
                                  void 0 === Ee ||
                                  null === (qe = Ee.fatherDetails) ||
                                  void 0 === qe
                                    ? void 0
                                    : qe.designation) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Mother Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Name",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Ye = Jl.contents) ||
                                  void 0 === Ye ||
                                  null === (We = Ye.studentDetails) ||
                                  void 0 === We ||
                                  null === (Re = We.motherDetails) ||
                                  void 0 === Re
                                    ? void 0
                                    : Re.name) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Contact Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Pe = Jl.contents) ||
                                  void 0 === Pe ||
                                  null === (Je = Pe.studentDetails) ||
                                  void 0 === Je ||
                                  null === (Ve = Je.motherDetails) ||
                                  void 0 === Ve
                                    ? void 0
                                    : Ve.contactNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Education",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Oe = Jl.contents) ||
                                  void 0 === Oe ||
                                  null === (Le = Oe.studentDetails) ||
                                  void 0 === Le ||
                                  null === (Ue = Le.motherDetails) ||
                                  void 0 === Ue
                                    ? void 0
                                    : Ue.education) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Profession",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (He = Jl.contents) ||
                                  void 0 === He ||
                                  null === (Ge = He.studentDetails) ||
                                  void 0 === Ge ||
                                  null === (Ke = Ge.motherDetails) ||
                                  void 0 === Ke
                                    ? void 0
                                    : Ke.profession) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Designation",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Qe = Jl.contents) ||
                                  void 0 === Qe ||
                                  null === (Ze = Qe.studentDetails) ||
                                  void 0 === Ze ||
                                  null === (tt = Ze.motherDetails) ||
                                  void 0 === tt
                                    ? void 0
                                    : tt.designation) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Other Information:",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Health Condition",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (at = Jl.contents) ||
                                  void 0 === at ||
                                  null === (lt = at.studentDetails) ||
                                  void 0 === lt ||
                                  null === (nt = lt.otherDetails) ||
                                  void 0 === nt
                                    ? void 0
                                    : nt.healthCondition) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Email",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (it = Jl.contents) ||
                                  void 0 === it ||
                                  null === (st = it.studentDetails) ||
                                  void 0 === st ||
                                  null === (ot = st.otherDetails) ||
                                  void 0 === ot
                                    ? void 0
                                    : ot.email) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Hostel Required",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (rt = Jl.contents) ||
                                  void 0 === rt ||
                                  null === (dt = rt.studentDetails) ||
                                  void 0 === dt ||
                                  null === (ct = dt.otherDetails) ||
                                  void 0 === ct
                                    ? void 0
                                    : ct.hostelRequired) || "NA",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Transport Required",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (mt = Jl.contents) ||
                                  void 0 === mt ||
                                  null === (xt = mt.studentDetails) ||
                                  void 0 === xt ||
                                  null === (pt = xt.otherDetails) ||
                                  void 0 === pt
                                    ? void 0
                                    : pt.transportRequired) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(ut.A, {
                  dividers: !0,
                  sx: {
                    display: {
                      xs: "block",
                      sm: "none",
                      md: "none",
                      lg: "none",
                    },
                  },
                  children: [
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Academic Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Class",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl || void 0 === Jl
                                    ? void 0
                                    : Jl.contents.class) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Academic Year",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  ""
                                    .concat(
                                      null === Jl ||
                                        void 0 === Jl ||
                                        null === (gt = Jl.contents) ||
                                        void 0 === gt ||
                                        null === (At = gt.studentDetails) ||
                                        void 0 === At ||
                                        null === (yt = At.academicDetails) ||
                                        void 0 === yt ||
                                        null === (ft = yt.academicYear) ||
                                        void 0 === ft
                                        ? void 0
                                        : ft.from,
                                      " - "
                                    )
                                    .concat(
                                      null === Jl ||
                                        void 0 === Jl ||
                                        null === (vt = Jl.contents) ||
                                        void 0 === vt ||
                                        null === (bt = vt.studentDetails) ||
                                        void 0 === bt ||
                                        null === (St = bt.academicDetails) ||
                                        void 0 === St ||
                                        null === (kt = St.academicYear) ||
                                        void 0 === kt
                                        ? void 0
                                        : kt.to
                                    ) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Basic Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Student Name",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Ct = Jl.contents) ||
                                  void 0 === Ct
                                    ? void 0
                                    : Ct.studentName) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Date Of Birth",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children: Be()(
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Dt = Jl.contents) ||
                                  void 0 === Dt ||
                                  null === (wt = Dt.studentDetails) ||
                                  void 0 === wt ||
                                  null === (It = wt.basicDetails) ||
                                  void 0 === It
                                    ? void 0
                                    : It.dob) || "NA"
                                ).format("DD-MM-YYYY"),
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Gender",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Nt = Jl.contents) ||
                                  void 0 === Nt ||
                                  null === (_t = Nt.studentDetails) ||
                                  void 0 === _t ||
                                  null === (Tt = _t.basicDetails) ||
                                  void 0 === Tt
                                    ? void 0
                                    : Tt.gender) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Blood Group",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Mt = Jl.contents) ||
                                  void 0 === Mt ||
                                  null === (Ft = Mt.studentDetails) ||
                                  void 0 === Ft ||
                                  null === (zt = Ft.basicDetails) ||
                                  void 0 === zt ||
                                  null === (Et = zt.bloodGroup) ||
                                  void 0 === Et
                                    ? void 0
                                    : Et.toUpperCase()) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Religion",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Yt = Jl.contents) ||
                                  void 0 === Yt ||
                                  null === (Wt = Yt.studentDetails) ||
                                  void 0 === Wt ||
                                  null === (Rt = Wt.basicDetails) ||
                                  void 0 === Rt
                                    ? void 0
                                    : Rt.caste) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Caste Income Certificate Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Pt = Jl.contents) ||
                                  void 0 === Pt ||
                                  null === (Jt = Pt.studentDetails) ||
                                  void 0 === Jt ||
                                  null === (Vt = Jt.basicDetails) ||
                                  void 0 === Vt
                                    ? void 0
                                    : Vt.casteIncomeCertificateNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Mother Tongue",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Bt = Jl.contents) ||
                                  void 0 === Bt ||
                                  null === (Ot = Bt.studentDetails) ||
                                  void 0 === Ot ||
                                  null === (Lt = Ot.basicDetails) ||
                                  void 0 === Lt
                                    ? void 0
                                    : Lt.motherTongue) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Birth Place",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Ut = Jl.contents) ||
                                  void 0 === Ut ||
                                  null === (Ht = Ut.studentDetails) ||
                                  void 0 === Ht ||
                                  null === (Gt = Ht.basicDetails) ||
                                  void 0 === Gt
                                    ? void 0
                                    : Gt.birthPlace) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Aadhar Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Kt = Jl.contents) ||
                                  void 0 === Kt ||
                                  null === (Qt = Kt.studentDetails) ||
                                  void 0 === Qt ||
                                  null === (Zt = Qt.basicDetails) ||
                                  void 0 === Zt
                                    ? void 0
                                    : Zt.aadharNumber) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Contact Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Contact Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === ($t = Jl.contents) ||
                                  void 0 === $t ||
                                  null === (Xt = $t.studentDetails) ||
                                  void 0 === Xt ||
                                  null === (ea = Xt.contactDetails) ||
                                  void 0 === ea
                                    ? void 0
                                    : ea.contactNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Guardian Name",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (ta = Jl.contents) ||
                                  void 0 === ta ||
                                  null === (aa = ta.studentDetails) ||
                                  void 0 === aa ||
                                  null === (la = aa.contactDetails) ||
                                  void 0 === la
                                    ? void 0
                                    : la.guardianName) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Guardian Contact Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (na = Jl.contents) ||
                                  void 0 === na ||
                                  null === (sa = na.studentDetails) ||
                                  void 0 === sa ||
                                  null === (oa = sa.contactDetails) ||
                                  void 0 === oa
                                    ? void 0
                                    : oa.guardianContactNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Alternate Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (ra = Jl.contents) ||
                                  void 0 === ra ||
                                  null === (da = ra.studentDetails) ||
                                  void 0 === da ||
                                  null === (ma = da.contactDetails) ||
                                  void 0 === ma
                                    ? void 0
                                    : ma.alternateNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Relation With Guardian",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (ua = Jl.contents) ||
                                  void 0 === ua ||
                                  null === (xa = ua.studentDetails) ||
                                  void 0 === xa ||
                                  null === (ha = xa.contactDetails) ||
                                  void 0 === ha
                                    ? void 0
                                    : ha.relationWithGuardian) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "National Id",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (pa = Jl.contents) ||
                                  void 0 === pa ||
                                  null === (ja = pa.studentDetails) ||
                                  void 0 === ja ||
                                  null === (ga = ja.contactDetails) ||
                                  void 0 === ga
                                    ? void 0
                                    : ga.nationalId) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Present Address",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Aa = Jl.contents) ||
                                  void 0 === Aa ||
                                  null === (ya = Aa.studentDetails) ||
                                  void 0 === ya ||
                                  null === (va = ya.contactDetails) ||
                                  void 0 === va
                                    ? void 0
                                    : va.presentAddress) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Permanent Address",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Sa = Jl.contents) ||
                                  void 0 === Sa ||
                                  null === (Na = Sa.studentDetails) ||
                                  void 0 === Na ||
                                  null === (_a = Na.contactDetails) ||
                                  void 0 === _a
                                    ? void 0
                                    : _a.permanentAddress) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Previous School Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            width: 200,
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Previous School Name",
                              }),
                              (0, re.jsx)(wa, {
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Ta = Jl.contents) ||
                                  void 0 === Ta ||
                                  null === (Ma = Ta.studentDetails) ||
                                  void 0 === Ma ||
                                  null === (Fa = Ma.previousSchoolDetails) ||
                                  void 0 === Fa
                                    ? void 0
                                    : Fa.schoolName) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Previous Class",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (za = Jl.contents) ||
                                  void 0 === za ||
                                  null === (Ea = za.studentDetails) ||
                                  void 0 === Ea ||
                                  null === (qa = Ea.previousSchoolDetails) ||
                                  void 0 === qa
                                    ? void 0
                                    : qa.class) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "TC Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Ya = Jl.contents) ||
                                  void 0 === Ya ||
                                  null === (Wa = Ya.studentDetails) ||
                                  void 0 === Wa ||
                                  null === (Ra = Wa.previousSchoolDetails) ||
                                  void 0 === Ra
                                    ? void 0
                                    : Ra.tcNumber) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Father Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Name",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Pa = Jl.contents) ||
                                  void 0 === Pa ||
                                  null === (Ja = Pa.studentDetails) ||
                                  void 0 === Ja ||
                                  null === (Va = Ja.fatherDetails) ||
                                  void 0 === Va
                                    ? void 0
                                    : Va.name) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Contact Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Ba = Jl.contents) ||
                                  void 0 === Ba ||
                                  null === (Oa = Ba.studentDetails) ||
                                  void 0 === Oa ||
                                  null === (La = Oa.fatherDetails) ||
                                  void 0 === La
                                    ? void 0
                                    : La.contactNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Education",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Ua = Jl.contents) ||
                                  void 0 === Ua ||
                                  null === (Ha = Ua.studentDetails) ||
                                  void 0 === Ha ||
                                  null === (Ga = Ha.fatherDetails) ||
                                  void 0 === Ga
                                    ? void 0
                                    : Ga.education) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Profession",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Ka = Jl.contents) ||
                                  void 0 === Ka ||
                                  null === (Qa = Ka.studentDetails) ||
                                  void 0 === Qa ||
                                  null === (Za = Qa.fatherDetails) ||
                                  void 0 === Za
                                    ? void 0
                                    : Za.profession) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Designation",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === ($a = Jl.contents) ||
                                  void 0 === $a ||
                                  null === (Xa = $a.studentDetails) ||
                                  void 0 === Xa ||
                                  null === (el = Xa.fatherDetails) ||
                                  void 0 === el
                                    ? void 0
                                    : el.designation) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Mother Information",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Name",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (tl = Jl.contents) ||
                                  void 0 === tl ||
                                  null === (al = tl.studentDetails) ||
                                  void 0 === al ||
                                  null === (ll = al.motherDetails) ||
                                  void 0 === ll
                                    ? void 0
                                    : ll.name) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Contact Number",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (nl = Jl.contents) ||
                                  void 0 === nl ||
                                  null === (il = nl.studentDetails) ||
                                  void 0 === il ||
                                  null === (sl = il.motherDetails) ||
                                  void 0 === sl
                                    ? void 0
                                    : sl.contactNumber) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Education",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (ol = Jl.contents) ||
                                  void 0 === ol ||
                                  null === (rl = ol.studentDetails) ||
                                  void 0 === rl ||
                                  null === (dl = rl.motherDetails) ||
                                  void 0 === dl
                                    ? void 0
                                    : dl.education) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Profession",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (cl = Jl.contents) ||
                                  void 0 === cl ||
                                  null === (ml = cl.studentDetails) ||
                                  void 0 === ml ||
                                  null === (ul = ml.motherDetails) ||
                                  void 0 === ul
                                    ? void 0
                                    : ul.profession) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Designation",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (xl = Jl.contents) ||
                                  void 0 === xl ||
                                  null === (hl = xl.studentDetails) ||
                                  void 0 === hl ||
                                  null === (pl = hl.motherDetails) ||
                                  void 0 === pl
                                    ? void 0
                                    : pl.designation) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "body",
                      fontSize: "16px",
                      fontWeight: 600,
                      children: "Other Information:",
                    }),
                    (0, re.jsx)(ia.A, {
                      "aria-label": "customized table",
                      className: "profile-table",
                      sx: { mb: 2 },
                      children: (0, re.jsxs)(ca.A, {
                        children: [
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Health Condition",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (jl = Jl.contents) ||
                                  void 0 === jl ||
                                  null === (gl = jl.studentDetails) ||
                                  void 0 === gl ||
                                  null === (Al = gl.otherDetails) ||
                                  void 0 === Al
                                    ? void 0
                                    : Al.healthCondition) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Email",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (yl = Jl.contents) ||
                                  void 0 === yl ||
                                  null === (fl = yl.studentDetails) ||
                                  void 0 === fl ||
                                  null === (vl = fl.otherDetails) ||
                                  void 0 === vl
                                    ? void 0
                                    : vl.email) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Hostel Required",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (bl = Jl.contents) ||
                                  void 0 === bl ||
                                  null === (Sl = bl.studentDetails) ||
                                  void 0 === Sl ||
                                  null === (kl = Sl.otherDetails) ||
                                  void 0 === kl
                                    ? void 0
                                    : kl.hostelRequired) || "NA",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(Da, {
                            children: [
                              (0, re.jsx)(wa, {
                                align: "left",
                                sx: { fontWeight: "bold" },
                                children: "Transport Required",
                              }),
                              (0, re.jsx)(wa, {
                                align: "left",
                                children:
                                  (null === Jl ||
                                  void 0 === Jl ||
                                  null === (Cl = Jl.contents) ||
                                  void 0 === Cl ||
                                  null === (Dl = Cl.studentDetails) ||
                                  void 0 === Dl ||
                                  null === (wl = Dl.otherDetails) ||
                                  void 0 === wl
                                    ? void 0
                                    : wl.transportRequired) || "NA",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
              ],
            }),
          ],
        });
      }
      const _a = [
        { name: "Exam Name", key: "examName" },
        { name: "Class", key: "class" },
      ];
      var Ta = a(53193),
        Ma = a(18356),
        Fa = a(72221),
        za = a(78492),
        Ea = a(74605),
        qa = a(14256),
        Ya = a(63471);
      const Wa = { inputProps: { "aria-label": "Checkbox demo" } },
        Ra = (0, n.Ay)(s.A)(() => ({
          display: "flex",
          flexDirection: "column",
          padding: "10px",
        })),
        Pa =
          ((0, n.Ay)(u.A)(() => ({ fontSize: "16px", fontWeight: "bold" })),
          (0, n.Ay)(u.A)(() => ({ fontSize: "16px", fontWeight: "bold" })),
          (0, n.Ay)(Ma.A)(() => ({
            fontSize: "12px",
            fontWeight: 580,
            color: "#616161",
            paddingLeft: "10px",
          }))),
        Ja = (0, n.Ay)(qa.A)(() => ({ marginTop: "-10px" }));
      function Va(e) {
        let { quiz: t = {}, questionIndex: a, quizData: l, setQuizData: n } = e;
        return (0, re.jsxs)(Ra, {
          children: [
            (0, re.jsxs)(Pa, {
              sx: {
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
              },
              children: [
                a + 1,
                ".",
                " ",
                t.question ? "Update Your Question!" : "Write your question",
              ],
            }),
            (0, re.jsx)(Mt.A, {
              fullWidth: !0,
              size: "small",
              name: "question",
              maxRows: 3,
              multiline: !0,
              value: t.question,
              placeholder: "Type here...",
              onChange: (e) =>
                ((e, t) => {
                  n(
                    l.map((a, l) =>
                      l === t ? { ...a, question: e.target.value } : a
                    )
                  );
                })(e, a),
              InputProps: {
                endAdornment: (0, re.jsx)(Ft.A, {
                  position: "end",
                  children:
                    a > 0
                      ? (0, re.jsx)(h.A, {
                          color: "error",
                          size: "small",
                          onClick: () =>
                            ((e) => {
                              n((t) => t.filter((t, a) => a !== e));
                            })(a),
                          children: (0, re.jsx)(Ya.A, {
                            fontSize: "small",
                            color: "error",
                          }),
                        })
                      : null,
                }),
              },
            }),
            (0, re.jsx)(xe.Ay, {
              sx: {
                marginBottom: "10px",
                backgroundColor: (e) => e.palette.grey[100],
                borderRadius: "5px",
                padding: "20px",
                border: "1px solid lightgrey",
                marginTop: "10px",
              },
              container: !0,
              rowGap: 2,
              children: t.options.map((e, i) =>
                (0, re.jsxs)(
                  xe.Ay,
                  {
                    item: !0,
                    xs: 12,
                    md: 6,
                    sx: { padding: "0 10px" },
                    children: [
                      (0, re.jsxs)(s.A, {
                        sx: {
                          justifyContent: "flex-start",
                          alignItems: "center",
                          display: "flex",
                        },
                        children: [
                          (0, re.jsx)(Ja, {
                            size: "small",
                            ...Wa,
                            color: "default",
                            checked: t.correctOption && t.correctOption === e,
                            onChange: (t) =>
                              ((e, t) => {
                                n(
                                  l.map((a, l) =>
                                    l === t ? { ...a, correctOption: e } : a
                                  )
                                );
                              })(e, a),
                            value: e,
                            type: "radio",
                          }),
                          (0, re.jsxs)(Pa, { children: ["Option ", i + 1] }),
                        ],
                      }),
                      (0, re.jsx)(Mt.A, {
                        multiline: !0,
                        maxRows: 3,
                        fullWidth: !0,
                        size: "small",
                        name: "option".concat(i + 1),
                        value: e,
                        onChange: (e) =>
                          ((e, t, a) => {
                            let i = l
                              .filter((e, a) => a === t)[0]
                              .options.map((t, l) =>
                                l === a ? e.target.value : t
                              );
                            n(
                              l.map((e, a) =>
                                a === t ? { ...e, options: i } : e
                              )
                            );
                          })(e, a, i),
                      }),
                    ],
                  },
                  i
                )
              ),
            }),
          ],
        });
      }
      var Ba = a(91036);
      function Oa(e) {
        let { open: t = !1, onClose: a = () => {}, dataToUpdate: n = null } = e;
        const o = (0, i.A)(),
          { selectedSetting: r } = (0, l.useContext)(Ce.A),
          d = (0, dt.A)(o.breakpoints.down("sm")),
          [c, m] = (0, l.useState)([]),
          [x, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)({}),
          [A, y] = (0, l.useState)({}),
          [f, v] = (0, l.useState)(!1),
          [b, S] = (0, l.useState)([
            { question: "", options: ["", "", "", ""], correctOption: "" },
          ]),
          [k, C] = (0, l.useState)([""]),
          [w, I] = (0, l.useState)(!1);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e, t;
              const [a, l] = await Promise.all([
                (0, Se.Jt)(ke.r.academicYear.list),
                (0, Se.Jt)(ke.r.class.list, { params: { schoolId: r._id } }),
              ]);
              m(null === (e = a.data) || void 0 === e ? void 0 : e.result),
                p(null === (t = l.data) || void 0 === t ? void 0 : t.result);
            } catch (a) {
              console.log(a);
            }
          })();
        }, [r._id]);
        const N = (e) => {
            const { name: t, value: a } = e.target;
            g({ ...j, [t]: a });
          },
          _ = (e) => {
            const { name: t, value: a } = e.target;
            y((e) => ({ ...e, [t]: a }));
          },
          T = () => {
            S([{ question: "", options: ["", "", "", ""], correctOption: "" }]),
              g({}),
              y({}),
              I(!1),
              C([]),
              a();
          };
        return (0, re.jsx)(ct.A, {
          open: t,
          onClose: a,
          fullScreen: d,
          maxWidth: "md",
          fullWidth: !0,
          "aria-labelledby": "responsive-dialog-title",
          children: (0, re.jsxs)(s.A, {
            component: "form",
            sx: { padding: 2 },
            onSubmit: async (e) => {
              e.preventDefault();
              try {
                const e = b.map((e, t) => ({
                  question: e.question,
                  options: [
                    { value: e.options[0] },
                    { value: e.options[1] },
                    { value: e.options[2] },
                    { value: e.options[3] },
                  ],
                  correctOption: e.correctOption,
                }));
                if (e.filter((e) => !e.question || !e.options).length)
                  return Ba.oR.error("Question cannot be empty");
                if (e.some((e) => e.options.some((e) => "" === e.name)))
                  return Ba.oR.error("Option cannot be empty");
                if (e.filter((e) => !e.correctOption).length)
                  return Ba.oR.error("Please select a correct option");
                v(!0);
                let t = {
                  schoolId: r._id,
                  academicYear: j.academicYear,
                  classId: j.schoolClass,
                  examName: j.examName,
                  passingPercentage: A.passingMark,
                  quiz: e,
                  negativeMarking: w,
                  negativeMarkingPerQuestion: A.negativeMarking,
                  marksPerQuestion: A.mark,
                  additionalInstructions: k.map((e) => ({ point: e })),
                };
                const { data: a } = await (0, Se.bE)(
                  ke.r.preadmissionExam.create,
                  t
                );
                T();
              } catch (t) {
                console.error(t);
              }
              v(!1);
            },
            children: [
              (0, re.jsxs)(xe.Ay, {
                container: !0,
                spacing: 2,
                sx: {
                  display: "flex",
                  justifyContent: "flex-start",
                  alignItems: "center",
                },
                children: [
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 12,
                    lg: 12,
                    children: (0, re.jsx)(u.A, {
                      id: "modal-modal-title",
                      variant: "h6",
                      textAlign: "center",
                      fontSize: "20px",
                      fontWeight: "bold",
                      children: n ? "Update Exam" : "Add Exam",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 4,
                    children: (0, re.jsxs)(Ta.A, {
                      size: "small",
                      fullWidth: !0,
                      required: !0,
                      children: [
                        (0, re.jsx)(Ma.A, { children: "Academic Year" }),
                        (0, re.jsx)(Fa.A, {
                          labelId: "demo-simpless-select-filled-label",
                          id: "demo-simple-select-filled-l",
                          varient: "outlined",
                          label: "academic year",
                          name: "academicYear",
                          value: j.academicYear || "",
                          onChange: N,
                          children:
                            c &&
                            c.map((e, t) =>
                              (0, re.jsxs)(
                                D.A,
                                {
                                  value: e._id,
                                  sx: { fontSize: 12, fontWeight: 500 },
                                  children: [e.from, " - ", e.to],
                                },
                                e._id
                              )
                            ),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 4,
                    children: (0, re.jsxs)(Ta.A, {
                      size: "small",
                      fullWidth: !0,
                      required: !0,
                      children: [
                        (0, re.jsx)(Ma.A, { children: "Class" }),
                        (0, re.jsx)(Fa.A, {
                          variant: "outlined",
                          label: "class",
                          labelId: "demo-simple-select-filled-label",
                          id: "demo-simple-select-filled",
                          name: "schoolClass",
                          value: j.schoolClass || "",
                          onChange: N,
                          children:
                            x &&
                            x.map((e, t) =>
                              (0, re.jsx)(
                                D.A,
                                {
                                  value: e._id,
                                  sx: { fontSize: 12, fontWeight: 500 },
                                  children: e.name,
                                },
                                e._id
                              )
                            ),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 4,
                    sx: { mt: 0.2 },
                    children: (0, re.jsx)(Mt.A, {
                      variant: "outlined",
                      fullWidth: !0,
                      required: !0,
                      size: "small",
                      label: "Exam name",
                      name: "examName",
                      id: "filled-required",
                      value: j.examName || "",
                      onChange: N,
                    }),
                  }),
                ],
              }),
              (0, re.jsxs)(s.A, {
                sx: {
                  display: "flex",
                  padding: "10px",
                  justifyContent: "space-between",
                  alignItems: "center",
                  mt: 4,
                  mb: 2,
                  border: "1px solid lightgray",
                  borderRadius: "5px",
                },
                children: [
                  (0, re.jsx)(u.A, {
                    sx: { textAlign: "left", fontWeight: "bold" },
                    children: "Add Questions:",
                  }),
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    onClick: () => {
                      S([
                        ...b,
                        {
                          question: "",
                          options: ["", "", "", ""],
                          correctOption: "",
                        },
                      ]);
                    },
                    startIcon: (0, re.jsx)(ot.A, {}),
                    children: "ADD",
                  }),
                ],
              }),
              null === b || void 0 === b
                ? void 0
                : b.map((e, t) =>
                    (0, re.jsx)(
                      Va,
                      {
                        quiz: e,
                        questionIndex: t,
                        quizData: b,
                        setQuizData: S,
                      },
                      t
                    )
                  ),
              (0, re.jsxs)(s.A, {
                sx: { mt: 2 },
                children: [
                  (0, re.jsxs)(s.A, {
                    sx: {
                      display: "flex",
                      padding: "10px",
                      justifyContent: "space-between",
                      alignItems: "center",
                      mt: 4,
                      mb: 2,
                      border: "1px solid lightgray",
                      borderRadius: "5px",
                    },
                    children: [
                      (0, re.jsx)(u.A, {
                        sx: { fontWeight: "bold" },
                        children: "Additional Instruction:",
                      }),
                      (0, re.jsx)($e.A, {
                        size: "small",
                        variant: "contained",
                        startIcon: (0, re.jsx)(ot.A, {}),
                        onClick: () => {
                          C([...k, ""]);
                        },
                        children: "Add",
                      }),
                    ],
                  }),
                  k.map((e, t) =>
                    (0, re.jsx)(
                      xe.Ay,
                      {
                        container: !0,
                        sx: { mt: 1 },
                        children: (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 12,
                          lg: 12,
                          children: (0, re.jsx)(Mt.A, {
                            variant: "outlined",
                            fullWidth: !0,
                            size: "small",
                            multiline: !0,
                            value: e,
                            onChange: (e) =>
                              ((e, t) => {
                                const a = [...k];
                                (a[t] = e.target.value), C(a);
                              })(e, t),
                            InputProps: {
                              endAdornment: (0, re.jsx)(Ft.A, {
                                position: "end",
                                children: (0, re.jsx)(h.A, {
                                  color: "error",
                                  size: "small",
                                  onClick: () =>
                                    ((e) => {
                                      const t = [...k];
                                      t.splice(e, 1), C(t);
                                    })(t),
                                  children: (0, re.jsx)(Ya.A, {
                                    fontSize: "small",
                                    color: "error",
                                  }),
                                }),
                              }),
                            },
                          }),
                        }),
                      },
                      t
                    )
                  ),
                ],
              }),
              (0, re.jsxs)(xe.Ay, {
                container: !0,
                spacing: 2,
                sx: { mt: 1.5 },
                children: [
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    lg: 12,
                    children: (0, re.jsxs)(s.A, {
                      sx: {
                        display: "flex",
                        justifyContent: "flex-start",
                        alignItems: "center",
                        gap: "4px",
                      },
                      children: [
                        (0, re.jsxs)(u.A, {
                          sx: { fontSize: "16px" },
                          children: ["Negative Marking:", " "],
                        }),
                        (0, re.jsxs)(za.A, {
                          row: !0,
                          "aria-labelledby":
                            "demo-row-radio-buttons-group-label",
                          name: "row-radio-buttons-group",
                          value: w,
                          onChange: (e) => {
                            I(e.target.value);
                          },
                          sx: { mt: 1 },
                          children: [
                            (0, re.jsx)(Ea.A, {
                              value: !0,
                              control: (0, re.jsx)(qa.A, {}),
                              label: "Yes",
                            }),
                            (0, re.jsx)(Ea.A, {
                              value: !1,
                              control: (0, re.jsx)(qa.A, {}),
                              label: "No",
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
                  "true" === w &&
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      md: 12,
                      lg: 4,
                      children: (0, re.jsx)(Mt.A, {
                        fullWidth: !0,
                        variant: "outlined",
                        size: "small",
                        required: !0,
                        label: "Negative Marks Per Question",
                        type: "number",
                        name: "negativeMarking",
                        value: A.negativeMarking || "",
                        onChange: _,
                        InputLabelProps: { style: { fontSize: 12 } },
                      }),
                    }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    lg: 4,
                    children: (0, re.jsx)(Mt.A, {
                      fullWidth: !0,
                      variant: "outlined",
                      size: "small",
                      required: !0,
                      label: "Marks Per Question",
                      type: "number",
                      name: "mark",
                      value: A.mark || "",
                      onChange: _,
                      InputLabelProps: { style: { fontSize: 12 } },
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    lg: 4,
                    children: (0, re.jsx)(Mt.A, {
                      fullWidth: !0,
                      variant: "outlined",
                      label: "Pass percentage (%)",
                      size: "small",
                      required: !0,
                      type: "number",
                      name: "passingMark",
                      value: A.passingMark || "",
                      onChange: _,
                      InputLabelProps: { style: { fontSize: 12 } },
                    }),
                  }),
                ],
              }),
              (0, re.jsx)(xe.Ay, {
                item: !0,
                xs: 12,
                md: 12,
                children: (0, re.jsxs)(s.A, {
                  sx: {
                    display: "flex",
                    justifyContent: "flex-end",
                    gap: "3%",
                    mt: 3,
                  },
                  children: [
                    (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      color: "error",
                      onClick: T,
                      children: "Cancel",
                    }),
                    (0, re.jsx)(ht.A, {
                      loading: f,
                      variant: "contained",
                      type: "submit",
                      size: "small",
                      sx: {
                        background: "#1b3779",
                        "&:hover": { background: "#1b3779" },
                      },
                      children: "Submit",
                    }),
                  ],
                }),
              }),
            ],
          }),
        });
      }
      function La() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(!1),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(!1);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.academicYear.list, {
                params: { schoolId: e._id },
              });
              o(
                t.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                x.setFieldValue("academicYear", t.result[0]._id);
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                d(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  x.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e._id]);
        const u = async (t) => {
            try {
              a(!0);
              const { data: l } = await (0, Se.Jt)(ke.r.preadmissionExam.list, {
                params: {
                  schoolId: e._id,
                  search: { academicYear: t.academicYear, class: t.class },
                },
              });
              i(l.result.map((e) => ({ ...e, class: e.class.name })));
            } catch (l) {
              console.log(l);
            }
            a(!1);
          },
          x = (0, et.Wx)({
            initialValues: { academicYear: "", class: "" },
            onSubmit: u,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Exams" }),
            (0, re.jsx)(rt, { title: "Add Exam", onAddClick: () => m(!0) }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                component: "form",
                onSubmit: x.handleSubmit,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: x,
                      label: "Select Academic Year",
                      options: s,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: x,
                      label: "Select Class",
                      options: r,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center" },
                    item: !0,
                    children: (0, re.jsx)(ht.A, {
                      loading: t,
                      size: "small",
                      variant: "contained",
                      type: "submit",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: _a,
              bodyDataModal: "exams",
              bodyData: n,
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.Jt)(
                    ke.r.preadmissionExam.delete + "/" + e
                  );
                  u(), x.handleSubmit();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(Oa, { open: c, onClose: () => m(!1) }),
          ],
        });
      }
      var Ua = a(19090);
      function Ha(e) {
        let { open: t, selectedSetting: a, handleClose: n = () => {} } = e;
        const [i, s] = (0, l.useState)(),
          [o, r] = (0, l.useState)(!1),
          [d, c] = (0, l.useState)([]),
          [m, u] = (0, l.useState)([]),
          [x, h] = (0, l.useState)([]),
          p = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              classId: "",
              examId: "",
              startTime: "",
              endTime: "",
              roomNumber: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: async (e) => {
              try {
                const t = {
                  ...e,
                  schoolId: a._id,
                  dateOfExam: Be()(e.dateOfExam).format("YYYY/MM/DD"),
                };
                if ((r(!0), console.log(t, "ppppppp"), i)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.preadmissionExamSchedule.update + "/" + i._id,
                    t
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.preadmissionExamSchedule.create,
                    t
                  );
                }
                n();
              } catch (t) {
                console.log(t);
              }
              r(!1);
            },
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list, {
                  params: { schoolId: a._id },
                });
                c(
                  e.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                ),
                  p.setFieldValue("academicYear", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: a._id },
                  });
                  u(
                    e.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    p.setFieldValue("classId", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [a._id]),
          (0, l.useEffect)(() => {
            null !== p &&
              void 0 !== p &&
              p.values.academicYear &&
              null !== p &&
              void 0 !== p &&
              p.values.classId &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(
                    ke.r.preadmissionExam.list,
                    {
                      params: {
                        schoolId: a._id,
                        search: {
                          academicYear:
                            null === p || void 0 === p
                              ? void 0
                              : p.values.academicYear,
                          class:
                            null === p || void 0 === p
                              ? void 0
                              : p.values.classId,
                        },
                      },
                    }
                  );
                  h(e.result.map((e) => ({ label: e.examName, value: e._id }))),
                    p.setFieldValue("examId", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [
            null === p || void 0 === p ? void 0 : p.values.academicYear,
            null === p || void 0 === p ? void 0 : p.values.classId,
            a,
          ]),
          (0, re.jsx)(re.Fragment, {
            children: (0, re.jsx)(pt, {
              open: t,
              formik: p,
              formTitle: i ? "Update Exam Schedules" : "Add Exam Schedules",
              onClose: n,
              submitButtonTitle: i ? "Update" : "Submit",
              adding: o,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: p,
                      label: "Select Academic Year",
                      options: d,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "classId",
                      formik: p,
                      label: "Select Class",
                      options: m,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "examId",
                      formik: p,
                      label: "Select Exam",
                      options: x,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      required: !0,
                      formik: p,
                      name: "dateOfExam",
                      label: "Date of Exam",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      required: !0,
                      formik: p,
                      type: "time",
                      name: "startTime",
                      label: "Start Time",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      required: !0,
                      formik: p,
                      type: "time",
                      name: "endTime",
                      label: "End Time",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "roomNumber",
                      label: "Room No.",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "address",
                      label: "Address",
                    }),
                  }),
                ],
              }),
            }),
          })
        );
      }
      var Ga = a(95540),
        Ka = a(9048),
        Qa = a.n(Ka),
        Za = a(24914),
        $a = a(51387),
        Xa = a(73368);
      const el = {
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        width: 350,
        bgcolor: "background.paper",
        borderRadius: "10px",
        boxShadow: 24,
        p: 2,
      };
      function tl(e) {
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(Xa.A, {
            "aria-labelledby": "modal-modal-title",
            "aria-describedby": "modal-modal-description",
            open: e.deleteModal,
            onClose: () => e.setDeleteModal(!1),
            children: (0, re.jsxs)(s.A, {
              sx: el,
              children: [
                (0, re.jsx)(s.A, {
                  sx: { textAlign: "center", margin: "10px auto" },
                  children: (0, re.jsx)("img", {
                    src: it,
                    width: 50,
                    height: 50,
                  }),
                }),
                (0, re.jsx)(u.A, {
                  textAlign: "center",
                  sx: { fontSize: "18px", fontWeight: 700 },
                  children: "Delete Confirmation",
                }),
                (0, re.jsx)(u.A, {
                  sx: { mt: 2, textAlign: "center" },
                  children: "Are you sure want to delete this item?",
                }),
                (0, re.jsxs)(s.A, {
                  my: 3,
                  sx: {
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    gap: "15px",
                  },
                  children: [
                    (0, re.jsx)($e.A, {
                      size: "small",
                      color: "error",
                      variant: "contained",
                      onClick: () => e.setDeleteModal(!1),
                      children: "Cancel",
                    }),
                    (0, re.jsx)($e.A, {
                      onClick: () => {
                        e.handleDelete(e.id), e.setDeleteModal(!1);
                      },
                      color: "primary",
                      size: "small",
                      variant: "contained",
                      children: "Delete",
                    }),
                  ],
                }),
              ],
            }),
          }),
        });
      }
      function al() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          [m, x] = (0, l.useState)(!1),
          [p, j] = (0, l.useState)(!1),
          [g, A] = l.useState(!1),
          [y, f] = l.useState(0),
          [v, b] = l.useState(10);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.academicYear.list, {
                params: { schoolId: e._id },
              });
              i(
                t.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                k.setFieldValue("academicYear", t.result[0]._id);
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                r(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  k.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e._id]);
        const k = (0, et.Wx)({
          initialValues: {
            academicYear: "",
            class: "",
            exam: "",
            fromDate: Be()(new Date()),
            toDate: Be()(new Date()),
          },
          onSubmit: async (t) => {
            console.log(t, "exam values");
            try {
              x(!0);
              const { data: l } = await (0, Se.Jt)(
                ke.r.preadmissionExamSchedule.list,
                {
                  params: {
                    schoolId: e._id,
                    search: {
                      academicYear: t.academicYear,
                      class: t.class,
                      exam: t.exam,
                      fromDate: Be()(t.fromDate).format("YYYY/MM/DD"),
                      toDate: Be()(t.toDate).format("YYYY/MM/DD"),
                    },
                  },
                }
              );
              console.log(l.result, "exam list"),
                a(l.result.map((e) => ({ ...e, class: e.class.name })));
            } catch (l) {
              console.log(l);
            }
            x(!1);
          },
        });
        (0, l.useEffect)(() => {
          null !== k &&
            void 0 !== k &&
            k.values.academicYear &&
            null !== k &&
            void 0 !== k &&
            k.values.class &&
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(
                  ke.r.preadmissionExam.list,
                  {
                    params: {
                      schoolId: e._id,
                      search: {
                        academicYear:
                          null === k || void 0 === k
                            ? void 0
                            : k.values.academicYear,
                        class:
                          null === k || void 0 === k ? void 0 : k.values.class,
                      },
                    },
                  }
                );
                c(t.result.map((e) => ({ label: e.examName, value: e._id }))),
                  k.setFieldValue("exam", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [
          null === k || void 0 === k ? void 0 : k.values.academicYear,
          null === k || void 0 === k ? void 0 : k.values.class,
          e,
        ]);
        const C = async (e) => {
          try {
            await (0, Se.yH)(ke.r.preadmissionExamSchedule.delete + "/" + e);
          } catch (t) {
            console.error(t);
          }
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Exam Schedules" }),
            (0, re.jsx)(rt, {
              title: "Add Exam Schedules",
              onAddClick: () => {
                j(!0);
              },
            }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                component: "form",
                onSubmit: k.handleSubmit,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: k,
                      label: "Select Academic Year",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: k,
                      label: "Select Class",
                      options: o,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "exam",
                      formik: k,
                      label: "Select Exam",
                      options: d,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: k,
                      label: "From Date",
                      name: "fromDate",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: k,
                      label: "To Date",
                      name: "toDate",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center" },
                    item: !0,
                    children: (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      type: "submit",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsxs)(na.A, {
              component: ue.A,
              children: [
                (0, re.jsxs)(ia.A, {
                  children: [
                    (0, re.jsx)(sa.A, {
                      sx: {
                        backgroundColor: (e) =>
                          "dark" === e.palette.mode
                            ? e.palette.primary.dark
                            : e.palette.primary.light,
                      },
                      children: (0, re.jsxs)(oa.A, {
                        children: [
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: "SL",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: "Academic Year",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: "Class",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: "Exam",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: "Exam Link",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: "Action",
                          }),
                        ],
                      }),
                    }),
                    t.map((e, t) => {
                      var a;
                      return (0, re.jsxs)(oa.A, {
                        children: [
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: y * v + t + 1,
                          }),
                          (0, re.jsxs)(ra.A, {
                            align: "center",
                            children: [
                              e.academicYear.academicYearFrom,
                              "-",
                              e.academicYear.academicYearTo,
                            ],
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: e.class.name,
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children:
                              null === (a = e.exam) || void 0 === a
                                ? void 0
                                : a.examName,
                          }),
                          (0, re.jsxs)(ra.A, {
                            align: "center",
                            children: [
                              (0, re.jsx)(S.A, {
                                title: "".concat(
                                  !0 === e.examLinkEnabled
                                    ? "Enable"
                                    : "Disable"
                                ),
                                children: (0, re.jsx)(
                                  I.A,
                                  {
                                    onClick: () =>
                                      (async (e) => {
                                        try {
                                          await (0, Se.yJ)(
                                            ""
                                              .concat(
                                                ke.r.preadmissionExamSchedule
                                                  .enableExamLink
                                              )
                                              .concat(e)
                                          );
                                        } catch (t) {
                                          console.log(t);
                                        }
                                      })(e._id),
                                    defaultChecked: !!e.examLinkEnabled,
                                  },
                                  e._id
                                ),
                              }),
                              (0, re.jsx)(S.A, {
                                title: "Copy Link",
                                children: (0, re.jsx)(h.A, {
                                  size: "small",
                                  color: "primary",
                                  onClick: () => {
                                    return (
                                      (t =
                                        null === e || void 0 === e
                                          ? void 0
                                          : e.examLink),
                                      console.log(t, "copylink"),
                                      Qa()("".concat(t)),
                                      void Ba.oR.success(
                                        "Exam Link Copied successfully"
                                      )
                                    );
                                    var t;
                                  },
                                  children: (0, re.jsx)(Za.A, {
                                    fontSize: "small",
                                    color: "primary",
                                  }),
                                }),
                              }),
                            ],
                          }),
                          (0, re.jsx)(ra.A, {
                            children: (0, re.jsxs)(s.A, {
                              sx: {
                                display: "flex",
                                justifyContent: "center",
                                alignItems: "center",
                                gap: 2,
                              },
                              children: [
                                (0, re.jsx)(S.A, {
                                  title: "Update",
                                  children: (0, re.jsx)(h.A, {
                                    style: { color: "#1b3779" },
                                    size: "small",
                                    children: (0, re.jsx)(Ga.A, {
                                      fontSize: "small",
                                    }),
                                  }),
                                }),
                                (0, re.jsx)(S.A, {
                                  title: "Delete",
                                  children: (0, re.jsx)(h.A, {
                                    size: "small",
                                    color: "error",
                                    onClick: () => A(e._id),
                                    children: (0, re.jsx)($a.A, {
                                      color: "error",
                                      fontSize: "small",
                                    }),
                                  }),
                                }),
                                (0, re.jsx)(tl, {
                                  deleteModal: g,
                                  handleDelete: C,
                                  id: e._id,
                                  setDeleteModal: A,
                                }),
                                (0, re.jsx)($e.A, {
                                  size: "small",
                                  onClick: (t) =>
                                    (async (e, t) => {
                                      e.preventDefault();
                                      try {
                                        await (0, Se.bE)(
                                          ""
                                            .concat(
                                              ke.r.preadmissionExamSchedule
                                                .sendVenueDetailsToStudents,
                                              "/"
                                            )
                                            .concat(t)
                                        );
                                      } catch (a) {
                                        console.log(a);
                                      }
                                    })(t, e._id),
                                  disabled: !0 === e.notified,
                                  variant: "contained",
                                  children:
                                    !0 === e.notified ? "Notified" : "Notify",
                                }),
                              ],
                            }),
                          }),
                        ],
                      });
                    }),
                  ],
                }),
                !t.length &&
                  (0, re.jsx)(u.A, {
                    variant: "h6",
                    sx: { textAlign: "center", margin: "5px", padding: "5px" },
                    children: "No data found",
                  }),
              ],
            }),
            (0, re.jsx)(Ua.A, {
              rowsPerPageOptions: [10, 25, 50],
              component: "div",
              count: t.length,
              rowsPerPage: v,
              page: y,
              onPageChange: (e, t) => {
                f(t);
              },
              onRowsPerPageChange: (e) => {
                b(+e.target.value), f(0);
              },
              sx: {
                display: "flex",
                justifyContent: "flex-start",
                alignItems: "center",
                my: 1,
              },
            }),
            (0, re.jsx)(Ha, {
              open: p,
              handleClose: () => {
                j(!1);
              },
              selectedSetting: e,
            }),
          ],
        });
      }
      const ll = [
          { name: "Name", key: "name" },
          { name: "Class", key: "class" },
          { name: "Max marks", key: "maxMarks" },
          { name: "Passing marks ", key: "passingMarks" },
          { name: "Obtained marks", key: "obtainedMarks" },
        ],
        nl = (0, n.Ay)(s.A)({
          display: "flex",
          justifyContent: "flex-start",
          alignItems: "center",
          marginBottom: "20px",
        });
      function il() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.academicYear.list, {
                params: { schoolId: e._id },
              });
              i(
                t.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                r.setFieldValue("academicYear", t.result[0]._id);
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                o(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  r.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e._id]);
        const r = (0, et.Wx)({
          initialValues: { academicYear: "", class: "" },
          onSubmit: console.log("nnnn"),
        });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Result" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                component: "form",
                onSubmit: r.handleSubmit,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: r,
                      label: "Select Academic Year",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: r,
                      label: "Select Class",
                      options: s,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    sx: { alignSelf: "center" },
                    item: !0,
                    children: (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      type: "submit",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(nl, {
              children: (0, re.jsxs)(ba.A, {
                variant: "outlined",
                "aria-label": "outlined button group",
                children: [
                  (0, re.jsx)($e.A, {
                    variant: "contained",
                    children: "Pending:56",
                  }),
                  (0, re.jsx)($e.A, { children: "Approved: 100" }),
                  (0, re.jsx)($e.A, { children: "Rejected:0" }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["edit"],
              tableKeys: ll,
              bodyDataModal: "result",
              bodyData: t,
            }),
          ],
        });
      }
      const sl = [
          { name: "Class", key: "name" },
          { name: "Active", key: "active" },
          { name: "View On Web", key: "isPublic" },
        ],
        ol = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ],
        rl = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ];
      function dl() {
        var e;
        const { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)(null),
          [o, r] = (0, l.useState)(!1),
          [d, c] = (0, l.useState)(!1),
          [m, u] = (0, l.useState)([]),
          x = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: t._id },
              });
              n(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          x(),
            (async () => {
              try {
                var e;
                const { data: a } = await (0, Se.Jt)(ke.r.employee.list, {
                  params: { schoolId: t._id },
                });
                u(
                  null === (e = a.result) || void 0 === e
                    ? void 0
                    : e
                        .filter((e) =>
                          e.role.name
                            .toLowerCase()
                            .match(new RegExp("Teacher", "i"))
                        )
                        .map((e) => ({ label: e.basicInfo.name, value: e._id }))
                );
              } catch (a) {
                console.log(a);
              }
            })();
        }, [t]);
        const h = () => {
            r(!1), s(null);
          },
          p = (0, et.Wx)({
            initialValues: {
              name: (null === i || void 0 === i ? void 0 : i.name) || "",
              classTeachers:
                (null === i ||
                void 0 === i ||
                null === (e = i.classTeachers) ||
                void 0 === e
                  ? void 0
                  : e.map((e) => e._id)) || [],
              active: (null === i || void 0 === i ? void 0 : i.active) || !1,
              isPublic:
                (null === i || void 0 === i ? void 0 : i.isPublic) || !1,
              orderSequence:
                (null === i || void 0 === i ? void 0 : i.orderSequence) ||
                a.length + 1,
              numericName:
                (null === i || void 0 === i ? void 0 : i.numericName) || "",
              note: (null === i || void 0 === i ? void 0 : i.note) || "",
            },
            onSubmit: async (e) => {
              try {
                const a = { ...e, schoolId: t._id };
                if ((c(!0), i)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.class.update + "/" + i._id,
                    a
                  );
                  x();
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.class.create, a);
                  x();
                }
                h();
              } catch (a) {
                console.log(a);
              }
              c(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Classes" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: sl,
              bodyDataModal: "class",
              bodyData: a,
              onEditClick: (e) => {
                s(e), r(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.class.delete + "/" + e);
                  x();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Class",
              onAddClick: () => {
                r(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: o,
              formik: p,
              formTitle: i ? "Update Class" : "Add Class",
              onClose: h,
              submitButtonTitle: i ? "Update" : "Submit",
              adding: d,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "name",
                      label: "Class Name",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: p,
                      name: "classTeachers",
                      label: "Class Teachers - (".concat(
                        p.values.classTeachers.length,
                        ")"
                      ),
                      required: !1,
                      showSearch: !0,
                      multiple: !0,
                      options: m,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: p,
                      name: "active",
                      label: "Active",
                      options: ol,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: p,
                      name: "isPublic",
                      label: "View On Web",
                      options: rl,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      disabled: !i,
                      formik: p,
                      name: "orderSequence",
                      label: "Order Sequence",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "numericName",
                      label: "Numeric Name",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const cl = [
        { name: "Section Name", key: "name" },
        { name: "Active", key: "active" },
        { name: "View On Web", key: "isPublic" },
      ];
      var ml = a(90469),
        ul = a(66360);
      function xl(e) {
        let {
          value: t,
          name: a = "",
          label: n = "",
          options: i = [],
          onChange: s = () => {},
          disabled: o = !1,
          required: r = !1,
          multiple: d = !1,
          isSearch: c = !0,
        } = e;
        const [m, u] = (0, l.useState)(!1);
        var x = (0, l.useRef)(void 0);
        const { isDarkMode: h } = (0, l.useContext)(st.A),
          [p, j] = (0, l.useState)(""),
          g = (0, l.useMemo)(
            () =>
              i.filter((e) =>
                ((e, t) =>
                  (null === e || void 0 === e
                    ? void 0
                    : e
                        .toLowerCase()
                        .indexOf(
                          null === t || void 0 === t ? void 0 : t.toLowerCase()
                        )) > -1)(e.label, p)
              ),
            [p, i, m]
          );
        (0, l.useEffect)(() => {
          j("");
        }, [m]);
        const A =
          o && !h
            ? "gray"
            : !o && h
            ? "white"
            : o || h
            ? o && h
              ? "gray"
              : "inherit"
            : "black";
        return (0, re.jsxs)(Ta.A, {
          margin: "normal",
          required: r,
          variant: "outlined",
          size: "small",
          fullWidth: !0,
          sx: { top: "4px" },
          children: [
            (0, re.jsx)(Ma.A, {
              sx: { color: A },
              shrink: !0,
              id: n,
              children: n,
            }),
            (0, re.jsxs)(Fa.A, {
              disabled: o,
              notched: !0,
              name: a,
              multiple: d,
              labelId: n,
              value: t || "",
              label: n,
              onChange: s,
              onAnimationEnd: () => {
                var e;
                return null === x ||
                  void 0 === x ||
                  null === (e = x.current) ||
                  void 0 === e
                  ? void 0
                  : e.focus();
              },
              MenuProps: { autoFocus: !1 },
              onBlur: () => u(!m),
              children: [
                c &&
                  (0, re.jsx)(ml.A, {
                    children: (0, re.jsx)(Mt.A, {
                      onBlur: () => u(!m),
                      size: "small",
                      autoFocus: !0,
                      placeholder: "Type to search...",
                      fullWidth: !0,
                      InputProps: {
                        startAdornment: (0, re.jsx)(Ft.A, {
                          position: "start",
                          children: (0, re.jsx)(ul.A, {}),
                        }),
                      },
                      onChange: (e) => j(e.target.value),
                      onKeyDown: (e) => {
                        "Escape" !== e.key && e.stopPropagation();
                      },
                    }),
                  }),
                g.map((e, t) =>
                  (0, re.jsx)(D.A, { value: e.value, children: e.label }, t)
                ),
              ],
            }),
          ],
        });
      }
      const hl = (0, l.memo)(xl),
        pl = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ],
        jl = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ];
      function gl() {
        var e, t;
        const { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)(null),
          [d, c] = (0, l.useState)(!1),
          [m, x] = (0, l.useState)(!1),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)([]),
          [A, y] = (0, l.useState)(""),
          [f, v] = (0, l.useState)([]),
          [b, S] = (0, l.useState)([]),
          k = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.section.list, {
                params: { schoolId: a._id, search: { class: A } },
              });
              i(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.employee.list, {
                params: { schoolId: a._id },
              });
              g(
                null === (e = t.result) || void 0 === e
                  ? void 0
                  : e
                      .filter((e) =>
                        e.role.name
                          .toLowerCase()
                          .match(new RegExp("Teacher", "i"))
                      )
                      .map((e) => ({ label: e.basicInfo.name, value: e._id }))
              );
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                var e;
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: a._id },
                });
                p(t.result.map((e) => ({ label: e.name, value: e._id }))),
                  null !== (e = t.result) &&
                    void 0 !== e &&
                    e.length &&
                    (y(t.result[0]._id),
                    D.setFieldValue("class", t.result[0]._id));
              } catch (t) {
                console.log(t);
              }
            })();
        }, [a]);
        const C = () => {
            c(!1), r(null);
          },
          D = (0, et.Wx)({
            initialValues: {
              name: (null === o || void 0 === o ? void 0 : o.name) || "",
              class:
                (null === o ||
                void 0 === o ||
                null === (e = o.class) ||
                void 0 === e
                  ? void 0
                  : e._id) || "",
              sectionTeacher:
                (null === o ||
                void 0 === o ||
                null === (t = o.sectionTeacher) ||
                void 0 === t
                  ? void 0
                  : t._id) || "",
              active: (null === o || void 0 === o ? void 0 : o.active) || !1,
              isPublic:
                (null === o || void 0 === o ? void 0 : o.isPublic) || !1,
              note: (null === o || void 0 === o ? void 0 : o.note) || "",
            },
            onSubmit: async (e) => {
              try {
                const t = { ...e, class: A, schoolId: a._id };
                if ((t.sectionTeacher || delete t.sectionTeacher, x(!0), o)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.section.update + "/" + o._id,
                    t
                  );
                  k();
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.section.create, t);
                  k();
                }
                C();
              } catch (t) {
                console.log(t);
              }
              x(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          A && k();
        }, [A, a]),
          (0, l.useEffect)(() => {
            D.values.class &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.subject.list, {
                    params: {
                      schoolId: a._id,
                      search: { class: D.values.class },
                    },
                  });
                  v(e.result), console.log(e.result, "rrrrrrrrr");
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [D.values.class, a]);
        return (
          (0, l.useEffect)(() => {
            D.setFieldValue("class", A);
          }, [A]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Section" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsx)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(hl, {
                      required: !0,
                      name: "selectedClass",
                      value: A,
                      onChange: (e) => {
                        y(e.target.value);
                      },
                      label: "Select Class",
                      options: h,
                    }),
                  }),
                }),
              }),
              (0, re.jsx)(jt.A, {
                actions: ["edit", "delete"],
                tableKeys: cl,
                bodyDataModal: "section",
                bodyData: n,
                onEditClick: (e) => {
                  r(e), c(!0);
                },
                onDeleteClick: async (e) => {
                  try {
                    await (0, Se.yH)(ke.r.section.delete + "/" + e);
                    k();
                  } catch (t) {
                    console.error(t);
                  }
                },
              }),
              (0, re.jsx)(rt, {
                title: "Add Section",
                onAddClick: () => {
                  c(!0);
                },
              }),
              (0, re.jsxs)(pt, {
                open: d,
                formik: D,
                formTitle: o ? "Update Section" : "Add Section",
                onClose: C,
                submitButtonTitle: o ? "Update" : "Add",
                adding: m,
                children: [
                  (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 1,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          formik: D,
                          name: "name",
                          label: "Section Name",
                          required: !0,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: D,
                          name: "class",
                          label: "Select Class",
                          required: !0,
                          options: h,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: D,
                          name: "sectionTeacher",
                          label: "Section Teacher",
                          options: j,
                          showSearch: !0,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: D,
                          name: "active",
                          label: "Active",
                          options: pl,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: D,
                          name: "isPublic",
                          label: "View On Web",
                          options: jl,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          formik: D,
                          name: "note",
                          label: "Note",
                        }),
                      }),
                    ],
                  }),
                  (0, re.jsxs)(s.A, {
                    sx: {
                      padding: "10px",
                      border: "1px solid lightgray",
                      borderRadius: "5px",
                    },
                    children: [
                      (0, re.jsx)(u.A, { children: "Select subject teachers" }),
                      f.map((e, t) =>
                        (0, re.jsxs)(
                          xe.Ay,
                          {
                            container: !0,
                            spacing: 2,
                            sx: {
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            },
                            children: [
                              (0, re.jsxs)(xe.Ay, {
                                item: !0,
                                xs: 12,
                                md: 3,
                                children: [
                                  " ",
                                  (0, re.jsx)(u.A, {
                                    sx: {
                                      fontSize: "14px",
                                      fontWeight: "bold",
                                    },
                                    children: e.name,
                                  }),
                                ],
                              }),
                              (0, re.jsx)(xe.Ay, {
                                item: !0,
                                xs: 12,
                                md: 8,
                                children: (0, re.jsx)(Xe.A, {
                                  formik: D,
                                  name: "subjectTeacher",
                                  label: "Select Teacher",
                                  options: j,
                                  showSearch: !0,
                                }),
                              }),
                            ],
                          },
                          e._id
                        )
                      ),
                    ],
                  }),
                ],
              }),
            ],
          })
        );
      }
      const Al = [
          { name: "Subject Name", key: "name" },
          { name: "Subject Code", key: "code" },
        ],
        yl = [
          { label: "Mandatory", value: "mandatory" },
          { label: "Optional", value: "optional" },
        ],
        fl = [
          { label: "Scholastic", value: "scholastic" },
          { label: "Co-scholastic", value: "co-scholastic" },
        ];
      function vl() {
        var e, t;
        const { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)(""),
          A = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.subject.list, {
                params: { schoolId: a._id, search: { class: j } },
              });
              i(e.result), console.log(e.result, "rrrrrrrrr");
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.employee.list, {
                params: { schoolId: a._id },
              });
              p(
                null === (e = t.result) || void 0 === e
                  ? void 0
                  : e
                      .filter((e) =>
                        e.role.name
                          .toLowerCase()
                          .match(new RegExp("Teacher", "i"))
                      )
                      .map((e) => ({ label: e.basicInfo.name, value: e._id }))
              );
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                var e;
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: a._id },
                });
                x(t.result.map((e) => ({ label: e.name, value: e._id }))),
                  null !== (e = t.result) &&
                    void 0 !== e &&
                    e.length &&
                    (g(t.result[0]._id),
                    f.setFieldValue("class", t.result[0]._id));
              } catch (t) {
                console.log(t);
              }
            })();
        }, [a, a._id]);
        const y = () => {
            d(!1), o(null);
          },
          f = (0, et.Wx)({
            initialValues: {
              name: (null === s || void 0 === s ? void 0 : s.name) || "",
              code: (null === s || void 0 === s ? void 0 : s.code) || "",
              subjectType:
                (null === s || void 0 === s ? void 0 : s.subjectType) || "",
              subjectGroup:
                (null === s || void 0 === s ? void 0 : s.subjectGroup) || "",
              class:
                (null === s ||
                void 0 === s ||
                null === (e = s.class) ||
                void 0 === e
                  ? void 0
                  : e._id) || "",
              subjectTeachers:
                (null === s ||
                void 0 === s ||
                null === (t = s.subjectTeachers) ||
                void 0 === t
                  ? void 0
                  : t.map((e) => e._id)) || [],
              note: (null === s || void 0 === s ? void 0 : s.note) || "",
            },
            onSubmit: async (e) => {
              try {
                const t = { ...e, class: j, schoolId: a._id };
                if ((m(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.subject.update + "/" + s._id,
                    t
                  );
                  A();
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.subject.create, t);
                  A();
                }
                y();
              } catch (t) {
                console.log(t);
              }
              m(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          console.log(j, "000000"), j ? (i([]), A()) : i([]);
        }, [j, a._id]);
        return (
          (0, l.useEffect)(() => {
            f.setFieldValue("class", j);
          }, [j]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Subject" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsx)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(hl, {
                      required: !0,
                      name: "selectedClass",
                      value: j,
                      onChange: (e) => {
                        g(e.target.value);
                      },
                      label: "Select Class",
                      options: u,
                    }),
                  }),
                }),
              }),
              (0, re.jsx)(jt.A, {
                actions: ["edit", "delete"],
                tableKeys: Al,
                bodyDataModal: "subject",
                bodyData: n,
                onEditClick: (e) => {
                  o(e), d(!0);
                },
                onDeleteClick: async (e) => {
                  try {
                    await (0, Se.yH)(ke.r.subject.delete + "/" + e);
                    A();
                  } catch (t) {
                    console.error(t);
                  }
                },
              }),
              (0, re.jsx)(rt, {
                title: "Add Subject",
                onAddClick: () => {
                  d(!0);
                },
              }),
              (0, re.jsx)(pt, {
                open: r,
                formik: f,
                formTitle: s ? "Update" : "Add Subject",
                onClose: y,
                submitButtonTitle: s ? "Update" : "Add",
                adding: c,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: f,
                        name: "name",
                        label: "Subject Name",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: f,
                        name: "code",
                        label: "Subject Code",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        formik: f,
                        name: "subjectType",
                        label: "Subject Type",
                        options: yl,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        formik: f,
                        name: "subjectGroup",
                        label: "Group",
                        options: fl,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        showSearch: !0,
                        multiple: !0,
                        formik: f,
                        name: "subjectTeachers",
                        label: "Subject Teachers-(".concat(
                          f.values.subjectTeachers.length,
                          ")"
                        ),
                        required: !0,
                        options: h,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: f,
                        name: "note",
                        label: "Note",
                      }),
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      const bl = [
        { name: "Student", key: "student" },
        { name: "Working Days", key: "workingDays" },
        { name: "Present Days", key: "presentDays" },
        { name: "Percentage", key: "percentagePresent" },
      ];
      var Sl = a(79306);
      function kl(e) {
        let {
          bodyData: t = [],
          date: a = new Date(Date.now()),
          setBodyData: n = () => {},
          bodyDataModal: i = "Attendance data",
          isDataReady: o = !0,
          classId: r,
        } = e;
        const [d, c] = (0, l.useState)(!1),
          { selectedSetting: m } = (0, l.useContext)(Ce.A),
          u = (e, a) => {
            n(
              t.map((t) =>
                t.student._id == e ? { ...t, attendanceStatus: a } : t
              )
            );
          },
          x = (e) => {
            n(t.map((t) => ({ ...t, attendanceStatus: e })));
          };
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(na.A, {
            component: ue.A,
            children: [
              (0, re.jsxs)(ia.A, {
                children: [
                  (0, re.jsx)(sa.A, {
                    sx: {
                      backgroundColor: (e) =>
                        "dark" === e.palette.mode
                          ? e.palette.primary.dark
                          : e.palette.primary.light,
                    },
                    children: (0, re.jsxs)(oa.A, {
                      children: [
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "S.No",
                        }),
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "Name",
                        }),
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "Roll Number",
                        }),
                        (0, re.jsxs)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: [
                            "Present All",
                            " ",
                            (0, re.jsx)(da.A, {
                              checked: !t.find((e) =>
                                ["absent", "late"].includes(e.attendanceStatus)
                              ),
                              onChange: () => x("present"),
                              inputProps: { "aria-label": "controlled" },
                            }),
                          ],
                        }),
                        (0, re.jsxs)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: [
                            "Absent All",
                            " ",
                            (0, re.jsx)(da.A, {
                              checked: !t.find((e) =>
                                ["present", "late"].includes(e.attendanceStatus)
                              ),
                              onChange: () => x("absent"),
                              inputProps: { "aria-label": "controlled" },
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(ca.A, {
                    children: t.length
                      ? t.map((e, t) => {
                          var a, l, n, i;
                          return (0, re.jsxs)(
                            oa.A,
                            {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: t + 1,
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children:
                                    null === (a = e.student) ||
                                    void 0 === a ||
                                    null === (l = a.basicInfo) ||
                                    void 0 === l
                                      ? void 0
                                      : l.name,
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children:
                                    null === (n = e.student) ||
                                    void 0 === n ||
                                    null === (i = n.academicInfo) ||
                                    void 0 === i
                                      ? void 0
                                      : i.rollNumber,
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsx)(da.A, {
                                    checked: "present" === e.attendanceStatus,
                                    onChange: () => {
                                      var t;
                                      return u(
                                        null === e ||
                                          void 0 === e ||
                                          null === (t = e.student) ||
                                          void 0 === t
                                          ? void 0
                                          : t._id,
                                        "present"
                                      );
                                    },
                                    inputProps: { "aria-label": "controlled" },
                                  }),
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsx)(da.A, {
                                    checked: "absent" === e.attendanceStatus,
                                    onChange: () => {
                                      var t;
                                      return u(
                                        null === e ||
                                          void 0 === e ||
                                          null === (t = e.student) ||
                                          void 0 === t
                                          ? void 0
                                          : t._id,
                                        "absent"
                                      );
                                    },
                                    inputProps: { "aria-label": "controlled" },
                                  }),
                                }),
                              ],
                            },
                            e._id
                          );
                        })
                      : null,
                  }),
                ],
              }),
              o ? (0, re.jsx)(Sl.A, { dataPresent: t.length, title: i }) : null,
              t.length
                ? (0, re.jsx)(s.A, {
                    sx: {
                      display: "flex",
                      justifyContent: "flex-end",
                      padding: "5px 10px",
                      alignItems: "center",
                    },
                    children: (0, re.jsx)(ht.A, {
                      variant: "contained",
                      loading: d,
                      onClick: async () => {
                        try {
                          c(!0);
                          const { data: e } = await (0, Se.yJ)(
                            ke.r.studentAttendance.update,
                            {
                              attendanceData: t.map((e) => ({
                                ...e,
                                student: e.student._id,
                              })),
                              date: a,
                              schoolId: m._id,
                              classId: r,
                            }
                          );
                        } catch (e) {
                          console.log(e);
                        }
                        c(!1);
                      },
                      size: "small",
                      children: "Update",
                    }),
                  })
                : null,
            ],
          }),
        });
      }
      var Cl = a(72450);
      function Dl() {
        let e = arguments.length > 2 ? arguments[2] : void 0;
        const t = new Blob([arguments.length > 1 ? arguments[1] : void 0], {
          type:
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        });
        (0, Cl.saveAs)(t, e);
      }
      function wl(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
          a =
            !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
          l = !0;
        for (const n in e)
          t.includes(n) ||
            e[n] ||
            ((l = !1),
            a && Ba.oR.error('Value for "'.concat(n, '" is missing!')));
        return l;
      }
      function Il() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)(0),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [x, h] = (0, l.useState)([]),
          [p, j] = (0, l.useState)(!1),
          [g, A] = (0, l.useState)([]),
          [y, f] = (0, l.useState)(!1),
          [v, b] = (0, l.useState)(!1),
          [S, k] = l.useState(0),
          [C, D] = l.useState(10),
          w = (0, et.Wx)({
            initialValues: {
              class: "",
              section: "",
              date: Be()(new Date()).format("YYYY/MM/DD"),
            },
            onSubmit: async (t) => {
              try {
                j(!0);
                const { data: a } = await (0, Se.Jt)(
                  ke.r.studentAttendance.list,
                  {
                    params: {
                      schoolId: e._id,
                      classId: t.class,
                      sectionId: t.section,
                      date: Be()(t.date).format("YYYY-MM-DD"),
                    },
                  }
                );
                A(a.result);
              } catch (a) {
                console.log(a);
              }
              j(!1);
            },
          });
        (0, l.useEffect)(() => {
          A([]);
        }, [w.values]);
        const I = async (t) => {
            try {
              const { data: a } = await (0, Se.Jt)(
                ke.r.studentAttendance.getAttendanceOverview,
                {
                  params: {
                    schoolId: e._id,
                    date: Be()(t.date).format("YYYY/MM/DD"),
                    classId: t.class,
                  },
                }
              );
              i(a.result);
            } catch (a) {
              console.log(a);
            }
          },
          N = (0, et.Wx)({
            initialValues: {
              class: "",
              date: Be()(new Date()).format("YYYY/MM/DD"),
            },
            onSubmit: I,
          });
        (0, l.useEffect)(() => {
          N.values.class && N.values.date && I(N.values);
        }, [N.values.class, N.values.date]);
        const _ = (0, et.Wx)({
          initialValues: {
            academicYear: "",
            class: "",
            section: "",
            month: null,
          },
          onSubmit: async (t) => {
            try {
              b(!0);
              const { data: l } = await (0, Se.Jt)(
                ke.r.studentAttendance.getAttendanceReport,
                {
                  params: {
                    schoolId: e._id,
                    academicYearId: t.academicYear,
                    classId: t.class,
                    sectionId: t.section,
                    month: Be()(new Date(t.month)).get("month") + 1,
                    year: Be()(new Date(t.month)).get("year"),
                  },
                }
              );
              a(l.result), b(!1);
            } catch (l) {
              console.log(l), b(!1);
            }
          },
          enableReinitialize: !0,
        });
        return (
          (0, l.useEffect)(() => {
            (N.values.class || w.values.class || _.values.class) &&
              (async () => {
                try {
                  var t, a;
                  const { data: l } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        class:
                          N.values.class || w.values.class || _.values.class,
                      },
                    },
                  });
                  h(
                    l.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    w.setFieldValue(
                      "section",
                      null === (t = l.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    ),
                    _.setFieldValue(
                      "section",
                      null === (a = l.result[0]) || void 0 === a
                        ? void 0
                        : a._id
                    );
                } catch (l) {
                  console.log(l);
                }
              })();
          }, [N.values.class, w.values.class, _.values.class, e._id]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                d(
                  e.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                ),
                  _.setFieldValue("academicYear", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  var t, a, l;
                  const { data: n } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  });
                  m(
                    n.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    N.setFieldValue(
                      "class",
                      null === (t = n.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    ),
                    w.setFieldValue(
                      "class",
                      null === (a = n.result[0]) || void 0 === a
                        ? void 0
                        : a._id
                    ),
                    _.setFieldValue(
                      "class",
                      null === (l = n.result[0]) || void 0 === l
                        ? void 0
                        : l._id
                    );
                } catch (n) {
                  console.log(n);
                }
              })();
          }, [e._id]),
          (0, l.useEffect)(() => {
            w.resetForm(), _.resetForm(), N.resetForm();
          }, [s]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Student Attedance" }),
              (0, re.jsx)(kt.A, {
                onChange: (e, t) => {
                  o(t);
                },
                value: s,
                labels: ["Overview", "Attedance", "Report"],
              }),
              (0, re.jsxs)(Ct.A, {
                index: 0,
                value: s,
                children: [
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "class",
                            formik: N,
                            label: "Select Class",
                            options: c,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            disableFutureDates: !0,
                            formik: N,
                            label: "Date",
                            name: "date",
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsxs)(na.A, {
                    component: ue.A,
                    children: [
                      (0, re.jsxs)(ia.A, {
                        children: [
                          (0, re.jsx)(sa.A, {
                            sx: {
                              backgroundColor: (e) =>
                                "dark" === e.palette.mode
                                  ? e.palette.primary.dark
                                  : e.palette.primary.light,
                            },
                            children: (0, re.jsxs)(oa.A, {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  sx: { fontWeight: "bold" },
                                  children: "Section",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  sx: { fontWeight: "bold" },
                                  children: "Present",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  sx: { fontWeight: "bold" },
                                  children: "Absent",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  sx: { fontWeight: "bold" },
                                  children: "Percentage",
                                }),
                              ],
                            }),
                          }),
                          (0, re.jsx)(ca.A, {
                            children: n.slice(S * C, S * C + C).map((t, a) =>
                              (0, re.jsxs)(
                                oa.A,
                                {
                                  children: [
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: t.sectionInfo.name,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: t.totalPresent,
                                    }),
                                    (0, re.jsxs)(ra.A, {
                                      align: "center",
                                      children: [
                                        t.totalAbsent,
                                        (0, re.jsx)(ht.A, {
                                          size: "small",
                                          loading: y,
                                          variant: "contained",
                                          sx: { ml: 1 },
                                          onClick: () =>
                                            (async (t) => {
                                              try {
                                                f(!0);
                                                const { data: a } = await (0,
                                                Se.Jt)(
                                                  ke.r.studentAttendance
                                                    .donwloadAbsentReport,
                                                  {
                                                    params: {
                                                      schoolId: e._id,
                                                      date: Be()(
                                                        w.values.date
                                                      ).format("YYYY-MM-DD"),
                                                      classId:
                                                        t.sectionInfo.class,
                                                      sectionId: t.section,
                                                    },
                                                    responseType: "blob",
                                                  }
                                                );
                                                Dl(
                                                  "application/pdf",
                                                  a,
                                                  "student-absent-list"
                                                ),
                                                  f(!1);
                                              } catch (a) {
                                                f(!1);
                                              }
                                            })(t),
                                          children: "Download",
                                        }),
                                      ],
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: t.percentage,
                                    }),
                                  ],
                                },
                                t._id
                              )
                            ),
                          }),
                        ],
                      }),
                      !n.length &&
                        (0, re.jsx)(u.A, {
                          variant: "h6",
                          sx: {
                            textAlign: "center",
                            margin: "5px",
                            padding: "5px",
                          },
                          children: "No data found",
                        }),
                      (0, re.jsx)(Ua.A, {
                        rowsPerPageOptions: [10, 25, 50],
                        component: "div",
                        count: n.length,
                        rowsPerPage: C,
                        page: S,
                        onPageChange: (e, t) => {
                          k(t);
                        },
                        onRowsPerPageChange: (e) => {
                          D(+e.target.value), k(0);
                        },
                      }),
                    ],
                  }),
                ],
              }),
              (0, re.jsxs)(Ct.A, {
                index: 1,
                value: s,
                children: [
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "class",
                            formik: w,
                            label: "Select Class",
                            options: c,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "section",
                            formik: w,
                            label: "Select Section",
                            options: x,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            disableFutureDates: !0,
                            formik: w,
                            label: "Date",
                            name: "date",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 3,
                          lg: 3,
                          item: !0,
                          sx: { alignSelf: "center" },
                          children: (0, re.jsx)(ht.A, {
                            loading: p,
                            onClick: w.handleSubmit,
                            size: "small",
                            variant: "contained",
                            children: "Find",
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(kl, {
                    date: w.values.date,
                    bodyData: g,
                    setBodyData: A,
                    classId: w.values.class,
                  }),
                ],
              }),
              (0, re.jsxs)(Ct.A, {
                index: 2,
                value: s,
                children: [
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "academicYear",
                            formik: _,
                            label: "Select Academic Year",
                            options: r,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "class",
                            formik: _,
                            label: "Select Class",
                            options: c,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "section",
                            formik: _,
                            label: "Select Section",
                            options: x,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            disableFutureDates: !0,
                            formik: _,
                            label: "Month",
                            name: "month",
                            openTo: "month",
                            inputFormat: "MMM",
                            views: ["month"],
                            required: !0,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 12,
                          lg: 12,
                          item: !0,
                          display: "flex",
                          gap: 1,
                          justifyContent: "flex-end",
                          children: (0, re.jsx)(ht.A, {
                            loading: v,
                            onClick: _.handleSubmit,
                            size: "small",
                            variant: "contained",
                            children: "Find",
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(jt.A, {
                    actions: [],
                    bodyDataModal: "reports",
                    bodyData: t,
                    tableKeys: bl,
                  }),
                ],
              }),
            ],
          })
        );
      }
      const Nl = [
        { name: "Employee Name", key: "employee" },
        { name: "Working Days", key: "workingDays" },
        { name: "Present Days", key: "presentDays" },
        { name: "Percentage", key: "percentagePresent" },
      ];
      function _l(e) {
        let {
          bodyData: t = [],
          date: a = new Date(Date.now()),
          setBodyData: n = () => {},
          bodyDataModal: i = "Attendance data",
          isDataReady: o = !0,
        } = e;
        const [r, d] = (0, l.useState)(!1),
          { selectedSetting: c } = (0, l.useContext)(Ce.A),
          m = (e, a) => {
            n(
              t.map((t) =>
                t.employee._id == e ? { ...t, attendanceStatus: a } : t
              )
            );
          },
          u = (e) => {
            n(t.map((t) => ({ ...t, attendanceStatus: e })));
          };
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(na.A, {
            component: ue.A,
            children: [
              (0, re.jsxs)(ia.A, {
                children: [
                  (0, re.jsx)(sa.A, {
                    sx: {
                      backgroundColor: (e) =>
                        "dark" === e.palette.mode
                          ? e.palette.primary.dark
                          : e.palette.primary.light,
                    },
                    children: (0, re.jsxs)(oa.A, {
                      children: [
                        (0, re.jsx)(ra.A, {
                          align: "center",
                          sx: { fontWeight: "bold" },
                          children: "S.No",
                        }),
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "Name",
                        }),
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "Employee Id",
                        }),
                        (0, re.jsxs)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: [
                            "Present All",
                            " ",
                            (0, re.jsx)(da.A, {
                              checked: !t.find((e) =>
                                ["absent", "late"].includes(e.attendanceStatus)
                              ),
                              onChange: () => u("present"),
                              inputProps: { "aria-label": "controlled" },
                            }),
                          ],
                        }),
                        (0, re.jsxs)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: [
                            "Absent All",
                            " ",
                            (0, re.jsx)(da.A, {
                              checked: !t.find((e) =>
                                ["present", "late"].includes(e.attendanceStatus)
                              ),
                              onChange: () => u("absent"),
                              inputProps: { "aria-label": "controlled" },
                            }),
                          ],
                        }),
                        (0, re.jsxs)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: [
                            "Late All",
                            " ",
                            (0, re.jsx)(da.A, {
                              checked: !t.find((e) =>
                                ["present", "absent"].includes(
                                  e.attendanceStatus
                                )
                              ),
                              onChange: () => u("late"),
                              inputProps: { "aria-label": "controlled" },
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(ca.A, {
                    children: t.length
                      ? t.map((e, t) => {
                          var a, l, n, i;
                          return (0, re.jsxs)(
                            oa.A,
                            {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: t + 1,
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children:
                                    null === (a = e.employee) ||
                                    void 0 === a ||
                                    null === (l = a.basicInfo) ||
                                    void 0 === l
                                      ? void 0
                                      : l.name,
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children:
                                    null === (n = e.employee) ||
                                    void 0 === n ||
                                    null === (i = n.basicInfo) ||
                                    void 0 === i
                                      ? void 0
                                      : i.empId,
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsx)(da.A, {
                                    checked: "present" === e.attendanceStatus,
                                    onChange: () => {
                                      var t;
                                      return m(
                                        null === e ||
                                          void 0 === e ||
                                          null === (t = e.employee) ||
                                          void 0 === t
                                          ? void 0
                                          : t._id,
                                        "present"
                                      );
                                    },
                                    inputProps: { "aria-label": "controlled" },
                                  }),
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsx)(da.A, {
                                    checked: "absent" === e.attendanceStatus,
                                    onChange: () => {
                                      var t;
                                      return m(
                                        null === e ||
                                          void 0 === e ||
                                          null === (t = e.employee) ||
                                          void 0 === t
                                          ? void 0
                                          : t._id,
                                        "absent"
                                      );
                                    },
                                    inputProps: { "aria-label": "controlled" },
                                  }),
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsx)(da.A, {
                                    checked: "late" === e.attendanceStatus,
                                    onChange: () => {
                                      var t;
                                      return m(
                                        null === e ||
                                          void 0 === e ||
                                          null === (t = e.employee) ||
                                          void 0 === t
                                          ? void 0
                                          : t._id,
                                        "late"
                                      );
                                    },
                                    inputProps: { "aria-label": "controlled" },
                                  }),
                                }),
                              ],
                            },
                            e._id
                          );
                        })
                      : null,
                  }),
                ],
              }),
              o ? (0, re.jsx)(Sl.A, { dataPresent: t.length, title: i }) : null,
              t.length
                ? (0, re.jsx)(s.A, {
                    sx: {
                      display: "flex",
                      justifyContent: "flex-end",
                      padding: "5px 10px",
                      alignItems: "center",
                    },
                    children: (0, re.jsx)(ht.A, {
                      variant: "contained",
                      loading: r,
                      onClick: async () => {
                        try {
                          d(!0);
                          const { data: e } = await (0, Se.yJ)(
                            ke.r.employeeAttendance.update,
                            {
                              attendanceData: t.map((e) => ({
                                ...e,
                                employee: e.employee._id,
                              })),
                              date: a,
                              schoolId: c._id,
                            }
                          );
                        } catch (e) {
                          console.log(e);
                        }
                        d(!1);
                      },
                      size: "small",
                      children: "Update",
                    }),
                  })
                : null,
            ],
          }),
        });
      }
      function Tl() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(0),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)(!1);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.role.list),
                t = e.result
                  .filter((e) => {
                    var t;
                    return (
                      "student" !==
                      (null === (t = e.name) || void 0 === t
                        ? void 0
                        : t.toLowerCase())
                    );
                  })
                  .map((e) => ({ label: e.name, value: e._id }));
              o(t);
            } catch (e) {
              console.log(e);
            }
          })();
        }, []);
        const h = (0, et.Wx)({
          initialValues: { role: "", date: Be()(new Date()) },
          onSubmit: async (t) => {
            try {
              m(!0);
              const { data: a } = await (0, Se.Jt)(
                ke.r.employeeAttendance.list,
                { params: { schoolId: e._id, roleId: t.role, date: t.date } }
              );
              d(a.result);
            } catch (a) {
              console.log(a);
            }
            m(!1);
          },
        });
        (0, l.useEffect)(() => {
          h.values.date && h.values.role && (d([]), h.handleSubmit());
        }, [h.values, e._id]);
        const p = (0, et.Wx)({
          initialValues: {
            role: "",
            date: Be()(new Date()),
            fromDate: Be()(new Date()),
            toDate: Be()(new Date()),
          },
          onSubmit: async (t) => {
            try {
              x(!0);
              const { data: l } = await (0, Se.Jt)(
                ke.r.employeeAttendance.getAttendanceReport,
                {
                  params: {
                    schoolId: e._id,
                    roleId: t.role,
                    fromDate: t.fromDate,
                    toDate: t.toDate,
                  },
                }
              );
              a(l.result);
            } catch (l) {
              console.log(l);
            }
            x(!1);
          },
        });
        return (
          (0, l.useEffect)(() => {
            p.values.fromDate &&
              p.values.role &&
              p.values.toDate &&
              (a([]), p.handleSubmit());
          }, [p.values, e._id]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Employee Attedance" }),
              (0, re.jsx)(kt.A, {
                onChange: (e, t) => {
                  i(t);
                },
                value: n,
                labels: ["Attedance", "Report"],
              }),
              (0, re.jsxs)(Ct.A, {
                index: 0,
                value: n,
                children: [
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "role",
                            formik: h,
                            label: "Select Roles",
                            options: s,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            disableFutureDates: !0,
                            formik: h,
                            label: "Date",
                            name: "date",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          style: { alignSelf: "center" },
                          item: !0,
                          children: (0, re.jsx)(ht.A, {
                            loading: c,
                            onClick: h.handleSubmit,
                            size: "small",
                            variant: "contained",
                            children: "Find",
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(_l, {
                    date: h.values.date,
                    bodyData: r,
                    setBodyData: d,
                  }),
                ],
              }),
              (0, re.jsxs)(Ct.A, {
                index: 1,
                value: n,
                children: [
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "role",
                            formik: p,
                            label: "Select Roles",
                            options: s,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            disableFutureDates: !0,
                            formik: p,
                            label: "From Date",
                            name: "fromDate",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            disableFutureDates: !0,
                            formik: p,
                            label: "To Date",
                            name: "toDate",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          style: { alignSelf: "center" },
                          item: !0,
                          children: (0, re.jsx)(ht.A, {
                            onClick: p.handleSubmit,
                            loading: u,
                            size: "small",
                            variant: "contained",
                            children: "Find",
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(jt.A, {
                    actions: [],
                    bodyDataModal: "reports",
                    bodyData: t,
                    tableKeys: Nl,
                  }),
                ],
              }),
            ],
          })
        );
      }
      function Ml() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(!1),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [x, h] = (0, l.useState)(null),
          [p, j] = (0, l.useState)(!1),
          g = (0, et.Wx)({
            initialValues: {
              class: "",
              section: "",
              subject: "",
              teacher: "",
              roomNo: "",
              startTime: "",
              endTime: "",
            },
            onSubmit: console.log("nnnnnnn"),
          }),
          A = (0, et.Wx)({
            initialValues: { class: "" },
            onSubmit: console.log("nnnnnnn"),
          });
        return (
          (0, l.useEffect)(() => {
            g.values.class &&
              ((async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: g.values.class },
                    },
                  });
                  g.setFieldValue(
                    "section",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  ),
                    o(
                      a.result.map((e) => ({
                        ...e,
                        label: e.name,
                        value: e._id,
                      }))
                    );
                } catch (a) {
                  console.log(a);
                }
              })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.subject.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: g.values.class },
                    },
                  });
                  d(t.result.map((e) => ({ label: e.name, value: e._id }))),
                    g.setFieldValue("subject", t.result[0]._id);
                } catch (t) {
                  console.error(t);
                }
              })());
          }, [g.values.class]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                i(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  A.setFieldValue("class", t.result[0]._id),
                  g.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })(),
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.employee.list, {
                    params: { schoolId: e._id },
                  });
                  m(
                    null === (t = a.result) || void 0 === t
                      ? void 0
                      : t
                          .filter((e) =>
                            e.role.name
                              .toLowerCase()
                              .match(new RegExp("Teacher", "i"))
                          )
                          .map((e) => ({
                            label: e.basicInfo.name,
                            value: e._id,
                          }))
                  );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [e._id]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Class Routine" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsx)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: A,
                      label: "Select Class",
                      options: n,
                    }),
                  }),
                }),
              }),
              (0, re.jsx)(u.A, {
                component: "h1",
                sx: { fontWeight: "bold", mt: 1 },
                children: "Sections",
              }),
              (0, re.jsx)(rt, {
                title: "Add Class Routine",
                onAddClick: () => {
                  a(!0);
                },
              }),
              (0, re.jsx)(pt, {
                open: t,
                formik: g,
                formTitle: x ? "Update Class Routine" : "Add Routine",
                onClose: () => {
                  a(!1), h(null);
                },
                submitButtonTitle: x ? "Update" : "Submit",
                adding: p,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: g,
                        name: "class",
                        label: "Class",
                        required: !0,
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: g,
                        name: "section",
                        label: "Section",
                        required: !0,
                        options: s,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: g,
                        name: "subject",
                        label: "Subject",
                        required: !0,
                        options: r,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: g,
                        name: "teacher",
                        label: "Teacher",
                        required: !0,
                        options: c,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: g,
                        name: "roomNo",
                        label: "Room Number",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: g,
                        name: "startTime",
                        label: "Start Time",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: g,
                        name: "endTime",
                        label: "End Time",
                      }),
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      const Fl = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            backgroundColor: t.palette.primary.dark,
            borderRadius: "5px",
            padding: "2px 5px",
            width: "60px",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
          };
        }),
        zl = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
          };
        });
      function El(e) {
        let { title: t = "", count: a = 0, showTitle: l = !1 } = e;
        return (0, re.jsxs)(b.A, {
          direction: "row",
          columnGap: l ? 1 : 0,
          children: [
            l
              ? (0, re.jsx)(Fl, {
                  children: (0, re.jsx)(u.A, {
                    sx: {
                      fontSize: "14px",
                      color: "white",
                      fontWeight: "bold",
                    },
                    children: t,
                  }),
                })
              : null,
            (0, re.jsx)(zl, {
              children: (0, re.jsx)(u.A, {
                sx: { fontSize: "14px", fontWeight: "bold" },
                children: a,
              }),
            }),
          ],
        });
      }
      const ql = (0, n.Ay)(ra.A)((e) => {
          let { theme: t } = e;
          return { borderRight: "1px solid grey" };
        }),
        Yl = (0, n.Ay)(x.A)((e) => {
          let { theme: t } = e;
          return { borderBottomColor: "grey", width: "100%" };
        }),
        Wl = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            marginTop: "52px",
            display: "flex",
            rowGap: "2px",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            paddingBottom: "10px",
          };
        });
      function Rl() {
        var e;
        const { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, o] = (0, l.useState)(""),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(0),
          [u, h] = (0, l.useState)(0),
          [p, j] = (0, l.useState)(0),
          [g, A] = (0, l.useState)(!1);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.academicYear.list);
              n(
                t.result.map((e) => ({
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                o(null === (e = t.result[0]) || void 0 === e ? void 0 : e._id);
            } catch (t) {
              console.log(t);
            }
          })();
        }, [t]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                if (i) {
                  const { data: e } = await (0, Se.Jt)(ke.r.student.overView, {
                    params: { schoolId: t._id, academicYear: i },
                  });
                  d(null === e || void 0 === e ? void 0 : e.result),
                    m(e.result.totalStudentsCount),
                    h(e.result.totalMaleStudentsCount),
                    j(e.result.totalFemaleStudentsCount);
                }
              } catch (e) {
                console.log(e);
              }
            })();
          }, [i, t]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Overview" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                container: !0,
                spacing: 2,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 3,
                    children: (0, re.jsx)(hl, {
                      required: !0,
                      name: "academicYear",
                      value: i,
                      onChange: (e) => o(e.target.value),
                      label: "Select Academic Year",
                      options: a,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 3,
                    sx: { alignSelf: "center", mt: 2 },
                    children: (0, re.jsx)(S.A, {
                      title: "Download",
                      children: (0, re.jsx)(ht.A, {
                        loading: g,
                        size: "small",
                        variant: "contained",
                        onClick: async () => {
                          try {
                            A(!0);
                            Dl(
                              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                              (
                                await (0, Se.Jt)(
                                  ke.r.student.downloadAllStudentsExcel,
                                  {
                                    params: {
                                      schoolId: t._id,
                                      academicYearId: i,
                                    },
                                    responseType: "blob",
                                  }
                                )
                              ).data,
                              "student.xlsx"
                            ),
                              A(!1);
                          } catch (e) {
                            A(!1), console.log(e);
                          }
                        },
                        children: "Download Students",
                      }),
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(s.A, {
              sx: { fontSize: { md: "15px", sm: "12px" }, padding: "1.2rem" },
              children: (0, re.jsxs)(s.A, {
                sx: { display: "flex", gap: "1rem" },
                children: [
                  (0, re.jsxs)(s.A, { children: ["Total Students:", c] }),
                  (0, re.jsxs)(s.A, { children: ["Total Male Students:", u] }),
                  (0, re.jsxs)(s.A, {
                    children: ["Total Female Students:", p],
                  }),
                ],
              }),
            }),
            (0, re.jsx)(na.A, {
              component: ue.A,
              children: (0, re.jsxs)(ia.A, {
                children: [
                  (0, re.jsx)(sa.A, {
                    sx: {
                      backgroundColor: (e) =>
                        "dark" === e.palette.mode
                          ? e.palette.primary.dark
                          : e.palette.primary.light,
                    },
                    children: (0, re.jsxs)(oa.A, {
                      children: [
                        (0, re.jsx)(ql, {
                          align: "center",
                          sx: { fontWeight: "bold" },
                          children: "Class",
                        }),
                        (0, re.jsx)(ql, {
                          align: "center",
                          sx: { fontWeight: "bold" },
                          children: "Students",
                        }),
                        (0, re.jsx)(ql, {
                          align: "center",
                          sx: { fontWeight: "bold" },
                          children: "Sections",
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(ca.A, {
                    children:
                      null === r ||
                      void 0 === r ||
                      null === (e = r.data) ||
                      void 0 === e
                        ? void 0
                        : e.map((e, t) =>
                            (0, re.jsxs)(
                              oa.A,
                              {
                                children: [
                                  (0, re.jsx)(ra.A, {
                                    sx: { borderRight: "1px solid grey" },
                                    align: "center",
                                    children: e.name,
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    sx: {
                                      borderRight: "1px solid grey",
                                      padding: 0,
                                    },
                                    align: "center",
                                    children: (0, re.jsxs)(Wl, {
                                      children: [
                                        (0, re.jsx)(El, {
                                          showTitle: !0,
                                          title: "Male",
                                          count: e.maleStudents,
                                        }),
                                        (0, re.jsx)(Yl, {}),
                                        (0, re.jsx)(El, {
                                          showTitle: !0,
                                          title: "Female",
                                          count: e.femaleStudents,
                                        }),
                                        (0, re.jsx)(Yl, {}),
                                        (0, re.jsx)(El, {
                                          showTitle: !0,
                                          title: "Total",
                                          count: e.totalStudents,
                                        }),
                                      ],
                                    }),
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "left",
                                    children: (0, re.jsx)(na.A, {
                                      component: ue.A,
                                      children: (0, re.jsxs)(ia.A, {
                                        size: "small",
                                        children: [
                                          (0, re.jsx)(sa.A, {
                                            sx: {
                                              backgroundColor: (e) =>
                                                "dark" === e.palette.mode
                                                  ? e.palette.primary.dark
                                                  : e.palette.primary.light,
                                            },
                                            children: (0, re.jsx)(oa.A, {
                                              children: e.sections.map((e, t) =>
                                                (0, re.jsx)(ra.A, {
                                                  align: "left",
                                                  children: e.section,
                                                })
                                              ),
                                            }),
                                          }),
                                          (0, re.jsx)(ca.A, {
                                            children: (0, re.jsx)(oa.A, {
                                              children: e.sections.map((e, t) =>
                                                (0, re.jsx)(
                                                  ra.A,
                                                  {
                                                    align: "left",
                                                    children: (0, re.jsxs)(
                                                      s.A,
                                                      {
                                                        sx: {
                                                          display: "flex",
                                                          rowGap: "2px",
                                                          flexDirection:
                                                            "column",
                                                        },
                                                        children: [
                                                          (0, re.jsx)(El, {
                                                            title: "Male",
                                                            count: e.maleCount,
                                                          }),
                                                          (0, re.jsx)(x.A, {
                                                            sx: {
                                                              background:
                                                                "grey",
                                                            },
                                                          }),
                                                          (0, re.jsx)(El, {
                                                            title: "Female",
                                                            count:
                                                              e.femaleCount,
                                                          }),
                                                          (0, re.jsx)(x.A, {
                                                            sx: {
                                                              background:
                                                                "grey",
                                                            },
                                                          }),
                                                          (0, re.jsx)(El, {
                                                            title: "Total",
                                                            count: e.count,
                                                          }),
                                                        ],
                                                      }
                                                    ),
                                                  },
                                                  t
                                                )
                                              ),
                                            }),
                                          }),
                                        ],
                                      }),
                                    }),
                                  }),
                                ],
                              },
                              e.className
                            )
                          ),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      var Pl = a(26225),
        Jl = a(95676);
      const Vl = [
        { name: "Photo", key: "photo", type: "image" },
        { name: "Name", key: "name", path: "basicInfo" },
        { name: "Active", key: "active" },
        { name: "Section", key: "name", path: "section" },
        { name: "Roll No", key: "rollNumber", path: "rollNumber" },
        { name: "Admission No", key: "admissionNumber", path: "academicInfo" },
      ];
      var Bl = a(41132),
        Ol = a(95855);
      const Ll = [
          { label: "Active", value: !0 },
          { label: "In-Active", value: !1 },
        ],
        Ul = { bgcolor: "background.paper", height: "auto", p: 2 };
      function Hl() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          t = (0, _.Zp)(),
          a = (0, i.A)(),
          n = (0, dt.A)(a.breakpoints.down("sm")),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          [m, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)(!1),
          [A, y] = (0, l.useState)(!1),
          [f, v] = (0, l.useState)(!1),
          [k, C] = (0, l.useState)(!1),
          [D, w] = (0, l.useState)([]),
          [I, N] = (0, l.useState)([]),
          T = (e, t) => {
            const { files: a } = e.target;
            let l = [];
            if (a.length > 0) {
              for (let e = 0; e < a.length; e++) {
                const t = a[e];
                l.push(t);
              }
              "admitFile" === t ? N(l) : "updateFile" === t && w(l);
            } else console.log("No files selected");
          },
          M = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              class: "",
              section: "all",
              active: !0,
            },
            onSubmit: async (t) => {
              try {
                if ("all" === t.section) {
                  const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        academicYear: t.academicYear,
                        "academicInfo.class": t.class,
                        active: t.active,
                      },
                    },
                  });
                  r(
                    a.result.map((e) => ({
                      ...e,
                      section: e.academicInfo.section,
                      rollNumber: e.academicInfo,
                    }))
                  );
                } else {
                  const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        academicYear: t.academicYear,
                        "academicInfo.class": t.class,
                        "academicInfo.section": t.section,
                        active: t.active,
                      },
                    },
                  });
                  r(
                    a.result.map((e) => ({
                      ...e,
                      section: e.academicInfo.section,
                      rollNumber: e.academicInfo,
                    }))
                  );
                }
              } catch (a) {
                console.log(a);
              }
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.academicYear.list);
              c(
                t.result.map((e) => ({
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                M.setFieldValue(
                  "academicYear",
                  null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                var t;
                const { data: a } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                x(a.result.map((e) => ({ label: e.name, value: e._id }))),
                  M.setFieldValue(
                    "class",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })();
        }, [e._id]),
          (0, l.useEffect)(() => {
            M.values.class &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                      params: {
                        schoolId: e._id,
                        search: { class: M.values.class },
                      },
                    }),
                    a = [
                      { label: "All", value: "all" },
                      ...t.result.map((e) => ({ label: e.name, value: e._id })),
                    ];
                  p(a), M.setFieldValue("section", "all");
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [M.values.class, e._id]),
          (0, l.useEffect)(() => {
            M.values.academicYear &&
              M.values.class &&
              M.values.section &&
              M.handleSubmit();
          }, [M.values, e._id]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Students" }),
            (0, re.jsxs)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: [
                (0, re.jsx)("form", {
                  onSubmit: M.handleSubmit,
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "academicYear",
                          formik: M,
                          label: "Select Academic Year",
                          options: d,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "class",
                          formik: M,
                          label: "Select Class",
                          options: m,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "section",
                          formik: M,
                          label: "Select Section",
                          options: h,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "active",
                          formik: M,
                          label: "Select Status",
                          options: Ll,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        md: 12,
                        lg: 12,
                        display: "flex",
                        justifyContent: "flex-end",
                        children: (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          type: "submit",
                          children: "Find",
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsxs)(s.A, {
                  sx: {
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                  },
                  children: [
                    (0, re.jsx)(s.A, {
                      sx: {
                        display: "flex",
                        justifyContent: "flex-start",
                        alignItems: "center",
                      },
                      children:
                        M.values.academicYear &&
                        M.values.class &&
                        "all" !== M.values.section &&
                        (0, re.jsxs)(b.A, {
                          gap: 1,
                          direction: { xs: "column", sm: "row", md: "row" },
                          children: [
                            (0, re.jsx)(S.A, {
                              title: "Bulk Admit",
                              children: (0, re.jsx)($e.A, {
                                size: "small",
                                variant: "contained",
                                onClick: () => y(!0),
                                children: "BULK ADMIT",
                              }),
                            }),
                            (0, re.jsx)(S.A, {
                              title: "Bulk Update",
                              children: (0, re.jsx)($e.A, {
                                size: "small",
                                variant: "contained",
                                onClick: () => g(!0),
                                children: "BULK UPDATE",
                              }),
                            }),
                          ],
                        }),
                    }),
                    (0, re.jsx)(s.A, {
                      sx: {
                        display: "flex",
                        justifyContent: "flex-end",
                        alignItems: "center",
                        mt: 1,
                      },
                      children: (0, re.jsxs)(b.A, {
                        direction: "row",
                        children: [
                          (0, re.jsx)(S.A, {
                            title: "Download",
                            children: (0, re.jsx)(ht.A, {
                              loading: f,
                              onClick: async () => {
                                try {
                                  v(!0);
                                  Dl(
                                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                    (
                                      await (0, Se.Jt)(
                                        ke.r.student.downloadStudentsExcel,
                                        {
                                          params: {
                                            schoolId: e._id,
                                            academicYearId:
                                              M.values.academicYear,
                                            classId: M.values.class,
                                            sectionId: M.values.section,
                                            active: M.values.active,
                                          },
                                          responseType: "blob",
                                        }
                                      )
                                    ).data,
                                    "students.xlsx"
                                  ),
                                    v(!1);
                                } catch (t) {
                                  console.log(t), v(!1);
                                }
                              },
                              children: (0, re.jsx)(Jl.A, { color: "primary" }),
                            }),
                          }),
                          (0, re.jsx)(S.A, {
                            title: "Print",
                            children: (0, re.jsx)(ht.A, {
                              loading: k,
                              onClick: async () => {
                                try {
                                  C(!0);
                                  Dl(
                                    "application/pdf",
                                    (
                                      await (0, Se.Jt)(
                                        ke.r.student.downloadStudentsPdf,
                                        {
                                          params: {
                                            schoolId: e._id,
                                            academicYearId:
                                              M.values.academicYear,
                                            classId: M.values.class,
                                            active: M.values.active,
                                          },
                                          responseType: "blob",
                                        }
                                      )
                                    ).data,
                                    "student-list.pdf"
                                  ),
                                    C(!1);
                                } catch (t) {
                                  console.log(t), C(!1);
                                }
                              },
                              children: (0, re.jsx)(Pl.A, { color: "primary" }),
                            }),
                          }),
                          (0, re.jsx)($e.A, {
                            size: "small",
                            variant: "contained",
                            onClick: () => {
                              t("/sch/student/bulk-photo");
                            },
                            children: "Bulk Photo",
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
              ],
            }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: Vl,
              bodyDataModal: "students",
              bodyData: o,
              onEditClick: (e) => {
                t("/sch/student/edit-student/".concat(e._id));
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.student.delete + "/" + e);
                  M.handleSubmit();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Students",
              onAddClick: (e) => {
                t("/sch/student/add-student");
              },
            }),
            (0, re.jsx)(ct.A, {
              fullScreen: n,
              maxWidth: "md",
              open: A,
              onClose: () => y(!1),
              "aria-labelledby": "modal-modal-title",
              "aria-describedby": "modal-modal-description",
              sx: {
                "& .MuiDialog-container": {
                  "& .MuiPaper-root": {
                    width: "100%",
                    maxWidth: { xs: "100%", sm: 350, md: 350, lg: 400 },
                  },
                },
              },
              children: (0, re.jsx)(s.A, {
                sx: Ul,
                children: (0, re.jsx)("form", {
                  onSubmit: async (t) => {
                    t.preventDefault();
                    try {
                      const t = new FormData();
                      t.append("academicYearId", M.values.academicYear),
                        t.append("classId", M.values.class),
                        t.append("sectionId", M.values.section),
                        t.append("schoolId", e._id),
                        I.forEach((e) => t.append("file", e)),
                        await (0, Se.bE)(ke.r.student.bulkStudentAdmit, t, {
                          headers: { "Content-Type": "multipart/form-data" },
                        });
                    } catch (a) {
                      console.log(a);
                    }
                  },
                  children: (0, re.jsxs)(xe.Ay, {
                    container: !0,
                    spacing: 1,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsx)(u.A, {
                          variant: "h6",
                          component: "h2",
                          textAlign: "center",
                          fontSize: "20px",
                          fontWeight: "bold",
                          children: "Bulk Admit",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        textAlign: "center",
                        children: (0, re.jsx)($e.A, {
                          variant: "contained",
                          size: "small",
                          endIcon: (0, re.jsx)(Bl.A, {}),
                          onClick: async () => {
                            try {
                              Dl(
                                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                (
                                  await (0, Se.Jt)(
                                    ke.r.student.getBulkStudentAdmitSheet,
                                    {
                                      params: { schoolId: e._id },
                                      responseType: "blob",
                                    }
                                  )
                                ).data,
                                "studentAdmit_list.xlsx"
                              );
                            } catch (t) {
                              console.log(t);
                            }
                          },
                          children: "Sample",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        textAlign: "center",
                        children: (0, re.jsx)(Ol.A, {
                          label: "Select  File",
                          onChange: (e) => T(e, "admitFile"),
                          customOnChange: !0,
                          selectedFiles: I,
                          multi: !1,
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        display: "flex",
                        justifyContent: "flex-end",
                        gap: 1,
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            color: "error",
                            variant: "contained",
                            onClick: () => {
                              y(!1), N([]);
                            },
                            children: "Cancel",
                          }),
                          (0, re.jsx)($e.A, {
                            size: "small",
                            variant: "contained",
                            type: "submit",
                            children: "Submit",
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
            }),
            (0, re.jsx)(ct.A, {
              fullScreen: n,
              open: j,
              onClose: () => g(!1),
              "aria-labelledby": "modal-modal-title",
              "aria-describedby": "modal-modal-description",
              sx: {
                "& .MuiDialog-container": {
                  "& .MuiPaper-root": {
                    width: "100%",
                    maxWidth: { xs: "100%", sm: 350, md: 350, lg: 400 },
                  },
                },
              },
              children: (0, re.jsx)(s.A, {
                sx: Ul,
                children: (0, re.jsxs)("form", {
                  onSubmit: async (e) => {
                    e.preventDefault();
                    try {
                      const e = new FormData();
                      D.forEach((t) => e.append("file", t));
                      const { data: t } = await (0, Se.yJ)(
                        ke.r.student.bulkUpdate,
                        e,
                        { headers: { "Content-Type": "multipart/form-data" } }
                      );
                    } catch (t) {
                      console.log(t);
                    }
                  },
                  children: [
                    " ",
                    (0, re.jsxs)(xe.Ay, {
                      container: !0,
                      spacing: 1,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          sm: 12,
                          md: 12,
                          lg: 12,
                          children: (0, re.jsx)(u.A, {
                            variant: "h6",
                            component: "h2",
                            textAlign: "center",
                            fontSize: "20px",
                            fontWeight: "bold",
                            children: "Bulk Update",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          sm: 12,
                          md: 12,
                          lg: 12,
                          textAlign: "center",
                          children: (0, re.jsx)($e.A, {
                            variant: "contained",
                            size: "small",
                            onClick: async () => {
                              try {
                                Dl(
                                  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                  (
                                    await (0, Se.Jt)(
                                      ke.r.student.bulkUpdateSheet,
                                      {
                                        params: {
                                          schoolId: e._id,
                                          academicYearId: M.values.academicYear,
                                          classId: M.values.class,
                                          sectionId: M.values.section,
                                        },
                                        responseType: "blob",
                                      }
                                    )
                                  ).data,
                                  "student_list.xlsx"
                                );
                              } catch (t) {
                                console.log(t);
                              }
                            },
                            endIcon: (0, re.jsx)(Bl.A, {}),
                            children: "Download",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          sm: 12,
                          md: 12,
                          lg: 12,
                          textAlign: "center",
                          children: (0, re.jsx)(Ol.A, {
                            label: "Select File",
                            onChange: (e) => T(e, "updateFile"),
                            customOnChange: !0,
                            selectedFiles: D,
                            multi: !1,
                          }),
                        }),
                        (0, re.jsxs)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          sm: 12,
                          md: 12,
                          lg: 12,
                          display: "flex",
                          justifyContent: "flex-end",
                          gap: 1,
                          children: [
                            (0, re.jsx)($e.A, {
                              size: "small",
                              color: "error",
                              variant: "contained",
                              onClick: () => {
                                g(!1), w([]);
                              },
                              children: "Cancel",
                            }),
                            (0, re.jsx)($e.A, {
                              variant: "contained",
                              size: "small",
                              type: "submit",
                              children: "Submit",
                            }),
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const Gl = (e) => {
        let { children: t, content: a } = e;
        const [n, i] = (0, l.useState)(!0);
        return (
          (0, l.useEffect)(() => () => {}, []),
          (0, re.jsx)(re.Fragment, {
            children:
              n &&
              a &&
              (0, re.jsx)("div", {
                style: {
                  position: "fixed",
                  bottom: 0,
                  left: 0,
                  right: 0,
                  width: "100%",
                  background: "whitesmoke",
                  padding: "15px",
                  zIndex: 1e3,
                },
                children: a,
              }),
          })
        );
      };
      var Kl = a(55756);
      const Ql = { inputProps: { "aria-label": "Checkbox demo" } },
        Zl = { bgcolor: "background.paper", height: "auto", p: 2 };
      function $l() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          t = (0, Kl.u)(),
          a = (0, dt.A)(t.breakpoints.down("sm")),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          [m, x] = (0, l.useState)(!1),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)([]),
          [A, y] = (0, l.useState)([]),
          [f, v] = (0, l.useState)(!1),
          [b, S] = l.useState(0),
          [k, C] = l.useState(10),
          D = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              class: "",
              section: "",
              newSection: "",
            },
            onSubmit: async (t) => {
              try {
                if (!wl(t, [])) return;
                const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                  params: {
                    schoolId: e._id,
                    search: {
                      academicYear: t.academicYear,
                      "academicInfo.class": t.class,
                      "academicInfo.section": t.section,
                    },
                  },
                });
                g(a.result);
              } catch (a) {
                console.log(a);
              }
            },
          });
        (0, l.useEffect)(() => {
          g([]);
        }, [D.values]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.academicYear.list);
              i(
                t.result.map((e) => ({
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                D.setFieldValue(
                  "academicYear",
                  null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                var t;
                const { data: a } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                r(a.result.map((e) => ({ label: e.name, value: e._id }))),
                  D.setFieldValue(
                    "class",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })();
        }, []),
          (0, l.useEffect)(() => {
            D.values.class &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: D.values.class },
                    },
                  });
                  c(a.result.map((e) => ({ label: e.name, value: e._id }))),
                    D.setFieldValue(
                      "section",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [D.values.class, e]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Reshuffle" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsx)("form", {
                onSubmit: D.handleSubmit,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "academicYear",
                        formik: D,
                        label: "Select Academic Year",
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: D,
                        label: "Select Class",
                        options: o,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: D,
                        label: "Current Section",
                        options: d,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "newSection",
                        formik: D,
                        label: "Change To",
                        options: d.filter((e) => e.value !== D.values.section),
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      md: 12,
                      lg: 12,
                      display: "flex",
                      justifyContent: "flex-end",
                      gap: "10px",
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          type: "submit",
                          variant: "contained",
                          children: "Find",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          onClick: () => x(!0),
                          children: "Bulk Reshuffle",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
            (0, re.jsxs)(na.A, {
              component: ue.A,
              children: [
                (0, re.jsxs)(ia.A, {
                  children: [
                    (0, re.jsx)(sa.A, {
                      sx: {
                        backgroundColor: (e) =>
                          "dark" === e.palette.mode
                            ? e.palette.primary.dark
                            : e.palette.primary.light,
                      },
                      children: (0, re.jsxs)(oa.A, {
                        children: [
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "S.No",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Name",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Roll No",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Father Name",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: (0, re.jsx)(da.A, {
                              onChange: (e) => {
                                if (e.target.checked) {
                                  const e = j.map((e) => e._id);
                                  y([...e]);
                                } else y([]);
                              },
                              ...Ql,
                              sx: {
                                padding: 0,
                                color: "#fff",
                                "&.Mui-checked": { color: "#fff" },
                              },
                            }),
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(ca.A, {
                      children: j.slice(b * k, b * k + k).map((e, t) =>
                        (0, re.jsxs)(
                          oa.A,
                          {
                            children: [
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: t + 1,
                              }),
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: e.basicInfo.name,
                              }),
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: e.academicInfo.rollNumber,
                              }),
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: e.fatherInfo.name,
                              }),
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: (0, re.jsx)(da.A, {
                                  checked: A.includes(e._id),
                                  onChange: (t) =>
                                    ((e, t) => {
                                      t.target.checked
                                        ? y((t) => [...t, e])
                                        : y(A.filter((t) => t !== e));
                                    })(e._id, t),
                                  ...Ql,
                                  sx: {
                                    color: "#1b3779",
                                    "&.Mui-checked": { color: "#1b3779" },
                                  },
                                }),
                              }),
                            ],
                          },
                          e._id
                        )
                      ),
                    }),
                  ],
                }),
                !j.length &&
                  (0, re.jsx)(u.A, {
                    variant: "h6",
                    sx: { textAlign: "center", margin: "5px", padding: "5px" },
                    children: "No data found",
                  }),
                (0, re.jsx)(Ua.A, {
                  rowsPerPageOptions: [10, 25, 50],
                  component: "div",
                  count: j.length,
                  rowsPerPage: k,
                  page: b,
                  onPageChange: (e, t) => {
                    S(t);
                  },
                  onRowsPerPageChange: (e) => {
                    C(+e.target.value), S(0);
                  },
                }),
              ],
            }),
            j.length > 0 &&
              (0, re.jsx)(Gl, {
                content: (0, re.jsx)("div", {
                  style: { display: "flex", justifyContent: "flex-end" },
                  children: (0, re.jsx)(ht.A, {
                    loading: f,
                    varient: "contained",
                    size: "small",
                    type: "submit",
                    onClick: async () => {
                      try {
                        const t = {
                          schoolId: e._id,
                          sectionId: D.values.newSection,
                          classId: D.values.class,
                          currentSectionId: D.values.section,
                          studentIds: A,
                        };
                        v(!0);
                        const { data: a } = await (0, Se.yJ)(
                          ke.r.student.resuffle,
                          t
                        );
                        D.resetForm();
                      } catch (t) {
                        console.log(t);
                      }
                      v(!1);
                    },
                    sx: {
                      background: "#1b3779",
                      ":hover": { background: "#1b3779" },
                      color: "#fff",
                    },
                    children: "Reshuffle",
                  }),
                }),
              }),
            (0, re.jsx)(ct.A, {
              fullScreen: a,
              maxWidth: "md",
              open: m,
              onClose: () => x(!1),
              "aria-labelledby": "modal-modal-title",
              "aria-describedby": "modal-modal-description",
              children: (0, re.jsx)(s.A, {
                sx: Zl,
                children: (0, re.jsxs)(xe.Ay, {
                  container: !0,
                  spacing: 1,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 12,
                      lg: 12,
                      children: (0, re.jsx)(u.A, {
                        variant: "h6",
                        component: "h2",
                        textAlign: "center",
                        fontSize: "20px",
                        fontWeight: "bold",
                        children: "Bulk Admit",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 12,
                      lg: 12,
                      textAlign: "center",
                      children: (0, re.jsx)($e.A, {
                        variant: "contained",
                        endIcon: (0, re.jsx)(Bl.A, {}),
                        children: "Get Sample",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 12,
                      lg: 12,
                      textAlign: "center",
                      children: (0, re.jsx)(Ol.A, {
                        label: "Select File",
                        onChange: (e) =>
                          ((e, t) => {
                            const { files: a } = e.target;
                            let l = [];
                            if (a.length > 0) {
                              for (let e = 0; e < a.length; e++) {
                                const t = a[e];
                                l.push(t);
                              }
                              p(l);
                            } else console.log("No files selected");
                          })(e),
                        customOnChange: !0,
                        selectedFiles: h,
                        multi: !1,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 12,
                      lg: 12,
                      display: "flex",
                      justifyContent: "flex-end",
                      children: (0, re.jsx)($e.A, {
                        variant: "contained",
                        type: "submit",
                        children: "Submit",
                      }),
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const Xl = { inputProps: { "aria-label": "Checkbox demo" } };
      function en() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          [m, x] = (0, l.useState)({}),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)(!1),
          [A, y] = (0, l.useState)(!1),
          [f, v] = l.useState(0),
          [b, S] = l.useState(10),
          k = (0, et.Wx)({
            initialValues: {
              promoteAcademicYearId: "",
              currentClassId: "",
              currentSectionId: "",
              promoteClassId: "",
              promoteSectionId: "",
            },
            onSubmit: async (e) => {
              try {
                if (!wl(e, [])) return;
                y(!0);
                const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                  params: {
                    search: {
                      academicYear: m._id,
                      "academicInfo.section": e.currentSectionId,
                      "academicInfo.class": e.currentClassId,
                      active: !0,
                    },
                  },
                });
                a(t.result);
              } catch (t) {
                console.log(t);
              }
              y(!1);
            },
          });
        (0, l.useEffect)(() => {
          a([]);
        }, [k.values]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.academicYear.list);
              let a = t.result,
                l = a.find((e) => e.active);
              i(
                a
                  .filter(
                    (e) =>
                      e._id !== (null === l || void 0 === l ? void 0 : l._id)
                  )
                  .map((e) => ({
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
              ),
                x(l),
                k.setFieldValue(
                  "promoteAcademicYearId",
                  null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                var t;
                const { data: a } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                r(a.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  k.setFieldValue(
                    "currentClassId",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })(),
            (async () => {
              try {
                var t;
                const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                  params: { schoolId: e._id },
                });
                c(a.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  k.setFieldValue(
                    "currentSectionId",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })();
        }, [e._id]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Promotion" }),
            (0, re.jsxs)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: [
                (0, re.jsxs)(s.A, {
                  sx: { fontSize: 16, fontWeight: "bold" },
                  children: [
                    (0, re.jsxs)(u.A, {
                      component: "span",
                      color: "forestgreen",
                      fontWeight: "bold",
                      children: ["Running Session:", " "],
                    }),
                    (0, re.jsxs)(u.A, {
                      component: "span",
                      fontWeight: "bold",
                      children: [
                        null === m || void 0 === m ? void 0 : m.from,
                        "-",
                        null === m || void 0 === m ? void 0 : m.to,
                      ],
                    }),
                  ],
                }),
                (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "promoteAcademicYearId",
                        formik: k,
                        label: "Promote To Session",
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "currentClassId",
                        formik: k,
                        label: "Current Class",
                        options: o,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "currentSectionId",
                        formik: k,
                        label: "Current Section",
                        options: d
                          .filter(
                            (e) => e.class._id === k.values.currentClassId
                          )
                          .map((e) => ({ label: e.name, value: e._id })),
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "promoteClassId",
                        formik: k,
                        label: "Promote Class",
                        options: o
                          .filter((e) => e._id !== k.values.currentClassId)
                          .map((e) => ({ label: e.name, value: e._id })),
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "promoteSectionId",
                        formik: k,
                        label: "Promote Section",
                        options: d
                          .filter(
                            (e) => e.class._id === k.values.promoteClassId
                          )
                          .map((e) => ({ label: e.name, value: e._id })),
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      md: 6,
                      lg: 2,
                      display: "flex",
                      alignItems: "center",
                      children: (0, re.jsx)(ht.A, {
                        loading: A,
                        disabled: !wl(k.values, [], !1),
                        onClick: k.handleSubmit,
                        size: "small",
                        variant: "contained",
                        children: "Find",
                      }),
                    }),
                  ],
                }),
              ],
            }),
            (0, re.jsxs)(na.A, {
              component: ue.A,
              children: [
                (0, re.jsxs)(ia.A, {
                  children: [
                    (0, re.jsx)(sa.A, {
                      sx: {
                        backgroundColor: (e) =>
                          "dark" === e.palette.mode
                            ? e.palette.primary.dark
                            : e.palette.primary.light,
                      },
                      children: (0, re.jsxs)(oa.A, {
                        children: [
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "S.No",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Name",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Roll No",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Father Name",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: (0, re.jsx)(da.A, {
                              onClick: (e) => {
                                if (e.target.checked) {
                                  const e = t.map((e) => e._id);
                                  p([...e]);
                                } else p([]);
                              },
                              ...Xl,
                              sx: {
                                padding: 0,
                                color: "#fff",
                                "&.Mui-checked": { color: "#fff" },
                              },
                            }),
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(ca.A, {
                      children: t.slice(f * b, f * b + b).map((e, t) =>
                        (0, re.jsxs)(
                          oa.A,
                          {
                            children: [
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: t + 1,
                              }),
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: e.basicInfo.name,
                              }),
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: e.academicInfo.rollNumber,
                              }),
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: e.fatherInfo.name,
                              }),
                              (0, re.jsx)(ra.A, {
                                align: "center",
                                children: (0, re.jsx)(da.A, {
                                  size: "small",
                                  checked: h.includes(e._id),
                                  onChange: (t) =>
                                    ((e, t) => {
                                      t.target.checked
                                        ? p((t) => [...t, e])
                                        : p(h.filter((t) => t !== e));
                                    })(e._id, t),
                                  ...Xl,
                                  sx: {
                                    color: "#1b3779",
                                    "&.Mui-checked": { color: "#1b3779" },
                                  },
                                }),
                              }),
                            ],
                          },
                          e._id
                        )
                      ),
                    }),
                  ],
                }),
                !t.length &&
                  (0, re.jsx)(u.A, {
                    variant: "h6",
                    sx: { textAlign: "center", margin: "5px", padding: "5px" },
                    children: "No data found",
                  }),
                (0, re.jsx)(Ua.A, {
                  rowsPerPageOptions: [10, 25, 50],
                  component: "div",
                  count: t.length,
                  rowsPerPage: b,
                  page: f,
                  onPageChange: (e, t) => {
                    v(t);
                  },
                  onRowsPerPageChange: (e) => {
                    S(+e.target.value), v(0);
                  },
                }),
              ],
            }),
            t.length > 0 &&
              (0, re.jsx)(Gl, {
                content: (0, re.jsx)(s.A, {
                  sx: { display: "flex", justifyContent: "flex-end" },
                  children: (0, re.jsx)(ht.A, {
                    loading: j,
                    variant: "contained",
                    size: "small",
                    type: "submit",
                    onClick: async () => {
                      try {
                        const t = {
                          schoolId: e._id,
                          ...k.values,
                          studentIds: h,
                        };
                        g(!0), console.log(t, "payload");
                        const { data: a } = await (0, Se.yJ)(
                          ke.r.student.promote,
                          t
                        );
                        k.resetForm();
                      } catch (t) {
                        console.log(t);
                      }
                      g(!1);
                    },
                    children: "Promote",
                  }),
                }),
              }),
          ],
        });
      }
      const tn = (0, n.Ay)(u.A)((e) => {
        let { theme: t } = e;
        return { fontSize: "16px" };
      });
      function an() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)(null),
          m = (0, et.Wx)({
            initialValues: { academicYear: "", class: "", section: "" },
            onSubmit: console.log("nnnn"),
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              m.setFieldValue("academicYear", e.result[0]._id),
                a(
                  e.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                );
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                i(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  m.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e]),
          (0, l.useEffect)(() => {
            m.values.class &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: m.values.class },
                    },
                  });
                  m.setFieldValue(
                    "section",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  ),
                    r(
                      a.result.map((e) => ({
                        ...e,
                        label: e.name,
                        value: e._id,
                      }))
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [m.values.class]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Bulk Admission" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: m,
                      label: "Select Academic Year",
                      options: t,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: m,
                      label: "Select Class",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: m,
                      label: "Select Section",
                      options: o,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    sx: {
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                    },
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)($e.A, {
                      size: "large",
                      component: "label",
                      children: (0, re.jsx)("input", {
                        visibility: "hidden",
                        type: "file",
                        onChange: (e) => {
                          c(e.target.files[0]);
                        },
                      }),
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    item: !0,
                    children: (0, re.jsx)(ht.A, {
                      onClick: async () => {
                        try {
                          const { data: t } = await (0, Se.Jt)(
                            ke.r.student.getBulkStudentAdmitSheet,
                            {
                              responseType: "blob",
                              params: { schoolId: e._id },
                            }
                          );
                          Dl(
                            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            t,
                            "Bulk Admission Sheet"
                          );
                        } catch (t) {
                          console.log(t);
                        }
                      },
                      endIcon: (0, re.jsx)(Bl.A, {}),
                      size: "small",
                      variant: "contained",
                      children: "Get Sample",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    item: !0,
                    children: (0, re.jsxs)(tn, {
                      component: "ul",
                      children: [
                        (0, re.jsxs)(tn, {
                          component: "li",
                          children: [
                            "School role type configured with",
                            (0, re.jsx)("span", {
                              style: { color: "red" },
                              children: " manual",
                            }),
                            ", please mention role number in column.",
                          ],
                        }),
                        (0, re.jsxs)(tn, {
                          component: "li",
                          children: [
                            "School admission_no configured with auto",
                            " ",
                            (0, re.jsx)("span", {
                              style: { color: "red" },
                              children: " auto _ascending_no, ",
                            }),
                            "admission_no column will be ignored.",
                          ],
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    lg: 12,
                    display: "flex",
                    justifyContent: "flex-end",
                    children: (0, re.jsx)(ht.A, {
                      onClick: async () => {
                        try {
                          const t = new FormData();
                          t.append("classId", m.values.class),
                            t.append("sectionId", m.values.section),
                            t.append("academicYearId", m.values.academicYear),
                            t.append("schoolId", e._id),
                            t.append("file", d);
                          const { data: a } = await (0, Se.yJ)(
                            ke.r.student.bulkStudentAdmit,
                            t,
                            {
                              headers: {
                                "Content-Type": "multipart/form-data",
                              },
                            }
                          );
                        } catch (t) {
                          console.log(t);
                        }
                      },
                      size: "small",
                      variant: "contained",
                      children: "Submit",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsxs)(s.A, {
              sx: {
                padding: "20px",
                borderRadius: "5px",
                backgroundColor: (e) =>
                  "dark" === e.palette.mode ? "rgba(32,33,32,1)" : "#FFF9C4",
              },
              children: [
                (0, re.jsx)(u.A, {
                  sx: { fontSize: "22px" },
                  fontWeight: "bold",
                  children: "Instruction:",
                }),
                (0, re.jsxs)(tn, {
                  component: "ol",
                  children: [
                    (0, re.jsx)(tn, {
                      component: "li",
                      children:
                        "At first select the (School), Class and Section",
                    }),
                    (0, re.jsx)(tn, {
                      component: "li",
                      children: "Generate CSV file.",
                    }),
                    (0, re.jsx)(tn, {
                      component: "li",
                      children:
                        "Open the downloaded CSV file and enter student information with unique username.",
                    }),
                    (0, re.jsx)(tn, {
                      component: "li",
                      children: "Save the edited CSV file.",
                    }),
                    (0, re.jsx)(tn, {
                      component: "li",
                      children:
                        "Upload again CSV file you just edited and submit.",
                    }),
                  ],
                }),
              ],
            }),
          ],
        });
      }
      const ln = [
        { name: "Name", key: "name" },
        { name: "User Name", key: "username" },
        { name: "Roll No", key: "rollNumber", path: "rollNumber" },
        { name: "Father Name", key: "fatherName" },
      ];
      function nn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(!1),
          u = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              class: "",
              section: "",
              student: "",
            },
            onSubmit: async (t) => {
              m(!0);
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                  params: {
                    schoolId: e._id,
                    search: {
                      academicYear: u.values.academicYear,
                      "academicInfo.class": u.values.class,
                      "academicInfo.section": u.values.section,
                    },
                  },
                });
                a(
                  t.result.map((e) => ({
                    username: e.username,
                    fatherName: e.fatherInfo.name,
                    name: e.basicInfo.name,
                    rollNumber: e.academicInfo,
                  }))
                );
              } catch (l) {
                console.error(l);
              }
              m(!1);
            },
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                u.setFieldValue("academicYear", e.result[0]._id),
                  i(
                    e.result.map((e) => ({
                      ...e,
                      label: "".concat(e.from, "-").concat(e.to),
                      value: e._id,
                    }))
                  );
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  });
                  o(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    u.setFieldValue("class", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [e._id]),
          (0, l.useEffect)(() => {
            u.values.class &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: u.values.class },
                    },
                  });
                  d(
                    a.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    u.setFieldValue(
                      "section",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [u.values.class, e._id]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Credentials" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  component: "form",
                  onSubmit: u.handleSubmit,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "academicYear",
                        formik: u,
                        label: "Select Academic Year",
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: u,
                        label: "Select Class",
                        options: s,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: u,
                        label: "Select Section",
                        options: r,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      md: 6,
                      lg: 3,
                      sx: { alignSelf: "center" },
                      children: (0, re.jsx)(ht.A, {
                        loading: c,
                        size: "small",
                        type: "submit",
                        variant: "contained",
                        children: "Find",
                      }),
                    }),
                  ],
                }),
              }),
              (0, re.jsx)(jt.A, {
                actions: [],
                tableKeys: ln,
                bodyDataModal: "credentials",
                bodyData: t,
              }),
            ],
          })
        );
      }
      const sn = [
          { label: "Male", value: "male" },
          { label: "Female", value: "female" },
        ],
        on = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ];
      function rn() {
        const {
            selectedSetting: e,
            setSettings: t,
            setSelectedSetting: a,
          } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          [m, x] = (0, l.useState)(!1),
          h = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              name: "",
              admissionNumber: "",
              admissionDate: null,
              dob: null,
              gender: "",
              caste: "",
              contactNumber: "",
              fatherName: "",
              fatherContactNumber: "",
              motherName: "",
              motherContactNumber: "",
              class: "",
              section: "",
              rollNumber: "",
              active: "",
            },
            onSubmit: async (t) => {
              console.log(t.caste, "check error");
              try {
                const a = {
                    basicInfo: {
                      name: t.name,
                      admissionDate: Be()(t.admissionDate).format("YYYY/MM/DD"),
                      dob: Be()(t.dob).format("YYYY/MM/DD"),
                      gender: t.gender,
                      caste: t.caste,
                    },
                    motherInfo: {
                      name: t.motherName,
                      contactNumber: t.motherPhone,
                    },
                    fatherInfo: {
                      name: t.fatherName,
                      contactNumber: t.fatherPhone,
                    },
                    academicInfo: {
                      class: t.class,
                      section: t.section,
                      rollNumber: t.rollNumber,
                      admissionNumber: t.admissionNumber,
                    },
                    contactNumber: t.contactNumber,
                    academicYear: t.academicYear,
                    schoolId: null === e || void 0 === e ? void 0 : e._id,
                    active: t.active || !0,
                  },
                  l = new FormData();
                l.append("body", JSON.stringify(a)), x(!0);
                const { data: n } = await (0, Se.bE)(ke.r.student.create, l, {
                  headers: { "Content-Type": "multipart/form-data" },
                });
                h.resetForm();
              } catch (a) {
                console.log(a);
              }
              x(!1);
            },
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                i(
                  e.result.map((e) => ({
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                );
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  });
                  r(t.result.map((e) => ({ label: e.name, value: e._id })));
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [e]),
          (0, l.useEffect)(() => {
            h.values.class &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: null === e || void 0 === e ? void 0 : e._id,
                      search: { class: h.values.class },
                    },
                  });
                  c(t.result.map((e) => ({ label: e.name, value: e._id })));
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [h.values.class, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Quick Admit" }),
              (0, re.jsxs)(s.A, {
                onSubmit: h.handleSubmit,
                component: "form",
                children: [
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsxs)(xe.Ay, {
                          xs: 12,
                          md: 12,
                          lg: 12,
                          item: !0,
                          children: [
                            (0, re.jsxs)(u.A, {
                              component: "span",
                              color: "red",
                              fontWeight: "bold",
                              sx: { display: "inline" },
                              children: ["Note:", " "],
                            }),
                            (0, re.jsx)(u.A, {
                              variant: "h6",
                              component: "span",
                              fontWeight: "bold",
                              sx: { display: "inline" },
                              children: "Student will be admited to session",
                            }),
                          ],
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "academicYear",
                            formik: h,
                            label: "Select Academic Year",
                            options: n,
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 12,
                          lg: 12,
                          item: !0,
                          children: (0, re.jsx)(u.A, {
                            variant: "h6",
                            fontWeight: "bold",
                            children: "Basic Information",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "name",
                            formik: h,
                            label: "Name",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required:
                              "manual" ===
                              (null === e || void 0 === e
                                ? void 0
                                : e.admissionNo),
                            name: "admissionNumber",
                            formik: h,
                            label: "Admission No.",
                            disabled:
                              "manual" !=
                              (null === e || void 0 === e
                                ? void 0
                                : e.admissionNo),
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            required: !0,
                            name: "admissionDate",
                            formik: h,
                            label: "Admission Date",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            required: !0,
                            name: "dob",
                            formik: h,
                            label: "DOB",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "gender",
                            formik: h,
                            label: "Select Gender",
                            options: sn,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "caste",
                            formik: h,
                            label: "Caste",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "contactNumber",
                            formik: h,
                            label: "Contact Number",
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 12,
                          lg: 12,
                          item: !0,
                          children: (0, re.jsx)(u.A, {
                            variant: "h6",
                            fontWeight: "bold",
                            children: "Parent Information",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "fatherName",
                            formik: h,
                            label: "Father Name",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "fatherContactNumber",
                            formik: h,
                            label: "Father Phone Number",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "motherName",
                            formik: h,
                            label: "Mother Name",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "motherContactNumber",
                            formik: h,
                            label: "Mother Phone Number",
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 12,
                          lg: 12,
                          item: !0,
                          children: (0, re.jsx)(u.A, {
                            variant: "h6",
                            fontWeight: "bold",
                            children: "Academic Information",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "class",
                            formik: h,
                            label: "Select Class",
                            options: o,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "section",
                            formik: h,
                            label: "Select Section",
                            options: d,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "rollNumber",
                            formik: h,
                            label: "Roll No",
                            disabled:
                              "manual" !==
                              (null === e || void 0 === e
                                ? void 0
                                : e.rollNumberType),
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            name: "active",
                            formik: h,
                            label: "Select Active Status",
                            options: on,
                          }),
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(s.A, {
                    sx: {
                      display: "flex",
                      justifyContent: "flex-end",
                      alignItems: "center",
                    },
                    children: (0, re.jsx)(ht.A, {
                      loading: m,
                      size: "small",
                      variant: "contained",
                      type: "submit",
                      children: "Submit",
                    }),
                  }),
                ],
              }),
            ],
          })
        );
      }
      const dn = [
        { name: "Name", key: "name" },
        { name: "Date", key: "createdAt", isDate: !0 },
      ];
      function cn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)({
            class: "",
            section: "",
            academicYear: "",
            student: "",
          }),
          [j, g] = (0, l.useState)([]),
          [A, y] = (0, l.useState)([]),
          f = async (t) => {
            try {
              const { data: l } = await (0, Se.Jt)(ke.r.studentActivity.list, {
                params: {
                  schoolId: e._id,
                  search: { student: t.student, academicYear: t.academicYear },
                },
              });
              a(l.result);
            } catch (l) {
              console.log(l);
            }
          },
          v = async () => {
            try {
              var t;
              const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                params: { schoolId: e._id, search: { class: S.values.class } },
              });
              S.setFieldValue(
                "section",
                null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
              ),
                y(a.result.map((e) => ({ ...e, label: e.name, value: e._id })));
            } catch (a) {
              console.log(a);
            }
          },
          b = () => {
            S.handleSubmit(), i(!1), o(null);
          },
          S = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              class: "",
              section: "",
              student: "",
            },
            onSubmit: f,
            enableReinitialize: !0,
          }),
          k = (0, et.Wx)({
            initialValues: {
              name: (null === s || void 0 === s ? void 0 : s.name) || "",
              description:
                (null === s || void 0 === s ? void 0 : s.description) || "",
              student: S.values.student || "",
              academicYear: S.values.academicYear || "",
            },
            onSubmit: async (t) => {
              try {
                const a = {
                  student: t.student,
                  description: t.description,
                  name: t.name,
                  academicYear: t.academicYear,
                  schoolId: e._id,
                };
                if ((d(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.studentActivity.update + "/" + s._id,
                    a
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.studentActivity.create,
                    a
                  );
                }
                b();
              } catch (a) {
                console.log(a);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          S.values.class && v();
        }, [S.values.class]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                S.setFieldValue("academicYear", e.result[0]._id),
                  m(
                    e.result.map((e) => ({
                      ...e,
                      label: "".concat(e.from, "-").concat(e.to),
                      value: e._id,
                    }))
                  );
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  });
                  g(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    S.setFieldValue("class", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [e._id]),
          (0, l.useEffect)(() => {
            S.values.academicYear &&
              S.values.class &&
              S.values.section &&
              e &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        academicYear: S.values.academicYear,
                        "academicInfo.class": S.values.class,
                        "academicInfo.section": S.values.section,
                      },
                    },
                  });
                  x(
                    a.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    S.setFieldValue(
                      "student",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [S.values.academicYear, S.values.class, S.values.section, e]),
          (0, l.useEffect)(() => {
            S.values.class && v();
          }, [S.values.class]);
        (0, l.useEffect)(() => {
          S.values.academicYear && f();
        }, [S.values.academicYear]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Student Activity" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                component: "div",
                onSubmit: S.handleSubmit,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: S,
                      label: "Select Academic Year",
                      options: c,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: S,
                      label: "Select Class",
                      options: j,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: S,
                      label: "Select Section",
                      options: A,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "student",
                      formik: S,
                      label: "Select Student",
                      options: u,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    lg: 12,
                    display: "flex",
                    justifyContent: "flex-end",
                    children: (0, re.jsx)($e.A, {
                      size: "small",
                      type: "submit",
                      variant: "contained",
                      disabled: !S.values.student,
                      onClick: S.handleSubmit,
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: dn,
              bodyDataModal: "student activity",
              bodyData: t,
              onEditClick: (e) => {
                o(e), i(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.yH)(
                    ke.r.studentActivity.delete + "/" + e
                  );
                  S.handleSubmit();
                } catch (t) {
                  console.log(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Student Activity",
              onAddClick: () => {
                i(!0);
              },
              disabled: !S.values.student,
            }),
            (0, re.jsx)(pt, {
              open: n,
              formik: k,
              formTitle: s ? "Update Student Activity" : "Add Student Activity",
              onClose: b,
              submitButtonTitle: s ? "Update" : "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: k,
                      name: "name",
                      label: "Activity Name",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: k,
                      name: "description",
                      label: "Description",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const mn = [
          { name: "Title", key: "title" },
          { name: "Date", key: "date", isDate: !0 },
          { name: "View On Web", key: "isPublic" },
        ],
        un = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ];
      function xn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(!1),
          u = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.notice.list, {
                params: { schoolId: e._id },
              });
              a(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          u();
        }, [e]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.role.list),
                t = [
                  { label: "All", value: "all" },
                  ...e.result.map((e) => ({ label: e.name, value: e._id })),
                ];
              d(t);
            } catch (e) {
              console.log(e);
            }
          })();
        }, [e]);
        const x = () => {
            i(!1), o(null);
          },
          h = (0, et.Wx)({
            initialValues: {
              title: s ? s.title : "",
              date:
                null !== s && void 0 !== s && s.date
                  ? Be()(s.date).format("YYYY/MM/DD")
                  : null,
              noticeFor: s ? s.noticeFor : "",
              notice: s ? s.notice : "",
              isPublic: !!s && s.isPublic,
            },
            onSubmit: async (t) => {
              try {
                const a = {
                  ...t,
                  schoolId: e._id,
                  date: Be()(t.date).format("YYYY/MM/DD"),
                };
                if ((m(!0), s)) {
                  await (0, Se.yJ)(ke.r.notice.update + "/" + s._id, a);
                  u();
                } else {
                  await (0, Se.bE)(ke.r.notice.create, a);
                  u();
                }
                x();
              } catch (a) {
                console.log(a);
              }
              m(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Notice" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              bodyDataModal: "Notice",
              bodyData: t,
              tableKeys: mn,
              adding: c,
              onEditClick: (e) => {
                console.log(e), o(e), i(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.notice.delete + "/" + e);
                  u();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Notice",
              onAddClick: () => {
                i(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: n,
              formik: h,
              formTitle: s ? "Update Notice" : "Add Notice",
              onClose: x,
              submitButtonTitle: s ? "Update" : "Submit",
              adding: c,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: h,
                      name: "title",
                      label: "Title",
                      type: "text",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      required: !0,
                      name: "date",
                      formik: h,
                      label: "Date",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      name: "noticeFor",
                      type: "text",
                      formik: h,
                      label: "Notice For",
                      options: r,
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: h,
                      name: "notice",
                      label: "Notice",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      name: "isPublic",
                      formik: h,
                      label: "View On Web",
                      options: un,
                      required: !0,
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const hn = [
          { name: "Title", key: "title" },
          { name: "Date", key: "date", isDate: !0 },
          { name: "View On Web", key: "isPublic" },
        ],
        pn = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ];
      function jn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(!1),
          [n, i] = (0, l.useState)(null),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          u = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.news.list, {
                params: { schoolId: e._id },
              });
              o(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          u();
        }, [e]);
        const x = () => {
            a(!1), i(null);
          },
          h = (0, et.Wx)({
            initialValues: {
              title: (null === n || void 0 === n ? void 0 : n.title) || "",
              date: (null === n || void 0 === n ? void 0 : n.date) || null,
              date:
                null !== n && void 0 !== n && n.date
                  ? Be()(n.date).format("YYYY/MM/DD")
                  : null,
              news: (null === n || void 0 === n ? void 0 : n.news) || "",
              shortNews:
                (null === n || void 0 === n ? void 0 : n.shortNews) || "",
              isPublic:
                (null === n || void 0 === n ? void 0 : n.isPublic) || !1,
            },
            onSubmit: async (t) => {
              try {
                const a = new FormData();
                if (
                  (a.append("title", t.title),
                  a.append("schoolId", e._id),
                  a.append("date", Be()(t.date).format("YYYY-MM-DD")),
                  a.append("news", t.news),
                  a.append("shortNews", t.shortNews),
                  a.append("isPublic", t.isPublic),
                  c.forEach((e) => a.append("file", e)),
                  d(!0),
                  n)
                ) {
                  await (0, Se.yJ)(ke.r.news.update + "/" + n._id, a, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                  u();
                } else {
                  await (0, Se.bE)(ke.r.news.create, a, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                  u();
                }
                x();
              } catch (a) {
                console.log(a);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "News" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              bodyDataModal: "News",
              bodyData: s,
              tableKeys: hn,
              onEditClick: (e) => {
                console.log(e), i(e), a(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.news.delete + "/" + e);
                  u();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add News",
              onAddClick: () => {
                a(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: t,
              formik: h,
              formTitle: n ? "Update News" : "Add News",
              onClose: x,
              submitButtonTitle: n ? "Update" : "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: h,
                      name: "title",
                      label: "Title",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      required: !0,
                      name: "date",
                      formik: h,
                      label: "Date",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      name: "isPublic",
                      formik: h,
                      label: "View On Web",
                      options: pn,
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Ol.A, {
                      multi: !1,
                      name: "image",
                      label: "Select Image",
                      onChange: (e) =>
                        ((e, t) => {
                          const { files: a } = e.target;
                          let l = [];
                          if (a.length > 0) {
                            for (let e = 0; e < a.length; e++) {
                              const t = a[e];
                              l.push(t);
                            }
                            m(l);
                          } else console.log("No files selected");
                        })(e),
                      previousFile:
                        null === n || void 0 === n ? void 0 : n.image,
                      customOnChange: !0,
                      selectedFiles: c,
                      onRemove: (e) =>
                        ((e, t) => {
                          console.log(e, "gii"),
                            m(c.filter((t) => t.name != e));
                        })(e),
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      name: "shortNews",
                      formik: h,
                      label: "Short News",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: h,
                      name: "news",
                      label: "News",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    display: "flex",
                    justifyContent: "center",
                    children:
                      n &&
                      n.image &&
                      (0, re.jsx)(re.Fragment, {
                        children: (0, re.jsx)("img", {
                          src: n.image,
                          alt: "image",
                          style: { maxWidth: "100px", marginTop: "10px" },
                        }),
                      }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const gn = [
          { name: "Title", key: "title" },
          { name: "From Date", key: "fromDate", isDate: !0 },
          { name: "To Date", key: "toDate", isDate: !0 },
          { name: "View On Web", key: "isPublic" },
        ],
        An = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ];
      function yn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(!1),
          [n, i] = (0, l.useState)(null),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)([]),
          j = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.holiday.list, {
                params: { schoolId: e._id },
              });
              o(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          j(), A();
        }, [e]);
        const g = () => {
            a(!1), i(null), j();
          },
          A = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: e._id },
              });
              p(t.result.map((e) => ({ label: e.name, value: e._id }))),
                y.setFieldValue("class", t.result[0]._id);
            } catch (t) {
              console.log(t);
            }
          },
          y = (0, et.Wx)({
            initialValues: {
              title: (null === n || void 0 === n ? void 0 : n.title) || "",
              fromDate:
                null !== n && void 0 !== n && n.fromDate
                  ? Be()(n.fromDate).format("YYYY/MM/DD")
                  : null,
              toDate:
                null !== n && void 0 !== n && n.toDate
                  ? Be()(n.toDate).format("YYYY/MM/DD")
                  : null,
              note: (null === n || void 0 === n ? void 0 : n.note) || "",
              isPublic:
                (null === n || void 0 === n ? void 0 : n.isPublic) || "",
              class: (null === n || void 0 === n ? void 0 : n.class) || "",
              section: (null === n || void 0 === n ? void 0 : n.section) || "",
            },
            onSubmit: async (t) => {
              try {
                const a = {
                  ...t,
                  schoolId: e._id,
                  fromDate: Be()(t.fromDate).format("YYYY/MM/DD"),
                  toDate: Be()(t.toDate).format("YYYY/MM/DD"),
                };
                if ((d(!0), n)) {
                  await (0, Se.yJ)(ke.r.holiday.update + "/" + n._id, a);
                } else {
                  await (0, Se.bE)(ke.r.holiday.create, a);
                }
                g();
              } catch (a) {
                console.log(a);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (
          (0, l.useEffect)(() => {
            y.values.class &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: y.values.class },
                    },
                  });
                  x(t.result.map((e) => ({ label: e.name, value: e._id }))),
                    y.setFieldValue("section", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [y.values.class, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Holiday" }),
              (0, re.jsx)(jt.A, {
                actions: ["edit", "delete"],
                bodyDataModal: "Holiday",
                bodyData: s,
                tableKeys: gn,
                onEditClick: (e) => {
                  i(e), a(!0);
                },
                onDeleteClick: async (e) => {
                  try {
                    await (0, Se.yH)(ke.r.holiday.delete + "/" + e);
                    j();
                  } catch (t) {
                    console.error(t);
                  }
                },
              }),
              (0, re.jsx)(rt, {
                title: "Add Holiday",
                onAddClick: () => {
                  a(!0);
                },
              }),
              (0, re.jsx)(pt, {
                open: t,
                formik: y,
                formTitle: n ? "Update Holiday" : "Add Holiday",
                onClose: g,
                submitButtonTitle: n ? "Update" : "Submit",
                adding: r,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: y,
                        name: "title",
                        label: "Title",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        required: !0,
                        name: "fromDate",
                        formik: y,
                        label: "From Date",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        required: !0,
                        name: "toDate",
                        formik: y,
                        label: "To Date",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        name: "isPublic",
                        formik: y,
                        label: "View On Web",
                        options: An,
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: y,
                        name: "note",
                        label: "Note",
                      }),
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      const fn = [
          { name: "Title", key: "title" },
          { name: "Date", key: "date", isDate: !0 },
          { name: "Location", key: "location" },
          { name: "View On Web", key: "isPublic" },
        ],
        vn = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ];
      function bn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          u = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.awards.list, {
                params: { schoolId: e._id },
              });
              a(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          u();
        }, [e]);
        const x = () => {
            i(!1), o(null);
          },
          h = (0, et.Wx)({
            initialValues: {
              title: (null === s || void 0 === s ? void 0 : s.title) || "",
              date:
                null !== s && void 0 !== s && s.date
                  ? Be()(s.date).format("YYYY/MM/DD")
                  : null,
              location:
                (null === s || void 0 === s ? void 0 : s.location) || "",
              hostedBy:
                (null === s || void 0 === s ? void 0 : s.hostedBy) || "",
              headlines:
                (null === s || void 0 === s ? void 0 : s.headlines) || "",
              note: (null === s || void 0 === s ? void 0 : s.note) || "",
              isPublic:
                (null === s || void 0 === s ? void 0 : s.isPublic) || !1,
            },
            onSubmit: async (t, a) => {
              let { resetForm: l } = a;
              const n = new FormData();
              n.append("title", t.title),
                n.append("date", Be()(t.date).format("YYYY-MM-DD")),
                n.append("location", t.location),
                n.append("hostedBy", t.hostedBy),
                n.append("headlines", t.headlines),
                n.append("note", t.note),
                n.append("isPublic", t.isPublic),
                c.forEach((e) => n.append("file", e)),
                n.append("schoolId", e._id);
              try {
                if ((d(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.awards.update + "/" + s._id,
                    n,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                  u();
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.awards.create, n, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                  l(), u();
                }
                x();
              } catch (i) {
                console.error(i);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Award And Achievements" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              bodyDataModal: "Award and Achievements",
              bodyData: t,
              tableKeys: fn,
              onEditClick: (e) => {
                console.log(e), o(e), i(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.awards.delete + "/" + e);
                  u();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Awards & Achievement",
              onAddClick: () => {
                i(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: n,
              formik: h,
              formTitle: s
                ? "Update Awards & Achievement"
                : "Add Awards & Achievement",
              onClose: x,
              submitButtonTitle: s ? "Update" : "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: h,
                      name: "title",
                      label: "Title",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: h,
                      name: "location",
                      label: "Location",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      required: !0,
                      name: "date",
                      formik: h,
                      label: "Date",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: h,
                      name: "hostedBy",
                      label: "Hosted By",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: h,
                      name: "headlines",
                      label: "Headlines",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Ol.A, {
                      multi: !1,
                      name: "image",
                      label: "Select Image",
                      onChange: (e) =>
                        ((e, t) => {
                          const { files: a } = e.target;
                          let l = [];
                          if (a.length > 0) {
                            for (let e = 0; e < a.length; e++) {
                              const t = a[e];
                              l.push(t);
                            }
                            m(l);
                          } else console.log("No files selected");
                        })(e),
                      customOnChange: !0,
                      selectedFiles: c,
                      previousFile:
                        null === s || void 0 === s ? void 0 : s.image,
                      onRemove: (e) =>
                        ((e, t) => {
                          m(c.filter((t) => t.name != e));
                        })(e),
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      name: "isPublic",
                      formik: h,
                      label: "View On Web",
                      options: vn,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: h,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    display: "flex",
                    justifyContent: "center",
                    children:
                      s &&
                      s.image &&
                      (0, re.jsx)(re.Fragment, {
                        children: (0, re.jsx)("img", {
                          src: s.image,
                          alt: "image",
                          style: { maxWidth: "100px", marginTop: "10px" },
                        }),
                      }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Sn = [
        { name: "Title", key: "title" },
        { name: "Text", key: "text" },
      ];
      function kn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(!1),
          [n, i] = (0, l.useState)(null),
          [s, o] = (0, l.useState)(!1),
          [r, d] = (0, l.useState)([]),
          c = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.splashNews.list, {
                  params: { schoolId: e._id },
                }),
                a = t.result.filter((e) => "Popup" !== e.type);
              d(a);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          c();
        }, [e]);
        const m = () => {
            a(!1), i(null);
          },
          u = (0, et.Wx)({
            initialValues: {
              title: (null === n || void 0 === n ? void 0 : n.title) || "",
              text: (null === n || void 0 === n ? void 0 : n.text) || "",
            },
            onSubmit: async (t, a) => {
              let { resetForm: l } = a;
              try {
                o(!0);
                const a = { ...t, schoolId: e._id };
                if ((c(), n)) {
                  await (0, Se.yJ)(ke.r.splashNews.update + "/" + n._id, a);
                  c();
                } else {
                  await (0, Se.bE)(ke.r.splashNews.create, a);
                  l(), c();
                }
                m();
              } catch (i) {
                console.log(i);
              }
              o(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete", "switch"],
              bodyDataModal: "Horizontal Splash News",
              bodyData: r,
              tableKeys: Sn,
              onEditClick: (e) => {
                console.log(e), i(e), a(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.splashNews.delete + "/" + e);
                  c();
                } catch (t) {
                  console.error(t);
                }
              },
              onToggleSwitch: async (e) => {
                try {
                  await (0, Se.yJ)(ke.r.splashNews.toggle + "/" + e._id);
                  c();
                } catch (t) {
                  console.error(t);
                }
              },
              toggleStatus: "enabled",
            }),
            (0, re.jsx)(rt, {
              title: "Add Horizontal Splash News",
              onAddClick: () => {
                a(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: t,
              formik: u,
              formTitle: n
                ? "Update Horizontal Splash News"
                : "Add Horizontal Splash News",
              onClose: m,
              submitButtonTitle: n ? "Update" : "Submit",
              adding: s,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "title",
                      label: "Title",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "text",
                      label: "Text",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Cn = [{ name: "Title", key: "title" }],
        Dn = [
          { label: "Link", value: "Link" },
          { label: "Text", value: "Text" },
          { label: "Image", value: "Image" },
          { label: "Document", value: "Document" },
        ];
      function wn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(!1),
          [n, i] = (0, l.useState)(null),
          [s, o] = (0, l.useState)(!1),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          h = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.splashNews.list, {
                  params: { schoolId: e._id },
                }),
                a = t.result.filter((e) => "Popup" === e.type);
              d(a);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          h();
        }, [e]);
        const p = () => {
            a(!1), i(null);
          },
          j = (0, et.Wx)({
            initialValues: {
              title: (null === n || void 0 === n ? void 0 : n.title) || "",
              contentType:
                (null === n || void 0 === n ? void 0 : n.contentType) || "",
              text: (null === n || void 0 === n ? void 0 : n.text) || "",
              link: (null === n || void 0 === n ? void 0 : n.link) || "",
              document:
                (null === n || void 0 === n ? void 0 : n.document) || "",
              image: (null === n || void 0 === n ? void 0 : n.image) || "",
            },
            onSubmit: async (t, a) => {
              let { resetForm: l } = a;
              const i = new FormData();
              i.append("title", t.title),
                i.append("link", t.link),
                i.append("text", t.text),
                i.append("type", "Popup"),
                i.append("contentType", t.contentType),
                i.append("schoolId", e._id),
                c.forEach((e) => i.append("image", e)),
                u.forEach((e) => i.append("document", e));
              try {
                if ((o(!0), n)) {
                  await (0, Se.yJ)(ke.r.splashNews.update + "/" + n._id, i, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                  h();
                } else {
                  await (0, Se.bE)(ke.r.splashNews.create, i, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                  l(), h();
                }
                p();
              } catch (s) {
                console.log(s);
              }
              o(!1);
            },
            enableReinitialize: !0,
          }),
          g = (e, t) => {
            m(c.filter((t) => t.name != e)), x(u.filter((t) => t.name != e));
          },
          A = (e, t) => {
            const { files: a } = e.target;
            let l = [];
            if (a.length > 0) {
              for (let e = 0; e < a.length; e++) {
                const t = a[e];
                l.push(t);
              }
              "image" === t ? m(l) : x(l);
            } else console.log("No files selected");
          };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete", "switch"],
              bodyDataModal: "Popup Splash News",
              bodyData: r,
              tableKeys: Cn,
              onEditClick: (e) => {
                console.log(e), i(e), a(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.splashNews.delete + "/" + e);
                  h();
                } catch (t) {
                  console.error(t);
                }
              },
              onToggleSwitch: async (e) => {
                try {
                  await (0, Se.yJ)(ke.r.splashNews.toggle + "/" + e._id);
                  h();
                } catch (t) {
                  console.error(t);
                }
              },
              toggleStatus: "enabled",
            }),
            (0, re.jsx)(rt, {
              title: "Add Vertical Splash News",
              onAddClick: () => {
                a(!0);
              },
            }),
            (0, re.jsxs)(pt, {
              open: t,
              formik: j,
              formTitle: n
                ? "Update Vertical Splash News"
                : "Add Vertical Splash News",
              onClose: p,
              submitButtonTitle: n ? "Update" : "Submit",
              adding: s,
              children: [
                (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "title",
                        label: "Title",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: j,
                        name: "contentType",
                        label: "Content Type",
                        required: !0,
                        options: Dn,
                      }),
                    }),
                    "Link" === j.values.contentType &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          formik: j,
                          name: "link",
                          label: "Link",
                          required: !0,
                        }),
                      }),
                    "Text" === j.values.contentType &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          formik: j,
                          name: "text",
                          label: "Text",
                          required: !0,
                        }),
                      }),
                    "Image" === j.values.contentType &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Ol.A, {
                          name: "image",
                          multi: !1,
                          label: "Select Photo",
                          onChange: (e) => A(e, "image"),
                          previousFile:
                            null === n || void 0 === n ? void 0 : n.image,
                          customOnChange: !0,
                          selectedFiles: c,
                          onRemove: (e) => g(e),
                          accept: "image/jpeg, image/png",
                        }),
                      }),
                    "Document" === j.values.contentType &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Ol.A, {
                          multi: !1,
                          name: "document",
                          label: "Select File",
                          onChange: (e) => A(e, "document"),
                          customOnChange: !0,
                          selectedFiles: u,
                          onRemove: (e) => g(e),
                          accept: "image/*,.pdf",
                        }),
                      }),
                  ],
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 12,
                  md: 12,
                  item: !0,
                  children:
                    n &&
                    n.image &&
                    (0, re.jsx)(re.Fragment, {
                      children: (0, re.jsx)("img", {
                        src: n.image,
                        alt: "image",
                        style: { maxWidth: "100px", marginTop: "10px" },
                      }),
                    }),
                }),
              ],
            }),
          ],
        });
      }
      function In() {
        const [e, t] = (0, l.useState)(0);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Splash News" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, a) => {
                t(a);
              },
              value: e,
              labels: ["Horizontal", "Popup"],
            }),
            (0, re.jsx)(Ct.A, {
              index: 0,
              value: e,
              children: (0, re.jsx)(kn, {}),
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: e,
              children: (0, re.jsx)(wn, {}),
            }),
          ],
        });
      }
      const Nn = [
        { name: "Gallery Title", key: "title" },
        { name: "View On Web", key: "isPublic" },
      ];
      function _n() {
        var e;
        const { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, o] = (0, l.useState)(0),
          [r, d] = (0, l.useState)(null),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)([]),
          [p, j] = (0, l.useState)(r ? Be()(r.date) : null);
        console.log(r, "gall dataToEdit");
        const g = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.gallery.list, {
                params: { schoolId: t._id },
              });
              n(e.result);
            } catch (e) {
              console.log(e);
            }
          },
          A = (0, et.Wx)({
            initialValues: {
              title: (null === r || void 0 === r ? void 0 : r.title) || "",
              note: (null === r || void 0 === r ? void 0 : r.note) || "",
              isPublic:
                (null === r || void 0 === r ? void 0 : r.isPublic) || !1,
              date:
                null !== r && void 0 !== r && r.date
                  ? Be()(r.date).format("YYYY/MM/DD")
                  : null,
            },
            onSubmit: async (e) => {
              const a = new FormData();
              a.append("title", e.title),
                a.append("date", Be()(e.date).format("YYYY-MM-DD")),
                a.append("isPublic", !!e.isPublic),
                a.append("note", e.note),
                u.forEach((e) => a.append("file", e)),
                a.append("schoolId", t._id);
              try {
                if ((m(!0), r)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.gallery.update + "/" + r._id,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.gallery.create, a, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                }
                y();
              } catch (l) {
                console.error(l);
              }
              m(!1);
            },
            enableReinitialize: !0,
          }),
          y = () => {
            o(0), d(null), x([]), g();
          };
        (0, l.useEffect)(() => {
          g();
        }, [t]);
        (0, l.useEffect)(() => {
          0 === i && A.resetForm();
        }, [i]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Gallery" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                o(t), d(null);
              },
              value: i,
              labels: [
                "Gallery List",
                "".concat(r && 0 != i ? "Edit Gallery" : "Add Gallery"),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 0,
              value: i,
              children: (0, re.jsx)(jt.A, {
                actions: ["edit", "delete"],
                bodyDataModal: "Gallery",
                bodyData: a,
                onEditClick: (e) => {
                  d(e), o(1);
                },
                tableKeys: Nn,
                onDeleteClick: async (e) => {
                  try {
                    const { data: t } = await (0, Se.Jt)(
                      ke.r.gallery.delete + "/" + e
                    );
                    g();
                  } catch (t) {
                    console.log(t);
                  }
                },
              }),
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: i,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  component: "form",
                  onSubmit: A.handleSubmit,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "title",
                        formik: A,
                        label: "Gallery Title",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: A,
                        label: "Date",
                        name: "date",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "isPublic",
                        formik: A,
                        label: "View On Web",
                        options: [
                          { label: "Yes", value: !0 },
                          { label: "No", value: !1 },
                        ],
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Ol.A, {
                        name: "images",
                        onChange: (e) =>
                          ((e, t) => {
                            const { files: a } = e.target;
                            let l = [];
                            if (a.length > 0) {
                              for (let e = 0; e < a.length; e++) {
                                const t = a[e];
                                l.push(t);
                              }
                              x(l);
                            } else console.log("No files selected");
                          })(e),
                        customOnChange: !0,
                        label: "Select Image",
                        selectedFiles: u,
                        onRemove: (e) =>
                          ((e, t) => {
                            x(u.filter((t) => t.name != e));
                          })(e),
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "note",
                        formik: A,
                        label: "Note",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      container: !0,
                      spacing: 2,
                      children: (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        md: 6,
                        lg: 12,
                        m: 2,
                        gap: 2,
                        sx: { display: "flex", overflowX: "auto" },
                        children:
                          null === r ||
                          void 0 === r ||
                          null === (e = r.images) ||
                          void 0 === e
                            ? void 0
                            : e.map((e, t) =>
                                (0, re.jsxs)(
                                  s.A,
                                  {
                                    sx: {
                                      justifyContent: "center",
                                      backgroundSize: "cover",
                                      "&:hover": {
                                        position: "relative",
                                        display: "inline-block",
                                      },
                                    },
                                    children: [
                                      (0, re.jsx)("img", {
                                        src: e,
                                        alt: "image",
                                        style: {
                                          width: "100px",
                                          height: "100px",
                                          borderRadius: "5px",
                                          boxShadow: "0px 0px 2px 0px gray",
                                          objectFit: "center",
                                        },
                                      }),
                                      (0, re.jsx)(h.A, {
                                        color: "error",
                                        "aria-label": "delete",
                                        onClick: () =>
                                          (async (e) => {
                                            try {
                                              const { data: t } = await (0,
                                              Se.yJ)(
                                                ke.r.gallery.removeFile +
                                                  "/" +
                                                  r._id,
                                                { file: e }
                                              );
                                              d(t.result);
                                            } catch (t) {
                                              console.log(t);
                                            }
                                          })(e),
                                        sx: {
                                          position: "absolute",
                                          top: 0,
                                          right: 0,
                                          borderRadius: "50px",
                                          padding: "2px",
                                          cursor: "pointer",
                                          background: "#DEE0E2",
                                        },
                                        children: (0, re.jsx)(Sa.A, {
                                          color: "error",
                                        }),
                                      }),
                                    ],
                                  },
                                  t
                                )
                              ),
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      style: { alignSelf: "center", marginTop: "10px" },
                      item: !0,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          color: "error",
                          variant: "contained",
                          onClick: y,
                          children: "Cancel",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          type: "submit",
                          variant: "contained",
                          sx: { ml: 2 },
                          children: "Submit",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const Tn = [
        { name: "Subject", key: "subject" },
        { name: "Type", key: "type" },
        { name: "Message", key: "message" },
        { name: "Total SMS", key: "totalSMS" },
        { name: "Time/Date", key: "female" },
      ];
      function Mn() {
        const [e, t] = (0, l.useState)([]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Notifications" }),
            (0, re.jsx)(jt.A, {
              actions: [],
              bodyDataModal: "Notifications",
              bodyData: e,
              tableKeys: Tn,
            }),
          ],
        });
      }
      const Fn = [
        { name: "Event Title", key: "title" },
        { name: "Location", key: "location" },
        { name: "From Date", key: "fromDate", isDate: !0 },
        { name: "To Date", key: "toDate", isDate: !0 },
        { name: "Hosted By", key: "hostedBy" },
      ];
      function zn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          h = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.event.list, {
                params: { schoolId: e._id },
              });
              a(t.result);
            } catch (t) {
              console.log(t);
            }
          },
          p = (0, et.Wx)({
            initialValues: {
              title: (null === s || void 0 === s ? void 0 : s.title) || "",
              eventFor:
                (null === s || void 0 === s ? void 0 : s.eventFor) || "",
              location:
                (null === s || void 0 === s ? void 0 : s.location) || "",
              fromDate:
                null !== s && void 0 !== s && s.fromDate
                  ? Be()(s.fromDate).format("YYYY/MM/DD")
                  : null,
              toDate:
                null !== s && void 0 !== s && s.toDate
                  ? Be()(s.toDate).format("YYYY/MM/DD")
                  : null,
              isPublic:
                (null === s || void 0 === s ? void 0 : s.isPublic) || !1,
              video: (null === s || void 0 === s ? void 0 : s.video) || null,
              shortEvent:
                (null === s || void 0 === s ? void 0 : s.shortEvent) || "",
              note: (null === s || void 0 === s ? void 0 : s.note) || "",
            },
            onSubmit: async (t) => {
              const a = new FormData();
              a.append("title", t.title),
                a.append("eventFor", t.eventFor),
                a.append("location", t.location),
                a.append("fromDate", Be()(t.fromDate).format("YYYY-MM-DD")),
                a.append("toDate", Be()(t.toDate).format("YYYY-MM-DD")),
                a.append("isPublic", !!t.isPublic),
                a.append("video", t.video),
                a.append("shortEvent", t.shortEvent),
                a.append("note", t.note),
                u.forEach((e) => a.append("file", e)),
                a.append("schoolId", e._id);
              try {
                if ((d(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.event.update + "/" + s._id,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.event.create, a, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                }
                j();
              } catch (l) {
                console.error(l);
              }
              d(!1);
            },
            enableReinitialize: !0,
          }),
          j = () => {
            i(!1), o(null), h();
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.role.list);
              m(e.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (e) {
              console.log(e);
            }
          })(),
            h();
        }, [e._id]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Events" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              bodyDataModal: "events",
              bodyData: t,
              tableKeys: Fn,
              onEditClick: (e) => {
                o(e), i(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.Jt)(
                    ke.r.event.delete + "/" + e
                  );
                  h();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Events",
              onAddClick: () => {
                i(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: n,
              formik: p,
              formTitle: "Add Events",
              onClose: j,
              submitButtonTitle: "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                component: "form",
                onSubmit: p.handleSubmit,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "title",
                      label: "Event Title",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: p,
                      name: "eventFor",
                      label: "Select Event For",
                      required: !0,
                      options: c,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "location",
                      label: "Location",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: p,
                      name: "fromDate",
                      label: "From Date",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      required: !0,
                      formik: p,
                      name: "toDate",
                      label: "To Date",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "hostedBy",
                      label: "Hosted By",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "video",
                      label: "Video Link",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Ol.A, {
                      name: "image",
                      onChange: (e) =>
                        ((e) => {
                          const { files: t } = e.target;
                          let a = [];
                          if (
                            (null === t || void 0 === t ? void 0 : t.length) > 0
                          ) {
                            for (
                              let e = 0;
                              e <
                              (null === t || void 0 === t ? void 0 : t.length);
                              e++
                            ) {
                              const l = t[e];
                              a.push(l);
                            }
                            x(a);
                          } else console.log("No files selected");
                        })(e),
                      customOnChange: !0,
                      label: "Select Photo",
                      selectedFiles: u,
                      previousFile:
                        null === s || void 0 === s ? void 0 : s.image,
                      multi: !1,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: p,
                      name: "isPublic",
                      label: "Is Web View",
                      options: [
                        { label: "Yes", value: !0 },
                        { label: "No", value: !1 },
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      required: !0,
                      formik: p,
                      name: "shortEvent",
                      label: "Short event",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: p,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const En = [
          { name: "Exam Grade", key: "grade" },
          { name: "Group", key: "group" },
          { name: "Grade Point", key: "gradePoint" },
          { name: "Percentage From", key: "markFrom" },
          { name: "Percentage To", key: "markTo" },
          { name: "Note", key: "note" },
        ],
        qn = [
          { label: "Scholastic", value: "scholastic" },
          { label: "Co-scholastic", value: "co-scholastic" },
        ];
      function Yn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          c = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.examGrade.list, {
                params: { schoolId: e._id },
              });
              a(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          c();
        }, [e]);
        const m = () => {
            i(!1), o(null), u.resetForm();
          },
          u = (0, et.Wx)({
            initialValues: {
              grade: (null === s || void 0 === s ? void 0 : s.grade) || "",
              group: (null === s || void 0 === s ? void 0 : s.group) || "",
              gradePoint:
                (null === s || void 0 === s ? void 0 : s.gradePoint) || "",
              markFrom:
                (null === s || void 0 === s ? void 0 : s.markFrom) || "",
              markTo: (null === s || void 0 === s ? void 0 : s.markTo) || "",
              note: (null === s || void 0 === s ? void 0 : s.note) || "",
            },
            onSubmit: async (t) => {
              const a = { ...t, schoolId: e._id };
              d(!0);
              try {
                if (s) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.examGrade.update + "/" + s._id,
                    a
                  );
                  c();
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.examGrade.create,
                    a
                  );
                  c();
                }
                m();
              } catch (l) {
                console.log(l);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Exam Grade" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: En,
              bodyDataModal: "exam grades",
              bodyData: t,
              onEditClick: (e) => {
                o(e), i(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.examGrade.delete + "/" + e);
                  c();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Exam Grade",
              onAddClick: () => {
                i(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: n,
              formik: u,
              formTitle: s ? "Update Exam Grade" : "Add Exam Grade",
              onClose: m,
              submitButtonTitle: s ? "Update" : "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "grade",
                      label: "Exam Grade",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: u,
                      name: "group",
                      label: "Group",
                      required: !0,
                      options: qn,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "gradePoint",
                      label: "Grade Point",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      required: !0,
                      name: "markFrom",
                      label: "Mark From",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      required: !0,
                      name: "markTo",
                      label: "Mark To",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Wn = [
          { name: "Exam Title", key: "title" },
          { name: "Type", key: "examType" },
        ],
        Rn = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ],
        Pn = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ],
        Jn = [
          { label: "General", value: "general" },
          { label: "Competitive", value: "competitive" },
        ];
      function Vn() {
        const [e, t] = (0, l.useState)([]),
          { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(!1),
          [r, d] = (0, l.useState)(null),
          c = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.examTerm.list, {
                params: { schoolId: a._id },
              });
              t(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          c();
        }, [a]);
        const m = () => {
            i(!1), d(null);
          },
          u = (0, et.Wx)({
            initialValues: {
              title: (null === r || void 0 === r ? void 0 : r.title) || "",
              examType:
                (null === r || void 0 === r ? void 0 : r.examType) || "",
              marksAssignmentAllowed:
                (null === r || void 0 === r
                  ? void 0
                  : r.marksAssignmentAllowed) || !1,
              note: (null === r || void 0 === r ? void 0 : r.note) || "",
              isPublic:
                (null === r || void 0 === r ? void 0 : r.isPublic) || !1,
            },
            onSubmit: async (e) => {
              try {
                const t = { ...e, schoolId: a._id };
                if ((o(!0), r)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.examTerm.update + "/" + r._id,
                    t
                  );
                  c();
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.examTerm.create, t);
                  c();
                }
                m();
              } catch (t) {
                console.log(t);
              }
              o(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Exam Term" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              bodyDataModal: "exam terms",
              bodyData: e,
              tableKeys: Wn,
              onEditClick: (e) => {
                d(e), i(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.examTerm.delete + "/" + e);
                  c();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Exam Term",
              onAddClick: () => {
                i(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: n,
              formik: u,
              formTitle: r ? "Update Exam Term" : "Add Exam Term",
              onClose: m,
              submitButtonTitle: r ? "Update" : "Submit",
              adding: s,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "title",
                      label: "Title",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: u,
                      name: "examType",
                      label: "Exam Type",
                      required: !0,
                      options: Jn,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: u,
                      name: "marksAssignmentAllowed",
                      label: "Marks Assignment Allowed",
                      options: Pn,
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: u,
                      name: "isPublic",
                      label: "View On Web",
                      options: Rn,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Bn = [
          { name: "Exam Title", key: "title" },
          { name: "Type", key: "examType" },
        ],
        On = [
          { name: "Subject", key: "name", path: "subject" },
          { name: "Date", key: "examDate", isDate: !0 },
          { name: "Time", key: "startTime" },
          { name: "Max Marks", key: "maximumMarks" },
          { name: "Min Marks", key: "minimumMarks" },
        ],
        Ln = [
          { label: "Active", value: "active" },
          { label: "In-Active", value: "inactive" },
        ];
      function Un() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(0),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)(null),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)([]),
          A = async (t) => {
            try {
              const { data: l } = await (0, Se.Jt)(ke.r.examSchedule.list, {
                params: {
                  schoolId: e._id,
                  search: { class: t.class, examTerm: t.examTerm },
                },
              });
              a(l.result.map((e) => ({ ...e, subject: e.subject })));
            } catch (l) {
              console.log(l);
            }
          },
          y = () => {
            d(!1), x(null), f.resetForm();
          },
          f = (0, et.Wx)({
            initialValues: { class: "", examTerm: "" },
            onSubmit: A,
            enableReinitialize: !0,
          }),
          v = (0, et.Wx)({
            initialValues: {
              examTerm:
                (null === u || void 0 === u ? void 0 : u.examTerm._id) || "",
              class: (null === u || void 0 === u ? void 0 : u.class._id) || "",
              subject:
                (null === u || void 0 === u ? void 0 : u.subject._id) || "",
              examDate:
                null !== u && void 0 !== u && u.examDate
                  ? Be()(u.examDate).format("YYYY/MM/DD")
                  : null,
              startTime:
                (null === u || void 0 === u ? void 0 : u.startTime) || "",
              endTime: (null === u || void 0 === u ? void 0 : u.endTime) || "",
              marksFreezDate:
                null !== u && void 0 !== u && u.marksFreezDate
                  ? Be()(
                      null === u || void 0 === u ? void 0 : u.marksFreezDate
                    ).format("YYYY/MM/DD")
                  : null,
              maximumMarks:
                (null === u || void 0 === u ? void 0 : u.maximumMarks) || "",
              pratical:
                (null === u || void 0 === u ? void 0 : u.pratical) || "",
              minimumMarks:
                (null === u || void 0 === u ? void 0 : u.minimumMarks) || "",
              praticalMarks:
                (null === u || void 0 === u ? void 0 : u.praticalMarks) || "",
              showInHallTick:
                (null === u || void 0 === u ? void 0 : u.showInHallTick) || "",
              showInExamResults:
                (null === u || void 0 === u ? void 0 : u.showInExamResults) ||
                "",
              orderSequence:
                (null === u || void 0 === u ? void 0 : u.orderSequence) || "",
              praticalMarks:
                (null === u || void 0 === u ? void 0 : u.praticalMarks) || "",
              showInHallTick:
                (null === u || void 0 === u ? void 0 : u.showInHallTick) || !0,
              showInExamResults:
                (null === u || void 0 === u ? void 0 : u.showInExamResults) ||
                !0,
              obtainedMarks:
                (null === u || void 0 === u ? void 0 : u.obtainedMarks) || 0,
            },
            onSubmit: async (t, a) => {
              let { resetForm: l } = a;
              try {
                const a = {
                  ...t,
                  schoolId: e._id,
                  examDate: Be()(t.examDate).format("YYYY/MM/DD"),
                  marksFreezDate: Be()(t.marksFreezDate).format("YYYY/MM/DD"),
                };
                if ((m(!0), u)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.examSchedule.update + "/" + u._id,
                    a
                  );
                  y();
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.examSchedule.create,
                    a
                  );
                  y();
                }
                l();
              } catch (n) {
                console.log(n);
              }
              m(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var t, a;
              const { data: l } = await (0, Se.Jt)(ke.r.examTerm.list, {
                params: { schoolId: e._id },
              });
              o(l.result.map((e) => ({ ...e, label: e.title, value: e._id }))),
                v.setFieldValue(
                  "examTerm",
                  null === (t = l.result[0]) || void 0 === t ? void 0 : t._id
                ),
                f.setFieldValue(
                  "examTerm",
                  null === (a = l.result[0]) || void 0 === a ? void 0 : a._id
                );
            } catch (l) {
              console.log(l);
            }
          })(),
            (async () => {
              try {
                var t, a;
                const { data: l } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                p(l.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  v.setFieldValue(
                    "class",
                    null === (t = l.result[0]) || void 0 === t ? void 0 : t._id
                  ),
                  f.setFieldValue(
                    "class",
                    null === (a = l.result[0]) || void 0 === a ? void 0 : a._id
                  );
              } catch (l) {
                console.log(l);
              }
            })();
        }, [e]),
          (0, l.useEffect)(() => {
            v.values.class &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.subject.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: v.values.class },
                    },
                  });
                  g(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    v.setFieldValue("subject", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [e, v.values.class]),
          (0, l.useEffect)(() => {
            f.values.class && f.values.examTerm && f.handleSubmit();
          }, [f.values.class, f.values.examTerm, e]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Exam Schedule" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                i(t);
              },
              value: n,
              labels: ["Exam List", "Schedule List"],
            }),
            (0, re.jsx)(Ct.A, {
              index: 0,
              value: n,
              children: (0, re.jsx)(jt.A, {
                actions: [],
                bodyDataModal: "exam list",
                bodyData: s,
                tableKeys: Bn,
              }),
            }),
            (0, re.jsxs)(Ct.A, {
              index: 1,
              value: n,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          name: "class",
                          formik: f,
                          label: "Select Class",
                          options: h,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          name: "examTerm",
                          formik: f,
                          label: "Select Exam",
                          options: s,
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(rt, {
                  title: "Add Exam Schedule",
                  onAddClick: () => {
                    d(!0);
                  },
                }),
                (0, re.jsx)(pt, {
                  open: r,
                  formik: v,
                  formTitle: u ? "Update Exam Schedule" : "Add Exam Schedule",
                  onClose: y,
                  submitButtonTitle: u ? "Update" : "Submit",
                  adding: c,
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 0,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: v,
                          name: "examTerm",
                          label: "Exam",
                          required: !0,
                          options: s,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: v,
                          name: "class",
                          label: "Class",
                          required: !0,
                          options: h,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: v,
                          name: "subject",
                          label: "Subject",
                          required: !0,
                          options: j,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          required: !0,
                          name: "examDate",
                          formik: v,
                          label: "Exam Date",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "startTime",
                          type: "time",
                          formik: v,
                          label: "Start Time",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "endTime",
                          type: "time",
                          formik: v,
                          label: "End Time",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 6,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          required: !0,
                          label: "Marks Freez Date",
                          formik: v,
                          name: "marksFreezDate",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "maximumMarks",
                          formik: v,
                          label: "Maximum Marks",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "minimumMarks",
                          formik: v,
                          label: "MinMarks",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: v,
                          name: "praticalMarks",
                          label: "Pratical Marks",
                          options: Ln,
                        }),
                      }),
                      "active" === v.values.praticalMarks &&
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "pratical",
                            formik: v,
                            label: "Pratical",
                          }),
                        }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          formik: v,
                          name: "orderSequence",
                          label: "Order Sequence",
                          required: !0,
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["edit", "delete"],
                  bodyDataModal: "schedule list",
                  bodyData: t,
                  tableKeys: On,
                  onEditClick: (e) => {
                    x(e), d(!0);
                  },
                  onDeleteClick: async (e) => {
                    try {
                      await (0, Se.yH)(ke.r.examSchedule.delete + "/" + e);
                      A(), f.handleSubmit();
                    } catch (t) {
                      console.error(t);
                    }
                  },
                }),
              ],
            }),
          ],
        });
      }
      function Hn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          r = (0, et.Wx)({
            initialValues: { exam: "", class: "", section: "" },
            onSubmit: console.log("nnnn"),
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                a(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  r.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.examTerm.list, {
                    params: { schoolId: e._id },
                  });
                  o(
                    t.result.map((e) => ({
                      ...e,
                      label: e.title,
                      value: e._id,
                    }))
                  ),
                    r.setFieldValue("exam", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [e]),
          (0, l.useEffect)(() => {
            r.values.class &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: r.values.class },
                    },
                  });
                  i(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    r.setFieldValue("section", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [r.values.class, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Exam Hall Ticket" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "exam",
                        formik: r,
                        label: "Select Exam",
                        options: s,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: r,
                        label: "Select Class",
                        options: t,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: r,
                        label: "Select Section",
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center" },
                      item: !0,
                      children: (0, re.jsx)($e.A, {
                        size: "small",
                        variant: "contained",
                        children: "Generate",
                      }),
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      function Gn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          r = (0, et.Wx)({
            initialValues: { class: "", section: "", exam: "" },
            onSubmit: console.log("nnnn"),
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                var t;
                const { data: l } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                a(l.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  r.setFieldValue(
                    "class",
                    null === (t = l.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (l) {
                console.log(l);
              }
            })(),
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.examTerm.list, {
                    params: { schoolId: e._id },
                  });
                  o(a.result.map((e) => ({ label: e.title, value: e._id }))),
                    r.setFieldValue(
                      "exam",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [e]),
          (0, l.useEffect)(() => {
            r.values.class &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: r.values.class },
                    },
                  });
                  i(
                    a.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    r.setFieldValue(
                      "section",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [r.values.class, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Division Wise Report" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: r,
                        label: "Select Class",
                        options: t,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: r,
                        label: "Select Section",
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "exam",
                        formik: r,
                        label: "Select Exam",
                        options: s,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center" },
                      item: !0,
                      children: (0, re.jsx)($e.A, {
                        size: "small",
                        variant: "contained",
                        children: "Find",
                      }),
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      function Kn() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          c = (0, et.Wx)({
            initialValues: { class: "", section: "", subject: "", exam: "" },
            onSubmit: console.log("nnnn"),
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                var t;
                const { data: l } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                a(l.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  c.setFieldValue(
                    "class",
                    null === (t = l.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (l) {
                console.log(l);
              }
            })(),
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.examTerm.list, {
                    params: { schoolId: e._id },
                  });
                  o(a.result.map((e) => ({ label: e.title, value: e._id }))),
                    c.setFieldValue(
                      "section",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [e]),
          (0, l.useEffect)(() => {
            c.values.class &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: c.values.class },
                    },
                  });
                  i(
                    a.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    c.setFieldValue(
                      "section",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [c.values.class, e]),
          (0, l.useEffect)(() => {
            c.values.class &&
              c.values.section &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.subject.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        class: c.values.class,
                        section: c.values.section,
                      },
                    },
                  });
                  d(
                    a.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    c.setFieldValue(
                      "subject",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [c.values.class, c.values.section, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Subject Wise Report" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: c,
                        label: "Select Class",
                        options: t,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: c,
                        label: "Select Section",
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "subject",
                        formik: c,
                        label: "Select Subject",
                        options: r,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "exam",
                        formik: c,
                        label: "Select Exam",
                        options: s,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center" },
                      item: !0,
                      children: (0, re.jsx)($e.A, {
                        size: "small",
                        variant: "contained",
                        children: "Find",
                      }),
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      const Qn = [{ name: "Name", key: "name" }];
      function Zn() {
        const [e, t] = (0, l.useState)([]),
          { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          c = (0, et.Wx)({
            initialValues: { class: "", section: "" },
            onSubmit: console.log("nnnn"),
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: a._id },
              });
              i(e.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                c.setFieldValue("class", e.result[0]._id);
            } catch (e) {
              console.log(e);
            }
          })();
        }, [a]),
          (0, l.useEffect)(() => {
            c.values.class &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: a._id,
                      search: { class: c.values.class },
                    },
                  });
                  o(
                    e.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    c.setFieldValue("section", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [c.values.class, a]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Consolidate Marks Sheet" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: c,
                      label: "Select Class",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: c,
                      label: "Select Section",
                      options: s,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center" },
                    item: !0,
                    children: (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      children: "Add exams",
                    }),
                  }),
                  (0, re.jsxs)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    item: !0,
                    display: "flex",
                    gap: 2,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "compress",
                          formik: c,
                          label: "Compress",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "exam",
                          formik: c,
                          label: "Select Exam",
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        display: "flex",
                        alignItems: "center",
                        children: [
                          (0, re.jsx)(h.A, {
                            color: "error",
                            children: (0, re.jsx)(Sa.A, {}),
                          }),
                          (0, re.jsx)($e.A, { children: "Add Subject" }),
                        ],
                      }),
                    ],
                  }),
                  (0, re.jsxs)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    item: !0,
                    display: "flex",
                    gap: 2,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "compress",
                          formik: c,
                          label: "Compress",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "subject",
                          formik: c,
                          label: "Select Subject",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        display: "flex",
                        alignItems: "center",
                        children: (0, re.jsx)(h.A, {
                          color: "error",
                          children: (0, re.jsx)(Sa.A, {}),
                        }),
                      }),
                    ],
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: [],
              bodyDataModal: "Consolidate marks card",
              bodyData: e,
              tableKeys: Qn,
            }),
          ],
        });
      }
      const $n = [
        { name: "Type", key: "type" },
        { name: "Published to web", key: "webPublish" },
        { name: "Published to app", key: "appPublish" },
      ];
      function Xn() {
        const [e, t] = (0, l.useState)([]),
          { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          c = (0, et.Wx)({
            initialValues: { academicYear: "", class: "", section: "" },
            onSubmit: console.log("nnnn"),
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: a._id },
                });
                o(e.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  c.setFieldValue("class", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                  i(
                    e.result.map((e) => ({
                      ...e,
                      label: "".concat(e.from, "-").concat(e.to),
                      value: e._id,
                    }))
                  ),
                    c.setFieldValue("academicYear", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [a]),
          (0, l.useEffect)(() => {
            c.values.class &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: a._id,
                      search: { class: c.values.class },
                    },
                  });
                  d(
                    e.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    c.setFieldValue("section", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [c.values.class, a]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Marks Card" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "academicYear",
                        formik: c,
                        label: "Select Academic Year",
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: c,
                        label: "Select Class",
                        options: s,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: c,
                        label: "Select Section",
                        options: r,
                      }),
                    }),
                  ],
                }),
              }),
              (0, re.jsx)(jt.A, {
                actions: [],
                bodyDataModal: "marks card",
                bodyData: e,
                tableKeys: $n,
              }),
            ],
          })
        );
      }
      const ei = [
        { name: "Name", key: "name" },
        { name: "Roll No", key: "roleNumber" },
        { name: "Photo", key: "image", type: "image" },
        { name: "Exam Mark", key: "totalMarks" },
        { name: "Obtained Mark", key: "obtainedMarks" },
        { name: "Percentage", key: "percentage" },
        { name: "Grade", key: "overallGrade" },
      ];
      function ti(e) {
        var t, a;
        let {
          title: n = "",
          open: i = !1,
          tableData: o,
          onClose: r = () => {},
        } = e;
        const { isDarkMode: d } = (0, l.useContext)(st.A);
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(ct.A, {
            onClose: r,
            "aria-labelledby": "customized-dialog-title",
            open: i,
            children: [
              (0, re.jsx)(mt.A, {
                sx: {
                  m: 0,
                  p: 2,
                  backgroundColor: d ? "#333" : "#fff",
                  color: d ? "#fff" : "#000",
                },
                id: "customized-dialog-title",
                children: n,
              }),
              (0, re.jsx)(h.A, {
                "aria-label": "close",
                onClick: r,
                sx: {
                  position: "absolute",
                  right: 8,
                  top: 8,
                  color: d ? "#fff" : "#000",
                },
                children: (0, re.jsx)(Sa.A, {}),
              }),
              (0, re.jsxs)(ut.A, {
                sx: {
                  backgroundColor: d ? "#333" : "#fff",
                  color: d ? "#fff" : "#000",
                },
                children: [
                  (0, re.jsxs)(ia.A, {
                    children: [
                      (0, re.jsx)(sa.A, {
                        sx: {
                          backgroundColor: (e) =>
                            "dark" === e.palette.mode
                              ? e.palette.primary.dark
                              : e.palette.primary.light,
                        },
                        children: (0, re.jsxs)(oa.A, {
                          children: [
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: "S.No",
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: "Subject",
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: "Total Marks",
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: "Obtained Marks",
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: "Grade",
                            }),
                          ],
                        }),
                      }),
                      (0, re.jsx)(ca.A, {
                        children:
                          null === o ||
                          void 0 === o ||
                          null === (t = o.subjects) ||
                          void 0 === t
                            ? void 0
                            : t.map((e, t) => {
                                var a;
                                return (0, re.jsxs)(oa.A, {
                                  children: [
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: t + 1,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children:
                                        null === e ||
                                        void 0 === e ||
                                        null === (a = e.subject) ||
                                        void 0 === a
                                          ? void 0
                                          : a.name,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children:
                                        null === e || void 0 === e
                                          ? void 0
                                          : e.totalMarks,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children:
                                        null === e || void 0 === e
                                          ? void 0
                                          : e.obtainedMarks,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children:
                                        null === e || void 0 === e
                                          ? void 0
                                          : e.grade,
                                    }),
                                  ],
                                });
                              }),
                      }),
                    ],
                  }),
                  (0, re.jsxs)(s.A, {
                    mt: 1,
                    children: [
                      (0, re.jsxs)(u.A, {
                        variant: "subtitle1",
                        children: [
                          (0, re.jsx)("b", { children: "Total Subject:" }),
                          " ",
                          null === (a = o.subjects) || void 0 === a
                            ? void 0
                            : a.length,
                        ],
                      }),
                      (0, re.jsxs)(u.A, {
                        variant: "subtitle1",
                        children: [
                          (0, re.jsx)("b", { children: "Max Marks:" }),
                          " ",
                          o.totalMarks,
                        ],
                      }),
                      (0, re.jsxs)(u.A, {
                        variant: "subtitle1",
                        children: [
                          (0, re.jsx)("b", { children: "Obtained Marks:" }),
                          " ",
                          o.obtainedMarks,
                        ],
                      }),
                      (0, re.jsxs)(u.A, {
                        variant: "subtitle1",
                        children: [
                          (0, re.jsx)("b", { children: "Percentage: " }),
                          o.percentage ? o.percentage.toFixed(2) : "0.00",
                          "%",
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            ],
          }),
        });
      }
      function ai() {
        const [e, t] = (0, l.useState)([]),
          { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)(!1),
          [h, p] = (0, l.useState)(!1),
          [j, g] = (0, l.useState)(!1),
          [A, y] = (0, l.useState)(!1),
          [f, v] = (0, l.useState)({
            open: !1,
            tableData: "",
            action: () => {},
          }),
          b = (0, et.Wx)({
            initialValues: { class: "", section: "", exam: "" },
            onSubmit: async (e) => {
              try {
                const { data: l } = await (0, Se.Jt)(
                  ke.r.studentMarks.getExamResult,
                  {
                    params: {
                      schoolId: a._id,
                      classId: e.class,
                      sectionId: e.section,
                      examId: e.exam,
                    },
                  }
                );
                t(
                  l.result.map((e) => {
                    var t, a, l;
                    return {
                      ...e,
                      name:
                        null === (t = e.student.basicInfo) || void 0 === t
                          ? void 0
                          : t.name,
                      roleNumber:
                        null === (a = e.student.academicInfo) || void 0 === a
                          ? void 0
                          : a.rollNumber,
                      image:
                        null === (l = e.student) || void 0 === l
                          ? void 0
                          : l.photo,
                    };
                  })
                );
              } catch (l) {
                console.log(l);
              }
            },
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: a._id },
              });
              i(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                b.setFieldValue(
                  "class",
                  null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                var e;
                const { data: t } = await (0, Se.Jt)(ke.r.examTerm.list, {
                  params: { schoolId: a._id },
                });
                d(t.result.map((e) => ({ label: e.title, value: e._id }))),
                  b.setFieldValue(
                    "exam",
                    null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                  );
              } catch (t) {
                console.log(t);
              }
            })();
        }, [a]),
          (0, l.useEffect)(() => {
            b.values.class &&
              (async () => {
                try {
                  var e;
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: a._id,
                      search: { class: b.values.class },
                    },
                  });
                  o(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    b.setFieldValue(
                      "section",
                      null === (e = t.result[0]) || void 0 === e
                        ? void 0
                        : e._id
                    );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [b.values.class, a]),
          console.log(e, "bvd");
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Exam Result" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: b,
                      label: "Select Class",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: b,
                      label: "Select Section",
                      options: s,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "exam",
                      formik: b,
                      label: "Select Exam",
                      options: r,
                    }),
                  }),
                  (0, re.jsxs)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    sx: { alignSelf: "center" },
                    item: !0,
                    children: [
                      (0, re.jsx)(ht.A, {
                        onClick: b.handleSubmit,
                        size: "small",
                        variant: "contained",
                        children: "Find",
                      }),
                      (0, re.jsx)(ht.A, {
                        onClick: () => y(!0),
                        size: "small",
                        variant: "contained",
                        sx: { ml: 1 },
                        children: "Bulk Upload",
                      }),
                    ],
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["view", "download"],
              bodyDataModal: "exam result",
              bodyData: e,
              tableKeys: ei,
              onViewClick: (e) => {
                console.log(e, "vvvvvb"), v({ ...f, open: !0, tableData: e });
              },
            }),
            (0, re.jsx)(ti, {
              title: "Exam Result Information",
              open: null === f || void 0 === f ? void 0 : f.open,
              tableData:
                (null === f || void 0 === f ? void 0 : f.tableData) || [],
              onClose: (e) => {
                v({ ...f, open: !1 });
              },
            }),
          ],
        });
      }
      function li(e) {
        let {
          name: t,
          label: a = "default label",
          required: l = !1,
          onChange: n = () => {},
          value: s,
          style: o = {},
          ...r
        } = e;
        const d = (0, i.A)();
        return (0, re.jsx)(Mt.A, {
          required: l,
          id: t,
          name: t,
          label: a,
          placeholder: "Enter ".concat(a),
          fullWidth: !0,
          value: s || "",
          onChange: n,
          sx: {
            mt: 2,
            borderWidth: 1,
            borderRadius: d.shape.borderRadius,
            ...o,
          },
          variant: "outlined",
          InputLabelProps: { shrink: !0 },
          InputProps: {
            multiple: !0,
            style: {
              borderWidth: 1,
              height: "40px",
              borderRadius: d.shape.borderRadius,
            },
          },
          ...r,
        });
      }
      const ni = { bgcolor: "background.paper", height: "auto", p: 2 };
      function ii() {
        const [e, t] = (0, l.useState)([]),
          a = (0, i.A)(),
          n = (0, dt.A)(a.breakpoints.down("sm")),
          { selectedSetting: o } = (0, l.useContext)(Ce.A),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [x, h] = (0, l.useState)([]),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)([]),
          [y, f] = (0, l.useState)(!1),
          [v, S] = (0, l.useState)(!1),
          [k, C] = (0, l.useState)(!1),
          [D, w] = (0, l.useState)([]),
          I = (0, et.Wx)({
            initialValues: { exam: "", class: "", section: "", subject: "" },
            onSubmit: async (e) => {
              try {
                S(!0);
                const { data: t } = await (0, Se.Jt)(
                  ke.r.studentMarks.listStudentMarks,
                  {
                    params: {
                      schoolId: o._id,
                      classId: e.class,
                      sectionId: e.section,
                      subjectId: e.subject,
                      examId: e.exam,
                    },
                  }
                );
                S(!1);
                let a = t.result.map((e) => {
                  var t, a, l, n;
                  return {
                    rollNumber: e.academicInfo.rollNumber,
                    name: e.basicInfo.name,
                    studentId: e._id,
                    obtainedMarks:
                      (null === (t = e.studentMarks) || void 0 === t
                        ? void 0
                        : t.obtainedWrittenMarks) || 0,
                    comment:
                      (null === (a = e.studentMarks) || void 0 === a
                        ? void 0
                        : a.comment) || "",
                    grade:
                      (null === (l = e.studentMarks) ||
                      void 0 === l ||
                      null === (n = l.grade) ||
                      void 0 === n
                        ? void 0
                        : n.grade) || "NA",
                  };
                });
                A(a);
              } catch (t) {
                S(!1), console.log(t);
              }
            },
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: o._id },
              });
              d(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                I.setFieldValue(
                  "class",
                  null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                var e;
                const { data: t } = await (0, Se.Jt)(ke.r.examTerm.list, {
                  params: { schoolId: o._id },
                });
                h(t.result.map((e) => ({ label: e.title, value: e._id }))),
                  I.setFieldValue(
                    "exam",
                    null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                  );
              } catch (t) {
                console.log(t);
              }
            })();
        }, [o]),
          (0, l.useEffect)(() => {
            I.values.class &&
              (async () => {
                try {
                  var e;
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: o._id,
                      search: { class: I.values.class },
                    },
                  });
                  m(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    I.setFieldValue(
                      "section",
                      null === (e = t.result[0]) || void 0 === e
                        ? void 0
                        : e._id
                    );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [I.values.class, o]),
          (0, l.useEffect)(() => {
            I.values.class &&
              I.values.section &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.subject.list, {
                    params: {
                      schoolId: o._id,
                      search: { class: I.values.class },
                    },
                  });
                  j(
                    e.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    I.setFieldValue("subject", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [I.values.class, I.values.section, o]),
          (0, l.useEffect)(() => {
            A([]);
          }, [I.values]);
        const N = (e, t) => {
          let a = [...g];
          (a[t][e.target.name] = e.target.value), A(a);
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Manage Marks" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: I,
                      label: "Select Class",
                      options: r,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: I,
                      label: "Select Section",
                      options: c,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "exam",
                      formik: I,
                      label: "Select Exam",
                      options: x,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "subject",
                      formik: I,
                      label: "Select Subject",
                      options: p,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center" },
                    item: !0,
                    children: (0, re.jsxs)(b.A, {
                      direction: "row",
                      spacing: 2,
                      children: [
                        (0, re.jsx)(ht.A, {
                          loading: v,
                          onClick: I.handleSubmit,
                          size: "small",
                          variant: "contained",
                          children: "Find",
                        }),
                        (0, re.jsx)($e.A, {
                          onClick: () => C(!0),
                          size: "small",
                          variant: "contained",
                          children: "Bulk Update",
                        }),
                      ],
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(na.A, {
              component: ue.A,
              children: (0, re.jsxs)(ia.A, {
                children: [
                  (0, re.jsx)(sa.A, {
                    sx: {
                      backgroundColor: (e) =>
                        "dark" === e.palette.mode
                          ? e.palette.primary.dark
                          : e.palette.primary.light,
                    },
                    children: (0, re.jsxs)(oa.A, {
                      children: [
                        (0, re.jsx)(ra.A, {
                          align: "center",
                          children: "S.No",
                        }),
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "Name",
                        }),
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "Roll Number",
                        }),
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "Obtained Marks",
                        }),
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "Grade",
                        }),
                        (0, re.jsx)(ra.A, {
                          sx: { fontWeight: "bold" },
                          align: "center",
                          children: "Comment",
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(ca.A, {
                    children: g.map((e, t) =>
                      (0, re.jsxs)(
                        oa.A,
                        {
                          children: [
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: t + 1,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: e.name,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: e.rollNumber,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: (0, re.jsx)(li, {
                                type: "number",
                                style: { maxWidth: "150px" },
                                name: "obtainedMarks",
                                value: e.obtainedMarks,
                                label: "Obtained Marks",
                                onChange: (e) => N(e, t),
                              }),
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: e.grade,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: (0, re.jsx)(li, {
                                style: { maxWidth: "200px" },
                                name: "comment",
                                value: e.comment,
                                label: "Comment",
                                onChange: (e) => N(e, t),
                              }),
                            }),
                          ],
                        },
                        e.studentId
                      )
                    ),
                  }),
                ],
              }),
            }),
            g.length > 0 &&
              (0, re.jsx)(Gl, {
                content: (0, re.jsx)("div", {
                  style: { display: "flex", justifyContent: "flex-end" },
                  children: (0, re.jsx)(ht.A, {
                    loading: y,
                    size: "small",
                    sx: {
                      background: "#1b3779",
                      ":hover": { background: "#1b3779" },
                    },
                    onClick: async () => {
                      try {
                        const e = {
                          schoolId: o._id,
                          classId: I.values.class,
                          sectionId: I.values.section,
                          subjectId: I.values.subject,
                          examId: I.values.exam,
                          studentMarks: g,
                        };
                        f(!0);
                        const { data: t } = await (0, Se.yJ)(
                          ke.r.studentMarks.updateStudentsMarks,
                          e
                        );
                        A(
                          t.result.map((e) => {
                            var t;
                            return {
                              studentId: e.student._id,
                              rollNumber: e.student.academicInfo.rollNumber,
                              name: e.student.basicInfo.name,
                              obtainedMarks: e.obtainedWrittenMarks || 0,
                              comment: e.comment,
                              grade:
                                (null === e ||
                                void 0 === e ||
                                null === (t = e.grade) ||
                                void 0 === t
                                  ? void 0
                                  : t.grade) || "NA",
                            };
                          })
                        ),
                          f(!1);
                      } catch (e) {
                        console.log(e), f(!1);
                      }
                    },
                    variant: "contained",
                    children: "Update",
                  }),
                }),
              }),
            (0, re.jsx)(ct.A, {
              fullScreen: n,
              open: k,
              onClose: () => C(!1),
              "aria-labelledby": "modal-modal-title",
              "aria-describedby": "modal-modal-description",
              sx: {
                "& .MuiDialog-container": {
                  "& .MuiPaper-root": {
                    width: "100%",
                    maxWidth: { xs: "100%", sm: 350, md: 350, lg: 350 },
                  },
                },
              },
              children: (0, re.jsx)(s.A, {
                component: "form",
                onSubmit: async (e) => {
                  e.preventDefault();
                  try {
                    const e = new FormData();
                    e.append("schoolId", o._id),
                      e.append("classId", I.values.class),
                      e.append("sectionId", I.values.section),
                      e.append("subjectId", I.values.subject),
                      e.append("examTermId", I.values.exam),
                      D.forEach((t) => e.append("file", t));
                    const { data: t } = await (0, Se.yJ)(
                      ke.r.studentMarks.bulkUpdateStudentMarks,
                      e,
                      { headers: { "Content-Type": "multipart/form-data" } }
                    );
                  } catch (t) {}
                },
                sx: ni,
                children: (0, re.jsxs)(xe.Ay, {
                  container: !0,
                  spacing: 1,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 12,
                      lg: 12,
                      children: (0, re.jsx)(u.A, {
                        variant: "h6",
                        component: "h2",
                        textAlign: "center",
                        fontSize: "20px",
                        fontWeight: "bold",
                        children: "Bulk Upload",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 12,
                      lg: 12,
                      children: (0, re.jsx)(ht.A, {
                        variant: "contained",
                        sx: {
                          width: "100%",
                          background: "rgb(27, 55, 121)",
                          ":hover": { background: "rgb(27, 55, 121)" },
                          color: "#fff",
                        },
                        endIcon: (0, re.jsx)(Bl.A, {}),
                        onClick: async (e) => {
                          e.preventDefault();
                          try {
                            const { data: e } = await (0, Se.Jt)(
                              ke.r.studentMarks.getbulkUpdateStudentMarks,
                              {
                                params: {
                                  schoolId: o._id,
                                  classId: I.values.class,
                                  sectionId: I.values.section,
                                  subjectId: I.values.subject,
                                  examTermId: I.values.exam,
                                },
                                responseType: "blob",
                              }
                            );
                            Dl(
                              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                              e,
                              "studentMarks"
                            );
                          } catch (t) {}
                        },
                        children: "Download",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 12,
                      lg: 12,
                      children: (0, re.jsx)(ht.A, {
                        variant: "contained",
                        style: {
                          width: "100%",
                          background: "rgb(27, 55, 121)",
                          ":hover": { background: "rgb(27, 55, 121)" },
                        },
                        endIcon: (0, re.jsx)(Bl.A, {}),
                        children: "Download All Students",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 12,
                      lg: 12,
                      children: (0, re.jsx)(Ol.A, {
                        name: "student_marks",
                        label: "Select updated File",
                        onChange: (e) =>
                          ((e, t) => {
                            const { files: a } = e.target;
                            let l = [];
                            if (a.length > 0) {
                              for (let e = 0; e < a.length; e++) {
                                const t = a[e];
                                l.push(t);
                              }
                              w(l);
                            } else console.log("No files selected");
                          })(e),
                        customOnChange: !0,
                        selectedFiles: D,
                        onRemove: (e) =>
                          ((e, t) => {
                            w(D.filter((t) => t.name != e));
                          })(e),
                        multi: !1,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 12,
                      lg: 12,
                      display: "flex",
                      justifyContent: "flex-end",
                      children: (0, re.jsx)(ht.A, {
                        variant: "contained",
                        sx: {
                          background: "rgb(27, 55, 121)",
                          ":hover": { background: "rgb(27, 55, 121)" },
                        },
                        type: "submit",
                        children: "Update Marks",
                      }),
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const si = [
        { name: "Photo", key: "image" },
        { name: "Name", key: "name" },
        { name: "Phone", key: "contactNumber" },
        { name: "Roll No", key: "roleNumber" },
        { name: "Attend All", key: "true" },
      ];
      function oi() {
        const [e, t] = (0, l.useState)([]),
          { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          u = (0, et.Wx)({
            initialValues: { class: "", section: "", exam: "", subject: "" },
            onSubmit: console.log("nnnn"),
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: a._id },
                });
                i(e.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  u.setFieldValue("class", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  var e;
                  const { data: t } = await (0, Se.Jt)(ke.r.examTerm.list, {
                    params: { schoolId: a._id },
                  });
                  d(t.result.map((e) => ({ label: e.title, value: e._id }))),
                    u.setFieldValue(
                      "exam",
                      null === (e = t.result[0]) || void 0 === e
                        ? void 0
                        : e._id
                    );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [a]),
          (0, l.useEffect)(() => {
            u.values.class &&
              (async () => {
                try {
                  var e;
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: a._id,
                      search: { class: u.values.class },
                    },
                  });
                  o(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    u.setFieldValue(
                      "section",
                      null === (e = t.result[0]) || void 0 === e
                        ? void 0
                        : e._id
                    );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [u.values.class, a]),
          (0, l.useEffect)(() => {
            u.values.class &&
              u.values.section &&
              (async () => {
                try {
                  var e;
                  const { data: t } = await (0, Se.Jt)(ke.r.subject.list, {
                    params: {
                      schoolId: a._id,
                      search: {
                        class: u.values.class,
                        section: u.values.section,
                      },
                    },
                  });
                  m(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    u.setFieldValue(
                      "subject",
                      null === (e = t.result[0]) || void 0 === e
                        ? void 0
                        : e._id
                    );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [u.values.class, u.values.section, a]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Exam Attendance" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: u,
                        label: "Select Class",
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: u,
                        label: "Select Section",
                        options: s,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "exam",
                        formik: u,
                        label: "Select Exam",
                        options: r,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "subject",
                        formik: u,
                        label: "Select Subject",
                        options: c,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center" },
                      item: !0,
                      children: (0, re.jsx)($e.A, {
                        size: "small",
                        variant: "contained",
                        children: "Find",
                      }),
                    }),
                  ],
                }),
              }),
              (0, re.jsx)(jt.A, {
                actions: [],
                bodyDataModal: "exam attendance",
                bodyData: e,
                tableKeys: si,
              }),
            ],
          })
        );
      }
      var ri = a(87539),
        di = a(98533);
      const ci = (0, n.Ay)(ra.A)(() => ({ textAlign: "center" })),
        mi = (0, n.Ay)(ra.A)(() => ({
          fontWeight: "bold",
          textAlign: "center",
          color: "#ffff",
        })),
        ui = (0, n.Ay)(s.A)(() => ({
          background: "rgb(133 140 223 / 19%)",
          width: "100%",
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          borderRadius: "10px",
          color: "black",
        }));
      function xi() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          t = (0, i.A)(),
          a = (0, dt.A)(t.breakpoints.down("sm")),
          [n, s] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          [m, x] = (0, l.useState)(""),
          [p, j] = (0, l.useState)(),
          [g, A] = l.useState(!1),
          [y, f] = l.useState(!1),
          [v, k] = (0, l.useState)(null),
          [C, D] = (0, l.useState)(null),
          [w, I] = (0, l.useState)(!1),
          N = (0, _.Zp)(),
          [T, M] = l.useState(0),
          [F, z] = l.useState(10);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: e._id },
              });
              r(t.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (t) {
              console.log(t);
            }
          })();
        }, [e]);
        const E = async () => {
          try {
            const { data: t } = await (0, Se.Jt)(ke.r.course.list, {
              params: { schoolId: e._id, search: { classIds: d } },
            });
            s(t.result);
          } catch (t) {
            console.error(t);
          }
        };
        (0, l.useEffect)(() => {
          d && E();
        }, [d, e._id]);
        const q = () => {
            A(!1), k(null);
          },
          Y = async (e) => {
            try {
              await (0, Se.yH)(ke.r.course.delete + "/" + e);
              E();
            } catch (t) {
              console.error(t);
            }
          };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Courses" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsx)(xe.Ay, {
                container: !0,
                spacing: 2,
                display: "flex",
                justifyContent: "flex-end",
                alignItems: "center",
                children: (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  md: 6,
                  lg: 3,
                  children: (0, re.jsx)(hl, {
                    required: !0,
                    name: "class",
                    multiple: !0,
                    value: d,
                    onChange: (e) => {
                      c(e.target.value);
                    },
                    label: "Select Class",
                    options: o,
                  }),
                }),
              }),
            }),
            (0, re.jsxs)(na.A, {
              component: ue.A,
              children: [
                (0, re.jsxs)(ia.A, {
                  size: "small",
                  children: [
                    (0, re.jsx)(sa.A, {
                      sx: {
                        backgroundColor: (e) =>
                          "dark" === e.palette.mode
                            ? e.palette.primary.dark
                            : e.palette.primary.light,
                      },
                      children: (0, re.jsxs)(oa.A, {
                        children: [
                          (0, re.jsx)(mi, { children: "S.No" }),
                          (0, re.jsx)(mi, { children: "Class" }),
                          (0, re.jsx)(mi, { children: "Course Name" }),
                          (0, re.jsx)(mi, { children: "Subject " }),
                          (0, re.jsx)(mi, { children: "Duration" }),
                          (0, re.jsx)(mi, { children: "Content" }),
                          (0, re.jsx)(mi, { children: "Material" }),
                          (0, re.jsx)(mi, { children: "Action" }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(ca.A, {
                      children: n.slice(T * F, T * F + F).map((e, t) =>
                        (0, re.jsxs)(
                          oa.A,
                          {
                            children: [
                              (0, re.jsx)(ci, { children: t + 1 }),
                              (0, re.jsx)(ci, {
                                children: e.class
                                  .map((e) => e.name)
                                  .join(" | "),
                              }),
                              (0, re.jsx)(ci, { children: e.title }),
                              (0, re.jsx)(ci, {
                                children:
                                  e.class.length > 1
                                    ? "Universal"
                                    : e.subject.name,
                              }),
                              (0, re.jsx)(ci, { children: e.courseHours }),
                              (0, re.jsx)(ci, {
                                children: (0, re.jsx)($e.A, {
                                  onClick: () =>
                                    ((e) => {
                                      const t = n.find((t) => t._id === e);
                                      if (t) {
                                        const a = t.title;
                                        N("/sch/lms/course-content", {
                                          state: {
                                            selectedCourseIds: e,
                                            selectedCourseTitle: a,
                                          },
                                        });
                                      }
                                    })(e._id),
                                  children: "Upload",
                                }),
                              }),
                              (0, re.jsx)(ci, {
                                children: (0, re.jsx)(S.A, {
                                  title: "Upload Material",
                                  children: (0, re.jsx)($e.A, {
                                    onClick: () =>
                                      ((e, t) => {
                                        if ((A(!0), x(e), t)) {
                                          const e = new URL(t),
                                            a = decodeURIComponent(
                                              e.pathname.split("/").pop()
                                            );
                                          k(a);
                                        }
                                        j(t);
                                      })(e._id, e.material),
                                    children: (0, re.jsx)(ri.A, {}),
                                  }),
                                }),
                              }),
                              (0, re.jsxs)(ci, {
                                children: [
                                  (0, re.jsx)(S.A, {
                                    title: "Edit",
                                    children: (0, re.jsx)($e.A, {
                                      onClick: () =>
                                        ((e) => {
                                          N(
                                            "/sch/lms/edit-courses/".concat(
                                              e._id
                                            ),
                                            { state: { courseData: e } }
                                          );
                                        })(e),
                                      children: (0, re.jsx)(Ga.A, {
                                        color: "primary",
                                        fontSize: "small",
                                      }),
                                    }),
                                  }),
                                  (0, re.jsx)(S.A, {
                                    title: "Delete",
                                    children: (0, re.jsx)(h.A, {
                                      color: "error",
                                      size: "small",
                                      onClick: () => f(e._id),
                                      children: (0, re.jsx)($a.A, {
                                        color: "error",
                                        fontSize: "small",
                                      }),
                                    }),
                                  }),
                                  (0, re.jsx)(tl, {
                                    deleteModal: y,
                                    handleDelete: Y,
                                    id: e._id,
                                    setDeleteModal: f,
                                  }),
                                ],
                              }),
                            ],
                          },
                          e._id
                        )
                      ),
                    }),
                  ],
                }),
                !n.length &&
                  (0, re.jsx)(u.A, {
                    variant: "h6",
                    sx: { textAlign: "center", margin: "5px", padding: "5px" },
                    children: "No data found",
                  }),
              ],
            }),
            (0, re.jsx)(Ua.A, {
              rowsPerPageOptions: [10, 25, 50],
              component: "div",
              count: n.length,
              rowsPerPage: F,
              page: T,
              onPageChange: (e, t) => {
                M(t);
              },
              onRowsPerPageChange: (e) => {
                z(+e.target.value), M(0);
              },
              sx: {
                display: "flex",
                justifyContent: "flex-start",
                alignItems: "center",
                my: 1,
              },
            }),
            (0, re.jsxs)(ct.A, {
              fullScreen: a,
              open: g,
              onClose: q,
              "aria-labelledby": "responsive-dialog-title",
              children: [
                (0, re.jsxs)(mt.A, {
                  id: "responsive-dialog-title",
                  sx: { fontSize: "20px", fontWeight: "bold" },
                  children: ["Upload Your Material", " ", n.material],
                }),
                (0, re.jsx)(ut.A, {
                  children: (0, re.jsx)(di.A, {
                    children: (0, re.jsx)("input", {
                      type: "file",
                      onChange: (e) => {
                        const t = e.target.files[0];
                        D(t);
                      },
                    }),
                  }),
                }),
                (0, re.jsx)(ut.A, {
                  children: v
                    ? (0, re.jsxs)(ui, {
                        px: 2,
                        py: 1,
                        children: [
                          (0, re.jsx)(u.A, { children: v }),
                          (0, re.jsxs)(b.A, {
                            direction: "row",
                            children: [
                              v
                                ? (0, re.jsx)($e.A, {
                                    size: "small",
                                    onClick: () => {
                                      try {
                                        window.open(p, "_blank");
                                      } catch (e) {
                                        console.error(e);
                                      }
                                    },
                                    color: "error",
                                    children: (0, re.jsx)(Bl.A, {
                                      fontSize: "small",
                                      color: "primary",
                                    }),
                                  })
                                : null,
                              (0, re.jsx)($e.A, {
                                size: "small",
                                onClick: async (e) => {
                                  e.preventDefault();
                                  try {
                                    await (0, Se.yH)(
                                      ke.r.course.deleteMaterial + "/" + m
                                    );
                                    E(), k(null);
                                  } catch (t) {
                                    console.error(t);
                                  }
                                },
                                color: "error",
                                children: (0, re.jsx)(Gt.A, {
                                  fontSize: "small",
                                }),
                              }),
                            ],
                          }),
                        ],
                      })
                    : "",
                }),
                (0, re.jsxs)(xt.A, {
                  children: [
                    (0, re.jsx)($e.A, {
                      variant: "contained",
                      color: "error",
                      size: "small",
                      onClick: q,
                      children: "Cancel",
                    }),
                    (0, re.jsx)(ht.A, {
                      size: "small",
                      variant: "contained",
                      loading: w,
                      onClick: async (t) => {
                        t.preventDefault(), I(!0);
                        try {
                          const t = new FormData();
                          t.append("schoolId", e._id), t.append("file", C);
                          const { data: a } = await (0, Se.yJ)(
                            ke.r.course.uploadCourseMaterial + "/" + m,
                            t,
                            {
                              headers: {
                                "Content-Type": "multipart/form-data",
                              },
                            }
                          );
                          I(!1), E(), q();
                        } catch (a) {
                          console.error(a), I(!1);
                        }
                        I(!1);
                      },
                      autoFocus: !0,
                      children: "Upload",
                    }),
                  ],
                }),
              ],
            }),
            (0, re.jsx)(rt, {
              onAddClick: () => {
                N("/sch/lms/add-courses");
              },
            }),
          ],
        });
      }
      var hi = a(61041),
        pi = a(21786),
        ji = a(98703),
        gi = a(63481),
        Ai = a(27199),
        yi = a(88645),
        fi = a(59540);
      const vi = (0, l.createContext)(null);
      var bi = a(41952);
      const Si = (0, n.Ay)(ra.A)(() => ({
        width: "150px",
        fontSize: "15px",
        fontWeight: "bold",
        color: "black",
      }));
      function ki(e) {
        var t;
        let { onEditClick: a = () => {}, handelOpenDelModel: n = () => {} } = e;
        const { chapter: i } = (0, l.useContext)(vi),
          { courseId: o, onUpdate: r } = (0, l.useContext)(bi.A),
          [d, c] = (0, l.useState)(!1),
          [m, x] = (0, l.useState)("");
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(na.A, {
              children: (0, re.jsxs)(ia.A, {
                size: "small",
                children: [
                  (0, re.jsx)(sa.A, {
                    children: (0, re.jsxs)(oa.A, {
                      children: [
                        (0, re.jsx)(Si, { align: "center", children: "S.No" }),
                        (0, re.jsx)(Si, {
                          align: "center",
                          children: "Content Type",
                        }),
                        (0, re.jsx)(Si, {
                          align: "center",
                          children: "Content Title",
                        }),
                        (0, re.jsx)(Si, {
                          align: "center",
                          children: "Action",
                        }),
                        (0, re.jsx)(Si, { align: "center", children: "Sort" }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(ca.A, {
                    children:
                      null === (t = i.contents) || void 0 === t
                        ? void 0
                        : t.map((e, t) => {
                            var l;
                            return (0, re.jsxs)(oa.A, {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsx)(u.A, {
                                    sx: { pr: "10px" },
                                    children: t + 1,
                                  }),
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsxs)(s.A, {
                                    sx: {
                                      display: "flex",
                                      justifyContent: "center",
                                      alignItems: "center",
                                      columnGap: "5px",
                                    },
                                    children: [
                                      "Video" === e.type
                                        ? (0, re.jsx)(ji.A, {
                                            fontSize: "small",
                                            color: "error",
                                          })
                                        : null,
                                      "Quiz" === e.type
                                        ? (0, re.jsx)(hi.A, {
                                            fontSize: "small",
                                            color: "success",
                                          })
                                        : null,
                                      "FlashCard" === e.type
                                        ? (0, re.jsx)(gi.A, {
                                            fontSize: "small",
                                            color: "warning",
                                          })
                                        : null,
                                      "Material" === e.type
                                        ? (0, re.jsx)(Ai.A, {
                                            fontSize: "small",
                                            color: "info",
                                          })
                                        : null,
                                      "CodePractice" === e.type
                                        ? (0, re.jsx)(pi.A, {
                                            fontSize: "small",
                                            sx: { color: "#1b3779" },
                                          })
                                        : null,
                                    ],
                                  }),
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsx)(s.A, {
                                    sx: {
                                      display: "flex",
                                      justifyContent: "center",
                                      alignItems: "center",
                                    },
                                    children: (0, re.jsx)(u.A, {
                                      variant: "inherit",
                                      children:
                                        null === (l = e.title) || void 0 === l
                                          ? void 0
                                          : l.substring(0, 80),
                                    }),
                                  }),
                                }),
                                (0, re.jsxs)(ra.A, {
                                  align: "center",
                                  children: [
                                    (0, re.jsx)(h.A, {
                                      onClick: () => a(e),
                                      children: (0, re.jsx)(Ga.A, {
                                        fontSize: "small",
                                      }),
                                    }),
                                    (0, re.jsx)(h.A, {
                                      color: "error",
                                      onClick: () => {
                                        return (t = e._id), x(t), void c(!0);
                                        var t;
                                      },
                                      children: (0, re.jsx)(Ya.A, {
                                        color: "error",
                                        fontSize: "small",
                                      }),
                                    }),
                                  ],
                                }),
                                (0, re.jsxs)(ra.A, {
                                  align: "center",
                                  children: [
                                    t === i.contents.length - 1
                                      ? null
                                      : (0, re.jsx)(h.A, {
                                          children: (0, re.jsx)(yi.A, {}),
                                        }),
                                    0 === t
                                      ? null
                                      : (0, re.jsx)(h.A, {
                                          children: (0, re.jsx)(fi.A, {}),
                                        }),
                                  ],
                                }),
                              ],
                            });
                          }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(tl, {
              deleteModal: d,
              handleDelete: async () => {
                let e = { chapterId: i._id, contentId: m };
                try {
                  const { data: t } = await (0, Se.yJ)(
                    ke.r.courseContent.deleteContent + "/" + o,
                    e
                  );
                  r();
                } catch (t) {
                  console.error(t);
                }
              },
              setDeleteModal: c,
            }),
          ],
        });
      }
      function Ci(e) {
        let {
          open: t,
          title: a,
          dataToEdit: n,
          setDataToEdit: i = () => {},
          setOpenVideo: s = () => {},
          Formik: o,
        } = e;
        const { selectedSetting: r } = (0, l.useContext)(Ce.A),
          { courseId: d, onUpdate: c } = (0, l.useContext)(bi.A),
          { chapter: m } = (0, l.useContext)(vi),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)(!1),
          j = (0, et.Wx)({
            initialValues: {
              title: (null === n || void 0 === n ? void 0 : n.title) || "",
              contentHours:
                (null === n || void 0 === n ? void 0 : n.contentHours) || "",
              video: (null === n || void 0 === n ? void 0 : n.video) || "",
              description:
                (null === n || void 0 === n ? void 0 : n.description) || "",
            },
            onSubmit: async (e) => {
              const t = new FormData(),
                a = {
                  type: "Video",
                  orderSequence: m.contents ? m.contents.length + 1 : 1,
                  title: e.title,
                  description: e.description,
                  chapterId: null === m || void 0 === m ? void 0 : m._id,
                  contentHours: e.contentHours,
                };
              n && (a.contentId = null === n || void 0 === n ? void 0 : n._id),
                t.append("material", JSON.stringify(a)),
                u.forEach((e) => t.append("file", e)),
                t.append("schoolId", r._id);
              try {
                if ((p(!0), n)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.courseContent.updateContent + "/" + d,
                    t,
                    { headerd: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.courseContent.addContentToChapter + "/" + d,
                    t,
                    { headers: { "Content-type": "multipart/form-data" } }
                  );
                }
                g(), c();
              } catch (l) {
                console.error(l);
              }
              p(!1);
            },
            enableReinitialize: !0,
          }),
          g = () => {
            s(!1), i(null), o.resetForm();
          };
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(pt, {
            open: t,
            formik: j,
            formTitle: n ? "Update ".concat(a) : "Add ".concat(a),
            onClose: g,
            submitButtonTitle: n ? "Update" : "Submit",
            adding: h,
            children: (0, re.jsxs)(xe.Ay, {
              spacing: 1,
              container: !0,
              children: [
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: j,
                    name: "title",
                    label: "Video Name 0/80*",
                    required: !0,
                    inputProps: { maxLength: 80 },
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: j,
                    name: "contentHours",
                    label: "Content Hours",
                    required: !0,
                    type: "number",
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  md: 12,
                  lg: 12,
                  item: !0,
                  children: (0, re.jsx)(Ol.A, {
                    name: "file",
                    onChange: (e) =>
                      ((e, t) => {
                        const { files: a } = e.target;
                        let l = [];
                        if (a.length > 0) {
                          for (let e = 0; e < a.length; e++) {
                            const t = a[e];
                            l.push(t);
                          }
                          x(l);
                        } else Ba.oR.error("No files selected");
                      })(e),
                    customOnChange: !0,
                    selectedFiles: u,
                    label: "Upload Video",
                    multi: !1,
                    accept: "video/*",
                  }),
                }),
                u.length
                  ? null === u || void 0 === u
                    ? void 0
                    : u.map((e) =>
                        (0, re.jsx)("video", {
                          src: URL.createObjectURL(e),
                          style: {
                            backgroundColor: "black",
                            margin: "20px 20px",
                            borderRadius: "10px",
                            overflow: "hidden",
                            textAlign: "center",
                          },
                          controls: !0,
                          type: "video/mp4",
                        })
                      )
                  : "",
              ],
            }),
          }),
        });
      }
      const Di = (0, n.Ay)(Ma.A)(() => ({
          fontSize: "12px",
          fontWeight: 580,
          color: "#616161",
          paddingLeft: "10px",
        })),
        wi = (0, n.Ay)(s.A)(() => ({
          display: "flex",
          justifyContent: "flex-start",
          alignItems: "center",
        })),
        Ii = { inputProps: { "aria-label": "Checkbox demo" } };
      function Ni(e) {
        let { title: t, open: a, Formik: n, setOpenQuiz: i } = e;
        const [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([
            { question: "", options: ["", "", "", ""], correctOption: "" },
          ]),
          u = (0, et.Wx)({
            initialValues: {
              title: "",
              contentHours: "",
              description: "",
              question: "",
              option: "",
            },
            onSubmit: console.log("q"),
          });
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(pt, {
            open: a,
            formik: u,
            formTitle: s ? "Update ".concat(t) : "Add ".concat(t),
            onClose: () => {
              i(!1), o(null);
            },
            submitButtonTitle: s ? "Update" : "Submit",
            adding: r,
            children: (0, re.jsxs)(xe.Ay, {
              rowSpacing: 0,
              columnSpacing: 2,
              container: !0,
              children: [
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: u,
                    name: "title",
                    label: "Title 0/80*",
                    type: "text",
                    required: !0,
                    inputProps: { maxLength: 80 },
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: u,
                    name: "contentHours",
                    label: "Content Hours",
                    required: !0,
                    type: "number",
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: u,
                    name: "description",
                    label: "Description",
                  }),
                }),
                null === c || void 0 === c
                  ? void 0
                  : c.map((e, t) =>
                      (0, re.jsxs)(
                        xe.Ay,
                        {
                          container: !0,
                          rowSpacing: 2,
                          sx: {
                            margin: "20px",
                            backgroundColor: "#F0F8FF",
                            borderRadius: "5px",
                            padding: "0 15px 20px 15px",
                            border: "1px solid lightgrey",
                          },
                          children: [
                            (0, re.jsxs)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              md: 12,
                              children: [
                                (0, re.jsxs)(Di, {
                                  children: [
                                    t + 1,
                                    ".",
                                    e.question
                                      ? "Update Your Question!"
                                      : "Write your question",
                                  ],
                                }),
                                (0, re.jsx)(Mt.A, {
                                  fullWidth: !0,
                                  size: "small",
                                  name: "question",
                                  value: e.question,
                                  placeholder: "Type here...",
                                  InputProps: {
                                    endAdornment: (0, re.jsx)(Ft.A, {
                                      position: "end",
                                      children:
                                        t > 0
                                          ? (0, re.jsx)(h.A, {
                                              color: "error",
                                              size: "small",
                                            })
                                          : null,
                                    }),
                                  },
                                }),
                              ],
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              md: 12,
                              children: (0, re.jsx)(xe.Ay, {
                                container: !0,
                                rowGap: 2,
                                columnSpacing: 2,
                                children: e.options.map((t, a) =>
                                  (0, re.jsxs)(
                                    xe.Ay,
                                    {
                                      item: !0,
                                      xs: 12,
                                      md: 6,
                                      children: [
                                        (0, re.jsxs)(wi, {
                                          children: [
                                            (0, re.jsx)(qa.A, {
                                              size: "small",
                                              ...Ii,
                                              color: "default",
                                              checked:
                                                e.correctOption &&
                                                e.correctOption === t,
                                              value: t,
                                              type: "radio",
                                            }),
                                            (0, re.jsxs)(Di, {
                                              children: ["Option ", a + 1],
                                            }),
                                          ],
                                        }),
                                        (0, re.jsx)(Mt.A, {
                                          fullWidth: !0,
                                          size: "small",
                                          name: "option".concat(a + 1),
                                          value: t,
                                        }),
                                      ],
                                    },
                                    a
                                  )
                                ),
                              }),
                            }),
                          ],
                        },
                        t
                      )
                    ),
              ],
            }),
          }),
        });
      }
      function _i(e) {
        let {
          title: t,
          open: a,
          setOpenFlashcard: n,
          Formik: i,
          setDataToEdit: s = () => {},
          dataToEdit: o,
        } = e;
        const { selectedSetting: r } = (0, l.useContext)(Ce.A),
          { courseId: d, onUpdate: c } = (0, l.useContext)(bi.A),
          { chapter: m } = (0, l.useContext)(vi),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)(!1),
          j = (0, et.Wx)({
            initialValues: {
              title: (null === o || void 0 === o ? void 0 : o.title) || "",
              contentHours:
                (null === o || void 0 === o ? void 0 : o.contentHours) || "",
              description:
                (null === o || void 0 === o ? void 0 : o.description) || "",
              cardType:
                (null === o || void 0 === o ? void 0 : o.cardType) || "",
              text: (null === o || void 0 === o ? void 0 : o.text) || "",
            },
            onSubmit: async (e) => {
              const t = new FormData(),
                a = {
                  type: "FlashCard",
                  orderSequence: m.contents ? m.contents.length + 1 : 1,
                  flashCard: { cardType: e.cardType, text: "Text" },
                  title: e.title,
                  description: e.description,
                  chapterId: null === m || void 0 === m ? void 0 : m._id,
                  contentHours: e.contentHours,
                };
              if (
                (o &&
                  (a.contentId = null === o || void 0 === o ? void 0 : o._id),
                "Image" === e.cardType && !u.length)
              )
                return Ba.oR.error(
                  "Please select an Image file for Flash Card!"
                );
              t.append("material", JSON.stringify(a)),
                u.forEach((e) => t.append("file", e)),
                t.append("schoolId", r._id);
              try {
                if (o) {
                  p(!0);
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.courseContent.updateContent + "/" + d,
                    t,
                    { headerd: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.courseContent.addContentToChapter + "/" + d,
                    t,
                    { headers: { "Content-type": "multipart/form-data" } }
                  );
                }
                g(), c();
              } catch (l) {
                console.log(l);
              }
              p(!1);
            },
            enableReinitialize: !0,
          }),
          g = () => {
            n(!1), s(null), i.resetForm();
          };
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(pt, {
            open: a,
            formik: j,
            formTitle: o ? "Update ".concat(t) : "Add ".concat(t),
            onClose: g,
            submitButtonTitle: o ? "Update" : "Submit",
            adding: h,
            children: (0, re.jsxs)(xe.Ay, {
              rowSpacing: 0,
              columnSpacing: 2,
              container: !0,
              children: [
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: j,
                    name: "title",
                    label: "Title 0/80*",
                    type: "text",
                    required: !0,
                    inputProps: { maxLength: 80 },
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: j,
                    name: "contentHours",
                    label: "Content Hours",
                    required: !0,
                    type: "number",
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(Xe.A, {
                    formik: j,
                    required: !0,
                    name: "cardType",
                    label: "Select Card Type",
                    options: [
                      { label: "Flashcard Text", value: "Text" },
                      { label: "Flashcard Image", value: "Image" },
                    ],
                  }),
                }),
                "Text" === j.values.cardType
                  ? (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "text",
                        label: "Flashcard Text",
                        required: "Text" === j.values.cardType,
                      }),
                    })
                  : (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Ol.A, {
                        name: "file",
                        required: "Image" === j.values.cardType,
                        onChange: (e) =>
                          ((e, t) => {
                            const { files: a } = e.target;
                            let l = [];
                            if (a.length > 0) {
                              for (let e = 0; e < a.length; e++) {
                                const t = a[e];
                                l.push(t);
                              }
                              x(l);
                            } else Ba.oR.error("No files selected");
                          })(e),
                        customOnChange: !0,
                        selectedFiles: u,
                        label: "Upload Flashcard Image",
                        accept: "image/*",
                      }),
                    }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 12,
                  md: 12,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: j,
                    name: "description",
                    label: "Description",
                  }),
                }),
              ],
            }),
          }),
        });
      }
      function Ti(e) {
        let {
          title: t,
          open: a,
          setOpenMaterial: n,
          setDataToEdit: i = () => {},
          dataToEdit: s,
          Formik: o,
        } = e;
        const { selectedSetting: r } = (0, l.useContext)(Ce.A),
          { courseId: d, onUpdate: c } = (0, l.useContext)(bi.A),
          { chapter: m } = (0, l.useContext)(vi),
          [u, x] = (0, l.useState)(!1),
          [h, p] = (0, l.useState)([]);
        console.log(s, "dataToEdit");
        const j = (0, et.Wx)({
            initialValues: {
              title: (null === s || void 0 === s ? void 0 : s.title) || "",
              contentHours:
                (null === s || void 0 === s ? void 0 : s.contentHours) || "",
            },
            onSubmit: async (e) => {
              const t = new FormData(),
                a = {
                  type: "Material",
                  orderSequence: m.contents ? m.contents.length + 1 : 1,
                  title: e.title,
                  chapterId: null === m || void 0 === m ? void 0 : m._id,
                  contentHours: e.contentHours,
                };
              s && (a.contentId = null === s || void 0 === s ? void 0 : s._id),
                t.append("material", JSON.stringify(a)),
                h.forEach((e) => t.append("file", e)),
                t.append("schoolId", r._id);
              try {
                if (s) {
                  x(!0);
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.courseContent.updateContent + "/" + d,
                    t,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.courseContent.addContentToChapter + "/" + d,
                    t,
                    { headers: { "Content-type": "multipart/form-data" } }
                  );
                  console.log(e, "post");
                }
                g(), c();
              } catch (l) {
                console.log(l);
              }
              x(!1);
            },
            enableReinitialize: !0,
          }),
          g = () => {
            n(!1), i(null), o.resetForm();
          };
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(pt, {
            open: a,
            formik: j,
            formTitle: s ? "Update ".concat(t) : "Add ".concat(t),
            onClose: g,
            submitButtonTitle: s ? "Update" : "Submit",
            adding: u,
            children: (0, re.jsxs)(xe.Ay, {
              rowSpacing: 0,
              columnSpacing: 2,
              container: !0,
              children: [
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: j,
                    name: "title",
                    label: "Material Name",
                    required: !0,
                    inputProps: { maxLength: 80 },
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: j,
                    name: "contentHours",
                    label: "Content Hours",
                    required: !0,
                    type: "number",
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(Ol.A, {
                    name: "file",
                    required: !0,
                    onChange: (e) =>
                      ((e, t) => {
                        const { files: a } = e.target;
                        let l = [];
                        if (a.length > 0) {
                          for (let e = 0; e < a.length; e++) {
                            const t = a[e];
                            l.push(t);
                          }
                          p(l);
                        } else Ba.oR.error("No files selected");
                      })(e),
                    customOnChange: !0,
                    selectedFiles: h,
                    label: "Upload Flashcard Image",
                    accept: "image/*",
                  }),
                }),
              ],
            }),
          }),
        });
      }
      function Mi(e) {
        let {
          title: t,
          open: a,
          setOpenChaper: n = () => {},
          setChapterData: i = () => {},
          chapterData: s,
        } = e;
        const { selectedSetting: o } = (0, l.useContext)(Ce.A),
          { courseId: r, onUpdate: d } = (0, l.useContext)(bi.A),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)(!1);
        console.log(s, "gaua");
        const h = (0, et.Wx)({
            initialValues: {
              title: (null === s || void 0 === s ? void 0 : s.title) || "",
            },
            onSubmit: async (e) => {
              try {
                if ((x(!0), s)) {
                  const t = new FormData();
                  c.forEach((e) => t.append("file", e)),
                    t.append("schoolId", o._id),
                    t.append(
                      "chapterId",
                      null === s || void 0 === s ? void 0 : s._id
                    ),
                    t.append("title", e.title);
                  const { data: a } = await (0, Se.yJ)(
                    ke.r.courseContent.updateChapterDetails + "/" + r,
                    t,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const t = new FormData(),
                    a = { title: e.title };
                  t.append("body", JSON.stringify(a)),
                    c.forEach((e) => t.append("file", e)),
                    t.append("schoolId", o._id),
                    console.log(r, "courseId");
                  const { data: l } = await (0, Se.bE)(
                    ke.r.courseContent.create + "/" + r,
                    t,
                    { headers: { "Content-type": "multipart/form-data" } }
                  );
                }
                p();
              } catch (t) {
                console.log(t);
              }
              x(!1);
            },
            enableReinitialize: !0,
          }),
          p = () => {
            n(!1), i(null), h.resetForm(), d();
          };
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(pt, {
            open: a,
            formik: h,
            formTitle: s ? "Update ".concat(t) : "Add ".concat(t),
            onClose: p,
            submitButtonTitle: s ? "Update" : "Submit",
            adding: u,
            children: (0, re.jsxs)(xe.Ay, {
              rowSpacing: 0,
              columnSpacing: 2,
              container: !0,
              children: [
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(At.A, {
                    formik: h,
                    name: "title",
                    label: "Chapter Name",
                    required: !0,
                    inputProps: { maxLength: 80 },
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 6,
                  item: !0,
                  children: (0, re.jsx)(Ol.A, {
                    name: "file",
                    onChange: (e) =>
                      ((e, t) => {
                        const { files: a } = e.target;
                        let l = [];
                        if (a.length > 0) {
                          for (let e = 0; e < a.length; e++) {
                            const t = a[e];
                            l.push(t);
                          }
                          m(l);
                        } else Ba.oR.error("No files selected");
                      })(e),
                    customOnChange: !0,
                    selectedFiles: c,
                    label: "Upload Material",
                  }),
                }),
              ],
            }),
          }),
        });
      }
      const Fi = [
        { id: 1, label: "Video", value: "video" },
        { id: 2, label: "Quiz", value: "quiz" },
        { id: 3, label: "FlashCard", value: "flashcard" },
        { id: 4, label: "Material", value: "material" },
      ];
      function zi(e) {
        let { handleEditChapter: t = () => {} } = e;
        const { selectedSetting: a } = (0, l.useContext)(Ce.A),
          { chapter: n } = (0, l.useContext)(vi),
          { courseId: i, onUpdate: o, course: r } = (0, l.useContext)(bi.A),
          [d, c] = (0, l.useState)(null),
          [m, x] = (0, l.useState)(!1),
          [p, j] = (0, l.useState)(!1),
          [g, A] = (0, l.useState)(!1),
          [y, f] = (0, l.useState)(!1),
          [v, b] = (0, l.useState)(!1),
          [k, C] = (0, l.useState)(!1),
          D = (0, et.Wx)({
            initialValues: { contents: "" },
            onSubmit: console.log("jj"),
          });
        console.log(D.values, "entryFormik"),
          (0, l.useEffect)(() => {
            "video" === D.values.contents
              ? x("video" === D.values.contents)
              : "quiz" === D.values.contents
              ? j("quiz" === D.values.contents)
              : "flashcard" === D.values.contents
              ? A("flashcard" === D.values.contents)
              : "material" === D.values.contents
              ? f("material" === D.values.contents)
              : b("codepractice" === D.values.contents);
          }, [D.values.contents, a._id]);
        const w = () => {
          C(!0);
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(s.A, {
              sx: {
                border: "1px solid lightgray",
                borderRadius: "5px",
                px: 1,
                mb: 3,
                backgroundColor: "aliceblue",
              },
              children: (0, re.jsxs)(xe.Ay, {
                container: !0,
                sx: {
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                },
                children: [
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 6,
                    sx: {
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      p: 2,
                    },
                    children: (0, re.jsxs)(u.A, {
                      width: "100%",
                      variant: "h6",
                      component: "div",
                      fontWeight: 600,
                      fontSize: 16,
                      display: "flex",
                      alignItems: "center",
                      children: [
                        (0, re.jsx)(S.A, {
                          title: "Delete Chapter",
                          children: (0, re.jsx)(h.A, {
                            size: "small",
                            color: "error",
                            children: (0, re.jsx)(Ya.A, {
                              fontSize: "small",
                              color: "error",
                              onClick: w,
                            }),
                          }),
                        }),
                        (0, re.jsx)(S.A, {
                          title: "Update Chapter",
                          style: { color: "#1b3779" },
                          children: (0, re.jsx)(h.A, {
                            size: "small",
                            children: (0, re.jsx)(Ga.A, {
                              fontSize: "small",
                              onClick: t,
                            }),
                          }),
                        }),
                        "Chapter: ",
                        null === n || void 0 === n ? void 0 : n.title,
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 6,
                    sm: 6,
                    md: 2,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "contents",
                      formik: D,
                      label: "Add Content",
                      options: Fi,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 12,
                    children: (0, re.jsx)(ki, {
                      onEditClick: (e) => {
                        let t = Fi.find(
                          (t) =>
                            t.label ===
                            (null === e || void 0 === e ? void 0 : e.type)
                        );
                        D.setFieldValue(
                          "contents",
                          null === t || void 0 === t ? void 0 : t.value
                        ),
                          c(e);
                      },
                      handelOpenDelModel: w,
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(tl, {
              deleteModal: k,
              handleDelete: async (e) => {
                let t = { ...e, chapterId: e };
                try {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.courseContent.deleteChapter + "/" + i,
                    t
                  );
                  o();
                } catch (a) {
                  console.error(a);
                }
              },
              setDeleteModal: C,
            }),
            (0, re.jsx)(Ci, {
              title: "Video for Course",
              open: m,
              courseId: i,
              Formik: D,
              setOpenVideo: x,
              chapter: n,
              onUpdate: o,
              setDataToEdit: c,
              dataToEdit: d,
            }),
            (0, re.jsx)(Ni, {
              title: "Quiz",
              open: p,
              courseId: i,
              Formik: D,
              setOpenQuiz: j,
              chapter: n,
              onUpdate: o,
            }),
            (0, re.jsx)(_i, {
              title: "Flashcard",
              open: g,
              Formik: D,
              setOpenFlashcard: A,
              setDataToEdit: c,
              dataToEdit: d,
            }),
            (0, re.jsx)(Ti, {
              title: "Material",
              open: y,
              Formik: D,
              setOpenMaterial: f,
              setDataToEdit: c,
              dataToEdit: d,
            }),
          ],
        });
      }
      (0, n.Ay)("label")(() => ({
        fontWeight: 650,
        fontSize: "15px",
        color: "#424242",
      }));
      const Ei = (0, n.Ay)(xe.Ay)(() => ({
        padding: 1,
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
      }));
      function qi() {
        var e;
        const { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, o] = (0, l.useState)(!1),
          [r, d] = (0, l.useState)({ chapters: [] }),
          [c, m] = (0, l.useState)(null),
          u = (0, et.Wx)({
            initialValues: { courseId: "" },
            onSubmit: async (e) => {
              try {
                const { data: a } = await (0, Se.Jt)(
                  ke.r.courseContent.getDetailsTeachers + "/" + e.courseId,
                  { params: { schoolId: t._id } }
                );
                d(a.result);
              } catch (a) {
                console.log(a);
              }
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: a } = await (0, Se.Jt)(ke.r.course.list, {
                params: { schoolId: t._id },
              });
              n(a.result.map((e) => ({ ...e, label: e.title, value: e._id }))),
                u.setFieldValue(
                  "courseId",
                  null === a ||
                    void 0 === a ||
                    null === (e = a.result[0]) ||
                    void 0 === e
                    ? void 0
                    : e._id
                );
            } catch (a) {
              console.error(a);
            }
          })();
        }, []),
          (0, l.useEffect)(() => {
            a.length && u.handleSubmit();
          }, [a, u.values.courseId]);
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(bi.A.Provider, {
            value: {
              courses: a,
              courseId: u.values.courseId,
              onUpdate: u.handleSubmit,
            },
            children: [
              (0, re.jsx)(ce.A, { title: "Course Content" }),
              (0, re.jsx)(Ei, {
                container: !0,
                children: (0, re.jsxs)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 12,
                  my: 2,
                  gap: 2,
                  display: "flex",
                  alignItems: "center",
                  children: [
                    (0, re.jsx)(s.A, {
                      sx: { width: 260 },
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "courseId",
                        formik: u,
                        label: "Select Course To Add Content",
                        options: a,
                      }),
                    }),
                    (0, re.jsx)($e.A, {
                      variant: "contained",
                      size: "medium",
                      disabled: !a.length,
                      startIcon: (0, re.jsx)(ot.A, {}),
                      sx: { mt: 1 },
                      multi: !1,
                      onClick: (e) => {
                        o(!0);
                      },
                      children: "Chapter",
                    }),
                  ],
                }),
              }),
              (0, re.jsx)(x.A, {}),
              null === (e = r.chapters) || void 0 === e
                ? void 0
                : e.map((e, t) =>
                    (0, re.jsx)(vi.Provider, {
                      value: { chapter: e },
                      children: (0, re.jsx)(
                        zi,
                        {
                          handleEditChapter: () => {
                            return (t = e), o(!0), void m(t);
                            var t;
                          },
                        },
                        t
                      ),
                    })
                  ),
              (0, re.jsx)(Mi, {
                title: "Chapter for Course",
                open: i,
                setOpenChaper: o,
                courseId: u.values.courseId,
                chapterData: c,
                setChapterData: m,
                onUpdate: () => u.handleSubmit(),
              }),
            ],
          }),
        });
      }
      var Yi = a(28242),
        Wi = a(86178),
        Ri = a.n(Wi);
      const Pi = (0, n.Ay)(ra.A)(() => ({
          textAlign: "center",
          color: "#ffff",
          fontWeight: 600,
        })),
        Ji = (0, n.Ay)(ra.A)(() => ({ textAlign: "center" })),
        Vi = (0, n.Ay)("label")(() => ({
          fontWeight: 650,
          fontSize: "15px",
          color: "#424242",
          paddingLeft: "10px",
        })),
        Bi = (0, n.Ay)(s.A)(() => ({
          display: "flex",
          justifyContent: "flex-end",
          alignItems: "center",
          gap: "10px",
          marginBottom: 1,
        })),
        Oi = function () {
          const e = (
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "27/09/2024 14:30"
            ).split(" "),
            t = e[0].split("/"),
            a = parseInt(t[2], 10),
            l = parseInt(t[1], 10) - 1,
            n = parseInt(t[0], 10),
            i = e[1].split(":"),
            s = parseInt(i[0], 10),
            o = parseInt(i[1], 10);
          return new Date(a, l, n, s, o);
        },
        Li = (e, t, a, l) => {
          let n = Date.now(),
            i = "".concat(Ri()(e).format("DD/MM/YYYY"), " ").concat(t, "}"),
            s = "".concat(Ri()(a).format("DD/MM/YYYY"), " ").concat(l),
            o = ""
              .concat(Ri()(n).format("DD/MM/YYYY"), " ")
              .concat(Ri()(n).format("LT")),
            r = Oi(i),
            d = Oi(s),
            c = Oi(o);
          return r > c ? "Upcoming" : r < c && d > c ? "Available" : "Expired";
        },
        Ui = [
          { label: "Student", value: "student" },
          { label: "Employee", value: "employee" },
        ],
        Hi = [
          { label: "Single", value: "Single" },
          { label: "Class Students", value: "Class Students" },
          { label: "Selected", value: "Selected" },
        ],
        Gi = [
          { label: "One-On-One Call", value: "OneONoneCall" },
          { label: "Group Call", value: "GroupCall" },
          { label: "Live Streaming", value: "LiveStreaming" },
        ];
      function Ki() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)(!1),
          [d, c] = (0, l.useState)(!1),
          [m, x] = (0, l.useState)(null),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)([]),
          [y, f] = (0, l.useState)([]),
          [v, b] = (0, l.useState)([]),
          [k, C] = (0, l.useState)([]),
          w = (0, _.Zp)(),
          [I, N] = (0, l.useState)([]),
          [T, M] = l.useState(!1),
          [F, z] = (0, l.useState)("All"),
          E = async (t) => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.meeting.list, {
                params: { schoolId: e._id },
              });
              a(t.result), i(t.result);
            } catch (l) {
              console.log(l);
            }
          },
          q = () => {
            r(!1), x(null), Y.resetForm();
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: e._id },
              });
              j(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                A(t.result.map((e) => ({ ...e, label: e.name, value: e._id })));
            } catch (t) {
              console.log(t);
            }
          })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.role.list);
                C(e.result.map((e) => ({ ...e, label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })();
        }, [e]),
          (0, l.useEffect)(() => {
            E();
          }, [e]),
          (0, l.useEffect)(() => {
            Oi();
          }, []);
        const Y = (0, et.Wx)({
          initialValues: {
            classId: [],
            expiryDate: null,
            expiryTime: "",
            startDate: null,
            startTime: "",
            createdBy: "",
            meetingType: "",
            participantType: "",
            userTypes: [],
            roles: [],
            section: [],
            employeeParticipants: [],
            studentParticipants: [],
          },
          onSubmit: async (t, a) => {
            let { resetForm: l } = a;
            try {
              const a = {
                ...t,
                schoolId: e._id,
                startDate: Be()(t.startDate).format("YYYY/MM/DD"),
                expiryDate: Be()(t.expiryDate).format("YYYY/MM/DD"),
                participants:
                  "Single" === Y.values.participantType
                    ? [Y.values.participants]
                    : Y.values.participants,
                employeeParticipants: I.filter(
                  (e) =>
                    Y.values.roles.includes(e.role._id) &&
                    Y.values.employeeParticipants.includes(e._id)
                ),
                studentParticipants: v.filter((e) => {
                  var t, a, l, n;
                  return (
                    Y.values.classId.includes(
                      null === e ||
                        void 0 === e ||
                        null === (t = e.academicInfo) ||
                        void 0 === t ||
                        null === (a = t.class) ||
                        void 0 === a
                        ? void 0
                        : a._id
                    ) &&
                    Y.values.section.includes(
                      null === e ||
                        void 0 === e ||
                        null === (l = e.academicInfo) ||
                        void 0 === l ||
                        null === (n = l.section) ||
                        void 0 === n
                        ? void 0
                        : n._id
                    ) &&
                    Y.values.studentParticipants.includes(
                      null === e || void 0 === e ? void 0 : e._id
                    )
                  );
                }),
              };
              if ((console.log(a, "payyload"), c(!0), m)) {
                const { data: e } = await (0, Se.yJ)(
                  ke.r.meeting.update + "/" + m._id,
                  a
                );
                E(), q();
              } else {
                const { data: e } = await (0, Se.bE)(ke.r.meeting.create, a);
                E(), q();
              }
            } catch (n) {
              console.log(n);
            }
            c(!1);
          },
          enableReinitialize: !0,
        });
        (0, l.useEffect)(() => {
          Y.values.roles &&
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.employee.list, {
                  params: {
                    schoolId: e._id,
                    search: { role: { $in: Y.values.roles } },
                  },
                });
                console.log(t, "jjjjjjjjjjjjj"),
                  N(
                    t.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  );
              } catch (t) {
                console.log(t);
              }
            })();
        }, [Y.values.roles, e]),
          (0, l.useEffect)(() => {
            Y.values.classId &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: Y.values.classId },
                    },
                  });
                  f(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [Y.values.classId, e]),
          (0, l.useEffect)(() => {
            Y.values.classId &&
              Y.values.section &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        "academicInfo.class": Y.values.classId,
                        "academicInfo.section": Y.values.section,
                      },
                    },
                  });
                  b(
                    t.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [Y.values.classId, Y.values.section, e]);
        (0, l.useEffect)(() => {
          F && i("All" === F ? t : t.filter((e) => e.meetingType === F));
        }, [F, e]);
        return (
          console.log(Y.values, "kkkkkkkkkk"),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Live" }),
              (0, re.jsx)(Bi, {
                children: (0, re.jsxs)(Ta.A, {
                  size: "small",
                  sx: { m: 1, minWidth: 250 },
                  children: [
                    (0, re.jsxs)(Vi, {
                      id: "demo-simple-select-label",
                      children: [
                        (0, re.jsx)(Yi.A, { fontSize: "small" }),
                        " Filter Meeting",
                      ],
                    }),
                    (0, re.jsxs)(Fa.A, {
                      labelId: "demo-simple-select-label",
                      id: "demo-simple-select",
                      placeholder: "Select Course",
                      value: F,
                      onChange: (e) => {
                        z(e.target.value);
                      },
                      children: [
                        (0, re.jsx)(D.A, { value: "All", children: " All " }),
                        (0, re.jsx)(D.A, {
                          value: "OneONoneCall",
                          children: "One-On-One Call ",
                        }),
                        (0, re.jsx)(D.A, {
                          value: "GroupCall",
                          children: "Group Call ",
                        }),
                        (0, re.jsx)(D.A, {
                          value: "LiveStreaming",
                          children: "Live Streaming",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
              (0, re.jsxs)(na.A, {
                component: ue.A,
                children: [
                  (0, re.jsxs)(ia.A, {
                    size: "small",
                    children: [
                      (0, re.jsx)(sa.A, {
                        sx: {
                          backgroundColor: (e) =>
                            "dark" === e.palette.mode
                              ? e.palette.primary.dark
                              : e.palette.primary.light,
                        },
                        children: (0, re.jsxs)(oa.A, {
                          children: [
                            (0, re.jsx)(Pi, { children: "S.No" }),
                            (0, re.jsx)(Pi, { children: "Meeting Date" }),
                            (0, re.jsx)(Pi, { children: "Meeting Type" }),
                            (0, re.jsx)(Pi, { children: "Status" }),
                            (0, re.jsx)(Pi, { children: "Start Meeting" }),
                            (0, re.jsx)(Pi, { children: "Action" }),
                          ],
                        }),
                      }),
                      " ",
                      (0, re.jsx)(ca.A, {
                        children: (n || t).map((e, a) =>
                          (0, re.jsxs)(oa.A, {
                            children: [
                              (0, re.jsx)(Ji, { children: a + 1 }),
                              (0, re.jsxs)(Ji, {
                                children: [
                                  Be()(e.startDate).format("DD-MM-YYYY"),
                                  ", Time:",
                                  " ",
                                  e.startTime,
                                ],
                              }),
                              (0, re.jsx)(Ji, { children: e.meetingType }),
                              (0, re.jsx)(Ji, {
                                children: (0, re.jsx)(s.A, {
                                  sx: {
                                    py: 1,
                                    objectFit: "contain",
                                    borderRadius: "5px",
                                    background:
                                      "Expired" ===
                                      Li(
                                        e.startDate,
                                        e.startTime,
                                        e.expiryDate,
                                        e.expiryTime
                                      )
                                        ? "#85848430"
                                        : "#8281e74d",
                                  },
                                  children: Li(
                                    e.startDate,
                                    e.startTime,
                                    e.expiryDate,
                                    e.expiryTime
                                  ),
                                }),
                              }),
                              (0, re.jsx)(Ji, {
                                children: (0, re.jsx)($e.A, {
                                  disabled:
                                    "Expired" ===
                                    Li(
                                      e.startDate,
                                      e.startTime,
                                      e.expiryDate,
                                      e.expiryTime
                                    ),
                                  onClick: () =>
                                    ((e) => {
                                      const a = t.find((t) => t._id === e);
                                      if ((console.log(a), a)) {
                                        const e = a.meetingType;
                                        w("/sch/lms/room/".concat(a.roomId), {
                                          state: { meetingType: e },
                                        });
                                      }
                                    })(e._id),
                                  variant: "contained",
                                  size: "small",
                                  children: "Join",
                                }),
                              }),
                              (0, re.jsxs)(Ji, {
                                children: [
                                  (0, re.jsx)(S.A, {
                                    title: "Edit",
                                    children: (0, re.jsx)(h.A, {
                                      size: "small",
                                      onClick: () =>
                                        ((e) => {
                                          console.log(e, "idddddd"), x(e);
                                          let a = t.filter(
                                            (t) => t._id == e
                                          )[0];
                                          if (
                                            (console.log(a, "meetingData"),
                                            a.userTypes.includes("employee"))
                                          ) {
                                            let e = [];
                                            for (let t of a.employeeParticipants)
                                              e.filter((e) => e == t.role)
                                                .length < 1 && e.push(t.role);
                                            Y.setFieldValue("roles", e),
                                              Y.setFieldValue(
                                                "employeeParticipants",
                                                a.employeeParticipants.map(
                                                  (e) => e._id
                                                )
                                              );
                                          }
                                          if (a.userTypes.includes("student")) {
                                            let e = [],
                                              t = [];
                                            for (let l of a.studentParticipants)
                                              t.filter(
                                                (e) => e == l.academicInfo.class
                                              ).length < 1 &&
                                                t.push(l.academicInfo.section),
                                                e.filter(
                                                  (e) =>
                                                    e == l.academicInfo.class
                                                ).length < 1 &&
                                                  e.push(l.academicInfo.class);
                                            Y.setFieldValue("classId", e),
                                              Y.setFieldValue("section", t),
                                              Y.setFieldValue(
                                                "studentParticipants",
                                                a.studentParticipants.map(
                                                  (e) => e._id
                                                )
                                              );
                                          }
                                          "Class Students" ===
                                            a.participantType &&
                                            Y.setFieldValue(
                                              "classId",
                                              a.classId
                                            ),
                                            Y.setFieldValue(
                                              "meetingType",
                                              a.meetingType
                                            ),
                                            Y.setFieldValue(
                                              "expiryDate",
                                              a.expiryDate
                                            ),
                                            Y.setFieldValue(
                                              "startTime",
                                              a.startTime
                                            ),
                                            Y.setFieldValue(
                                              "expiryTime",
                                              a.expiryTime
                                            ),
                                            Y.setFieldValue(
                                              "participantType",
                                              a.participantType
                                            ),
                                            Y.setFieldValue(
                                              "userTypes",
                                              a.userTypes
                                            ),
                                            Y.setFieldValue(
                                              "startDate",
                                              a.startDate
                                            ),
                                            r(!0);
                                        })(e._id),
                                      children: (0, re.jsx)(Ga.A, {
                                        color: "primary",
                                        fontSize: "small",
                                      }),
                                    }),
                                  }),
                                  (0, re.jsx)(S.A, {
                                    title: "Delete",
                                    children: (0, re.jsx)(h.A, {
                                      size: "small",
                                      onClick: () => M(e._id),
                                      children: (0, re.jsx)($a.A, {
                                        fontSize: "small",
                                        color: "error",
                                      }),
                                    }),
                                  }),
                                ],
                              }),
                            ],
                          })
                        ),
                      }),
                    ],
                  }),
                  (0, re.jsx)(tl, {
                    deleteModal: T,
                    handleDelete: async (e) => {
                      try {
                        await (0, Se.yH)(ke.r.meeting.delete + "/" + e);
                        E();
                      } catch (t) {
                        console.error(t);
                      }
                    },
                    id: T,
                    setDeleteModal: M,
                  }),
                  !t.length &&
                    (0, re.jsx)(s.A, {
                      align: "center",
                      colSpan: 12,
                      py: 2,
                      children: (0, re.jsx)(u.A, {
                        variant: "h6",
                        align: "center",
                        children: "Live sessions Not found!",
                      }),
                    }),
                  0 === !n.length &&
                    (0, re.jsx)(s.A, {
                      align: "center",
                      colSpan: 12,
                      py: 2,
                      children: (0, re.jsx)(u.A, {
                        variant: "h6",
                        align: "center",
                        children: "Live sessions Not found!",
                      }),
                    }),
                ],
              }),
              (0, re.jsx)(pt, {
                open: o,
                formik: Y,
                formTitle: m ? "Update Meeting" : "Add Meeting",
                onClose: q,
                submitButtonTitle: m ? "Update" : "Submit",
                adding: d,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: Y,
                        name: "meetingType",
                        label: "Meeting Type",
                        options: Gi,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: Y,
                        name: "participantType",
                        label: "Participant Type",
                        options: Hi,
                      }),
                    }),
                    ("Single" === Y.values.participantType ||
                      "Selected" === Y.values.participantType) &&
                      (0, re.jsx)(re.Fragment, {
                        children: (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            multiple: !0,
                            formik: Y,
                            name: "userTypes",
                            label: "User Type",
                            options: Ui,
                          }),
                        }),
                      }),
                    Y.values.userTypes.includes("student") &&
                      (0, re.jsxs)(re.Fragment, {
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 6,
                            md: 6,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              formik: Y,
                              name: "classId",
                              label: "Select Class",
                              options: p,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 6,
                            md: 6,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              formik: Y,
                              name: "section",
                              label: "Select Section",
                              options: y,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 6,
                            md: 6,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              formik: Y,
                              name: "studentParticipants",
                              multiple: "Single" !== Y.values.participantType,
                              label: "Select Student",
                              options: v,
                            }),
                          }),
                        ],
                      }),
                    Y.values.userTypes.includes("employee") &&
                      (0, re.jsxs)(re.Fragment, {
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 6,
                            md: 6,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              formik: Y,
                              name: "roles",
                              label: "Select Role",
                              options: k,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 6,
                            md: 6,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              formik: Y,
                              multiple: !0,
                              name: "employeeParticipants",
                              label: "Select Employee",
                              options: I,
                            }),
                          }),
                        ],
                      }),
                    "Class Students" === Y.values.participantType &&
                      (0, re.jsx)(re.Fragment, {
                        children: (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            formik: Y,
                            name: "classId",
                            multiple:
                              "Class Students" === Y.values.participantType,
                            label: "Select Class",
                            options: g,
                          }),
                        }),
                      }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: Y,
                        label: "Enter Start Date",
                        name: "startDate",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: Y,
                        label: "Enter Start Time",
                        type: "time",
                        name: "startTime",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: Y,
                        label: "Enter Expiry Date",
                        name: "expiryDate",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: Y,
                        label: "Enter Expiry Time",
                        type: "time",
                        name: "expiryTime",
                        required: !0,
                      }),
                    }),
                  ],
                }),
              }),
              (0, re.jsx)(rt, {
                title: "Add Meeting",
                onAddClick: () => {
                  r(!0);
                },
              }),
            ],
          })
        );
      }
      const Qi = (0, n.Ay)(u.A)(() => ({
          border: "1px solid lightGrey",
          fontWeight: "600",
          padding: 10,
          borderRadius: 5,
          textAlign: "center",
        })),
        Zi = (0, n.Ay)(s.A)(() => ({
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        })),
        $i = () => {
          const { selectedSetting: e } = (0, l.useContext)(Ce.A),
            [t, a] = (0, l.useState)({ totalStorage: 0, usedStorage: 0 });
          return (
            (0, l.useEffect)(() => {
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.storage.details, {
                    params: { schoolId: e._id },
                  });
                  a(t.result);
                } catch (t) {
                  console.error(t);
                }
              })();
            }, [e._id]),
            (0, re.jsxs)(re.Fragment, {
              children: [
                (0, re.jsx)(ce.A, { title: "Storage" }),
                (0, re.jsx)(Zi, {
                  children: (0, re.jsx)(ue.A, {
                    sx: {
                      padding: 4,
                      width: { xs: "100%", sm: "70%", md: "50%", lg: "40%" },
                    },
                    children: (0, re.jsxs)(xe.Ay, {
                      container: !0,
                      spacing: 2,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          sm: 12,
                          md: 12,
                          lg: 12,
                          children: (0, re.jsxs)(Qi, {
                            children: [
                              "Total Storage:",
                              " ",
                              (0, re.jsx)(u.A, {
                                component: "span",
                                fontWeight: "bold",
                                color: "#607d8b",
                                children: t.totalStorage,
                              }),
                            ],
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          sm: 12,
                          md: 12,
                          lg: 12,
                          children: (0, re.jsxs)(Qi, {
                            children: [
                              "Used Storage:",
                              " ",
                              (0, re.jsx)(u.A, {
                                component: "span",
                                fontWeight: "bold",
                                color: "#607d8b",
                                children: t.usedStorage,
                              }),
                            ],
                          }),
                        }),
                      ],
                    }),
                  }),
                }),
              ],
            })
          );
        },
        Xi = [
          { name: "Book Title", key: "title" },
          { name: "Book Id", key: "id" },
          { name: "Author", key: "author" },
          { name: "Book Cover", key: "bookCover", type: "image" },
          { name: "Price", key: "price" },
          { name: "Quantity", key: "quantity" },
          { name: "Issue", key: "issueNumber" },
          { name: "Available", key: "available" },
        ],
        es = (0, n.Ay)(oa.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            color: a ? "#fff" : "#000",
            "&:nth-of-type(odd)": {
              backgroundColor: a ? "transparent" : "#F0F8FF",
            },
          };
        }),
        ts = (0, n.Ay)(ra.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            border: "1px solid gray",
            color: a ? "#fff" : "#000",
            ["&.".concat(va.A.head)]: {
              backgroundColor: a ? "transparent" : "blue",
              color: a ? "#fff" : "#000",
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        });
      function as(e) {
        let {
          title: t = "",
          onClose: a = () => {},
          open: n = !0,
          tableData: i,
          schoolName: s,
        } = e;
        const { isDarkMode: o } = (0, l.useContext)(st.A);
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(ka, {
            title: t,
            onClose: a,
            open: n,
            children: (0, re.jsx)(ia.A, {
              "aria-label": "customized table",
              children: (0, re.jsxs)(ca.A, {
                children: [
                  (0, re.jsxs)(es, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(ts, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "School Name",
                      }),
                      (0, re.jsx)(ts, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children: s,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(es, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(ts, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Book Title",
                      }),
                      (0, re.jsx)(ts, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children: null === i || void 0 === i ? void 0 : i.title,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(es, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(ts, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Book ID",
                      }),
                      (0, re.jsx)(ts, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children: null === i || void 0 === i ? void 0 : i.id,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(es, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(ts, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Author",
                      }),
                      (0, re.jsx)(ts, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children:
                          null === i || void 0 === i ? void 0 : i.author,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(es, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(ts, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Language",
                      }),
                      (0, re.jsx)(ts, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children:
                          null === i || void 0 === i ? void 0 : i.language,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(es, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(ts, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Quantity",
                      }),
                      (0, re.jsx)(ts, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children:
                          null === i || void 0 === i ? void 0 : i.quantity,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(es, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(ts, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Price",
                      }),
                      (0, re.jsx)(ts, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children: null === i || void 0 === i ? void 0 : i.price,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(es, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(ts, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Almira No",
                      }),
                      (0, re.jsx)(ts, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children:
                          null === i || void 0 === i ? void 0 : i.almiraNo,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(es, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(ts, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Created",
                      }),
                      (0, re.jsx)(ts, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children: Be()(
                          null === i || void 0 === i ? void 0 : i.createdAt
                        ).format("DD-MM-YYYY"),
                      }),
                    ],
                  }),
                ],
              }),
            }),
          }),
        });
      }
      function ls() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(null),
          [s, o] = (0, l.useState)(!1),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)({
            open: !1,
            tableData: "",
            schoolName: "",
            action: () => {},
          }),
          h = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.book.list, {
                params: { schoolId: e._id },
              });
              a(t.result), console.log(t.result, "llllllllll");
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          h();
        }, [e]);
        const p = () => {
            o(!1), i(null);
          },
          j = (0, et.Wx)({
            initialValues: {
              title: (null === n || void 0 === n ? void 0 : n.title) || "",
              id: (null === n || void 0 === n ? void 0 : n.id) || "",
              department:
                (null === n || void 0 === n ? void 0 : n.department) || "",
              cellNumber:
                (null === n || void 0 === n ? void 0 : n.cellNumber) || "",
              isbnNo: (null === n || void 0 === n ? void 0 : n.isbnNo) || "",
              edison: (null === n || void 0 === n ? void 0 : n.edison) || "",
              author: (null === n || void 0 === n ? void 0 : n.author) || "",
              language:
                (null === n || void 0 === n ? void 0 : n.language) || "",
              price: (null === n || void 0 === n ? void 0 : n.price) || "",
              quantity:
                (null === n || void 0 === n ? void 0 : n.quantity) || "",
              almiraNo:
                (null === n || void 0 === n ? void 0 : n.almiraNo) || "",
            },
            onSubmit: async (t) => {
              const a = new FormData();
              a.append("schoolId", e._id),
                a.append("title", t.title),
                a.append("id", t.id),
                a.append("department", t.department),
                a.append("cellNumber", t.cellNumber),
                a.append("isbnNo", t.isbnNo),
                a.append("edison", t.edison),
                a.append("author", t.author),
                a.append("language", t.language),
                a.append("price", t.price),
                a.append("quantity", t.quantity),
                a.append("almiraNo", t.almiraNo),
                c.forEach((e) => a.append("bookCover", e));
              try {
                if ((d(!0), n)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.book.update + "/" + n._id,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                  h();
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.book.create, a, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                  h();
                }
                p();
              } catch (l) {
                console.log(l);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Student Library" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, mb: 1 },
              children: (0, re.jsxs)(b.A, {
                spacing: 2,
                direction: { xs: "column", md: "row" },
                children: [
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    children: "Download",
                  }),
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    children: "Count By title",
                  }),
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    children: "Stock Verification",
                  }),
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    children: "Bulk Upload",
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete", "view"],
              tableKeys: Xi,
              bodyDataModal: "book",
              bodyData: t,
              onEditClick: (e) => {
                i(e), o(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.book.delete + "/" + e);
                  h();
                } catch (t) {
                  console.error(t);
                }
              },
              onViewClick: (t) => {
                x({
                  ...u,
                  open: !0,
                  tableData: t,
                  schoolName: null === e || void 0 === e ? void 0 : e.name,
                });
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Books",
              onAddClick: () => {
                o(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: s,
              formik: j,
              formTitle: n ? "Update Books" : "Add Books",
              onClose: p,
              submitButtonTitle: n ? "Update" : "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "title",
                      label: "Title",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "id",
                      label: "Book Id",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "department",
                      label: "Department",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "cellNumber",
                      label: "Cell Number",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "isbnNo",
                      label: "ISBN No",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "edison",
                      label: "Edison",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "author",
                      label: "Author",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "language",
                      label: "Language",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "price",
                      label: "Price",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "quantity",
                      required: !0,
                      label: "Quantity",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "almiraNo",
                      label: "Almira No",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Ol.A, {
                      name: "bookCover",
                      label: "Select Book",
                      onChange: (e) =>
                        ((e, t) => {
                          const { files: a } = e.target;
                          let l = [];
                          if (a.length > 0) {
                            for (let e = 0; e < a.length; e++) {
                              const t = a[e];
                              l.push(t);
                            }
                            m(l);
                          } else console.log("No files selected");
                        })(e),
                      previousFile:
                        null === n || void 0 === n ? void 0 : n.bookCover,
                      customOnChange: !0,
                      selectedFiles: c,
                      onRemove: (e) =>
                        ((e, t) => {
                          m(c.filter((t) => t.name != e));
                        })(e),
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(as, {
              title: "Book Information",
              open: null === u || void 0 === u ? void 0 : u.open,
              tableData: null === u || void 0 === u ? void 0 : u.tableData,
              schoolName: null === u || void 0 === u ? void 0 : u.schoolName,
              onClose: () => {
                x({ ...u, open: !1 });
              },
            }),
          ],
        });
      }
      const ns = [
        { name: "Title", key: "title" },
        { name: "Type", key: "type" },
        { name: "Issue Number", key: "issueNumber" },
        { name: "Volume Number", key: "volumeNumber" },
        { name: "Book Cover", key: "bookCover", type: "image" },
        { name: "Price", key: "price" },
        { name: "Quantity", key: "quantity" },
        { name: "Journal Entry Date", key: "entryDate", isDate: !0 },
      ];
      function is() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(null),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)(!1),
          h = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.periodical.list);
              console.log(e, "perr"), a(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          h();
        }, [e._id]);
        const p = () => {
            m(!1), i(null), h();
          },
          j = (0, et.Wx)({
            initialValues: {
              title: (null === n || void 0 === n ? void 0 : n.title) || "",
              type: (null === n || void 0 === n ? void 0 : n.type) || "",
              department:
                (null === n || void 0 === n ? void 0 : n.department) || "",
              issueNumber:
                (null === n || void 0 === n ? void 0 : n.issueNumber) || "",
              volumeNumber:
                (null === n || void 0 === n ? void 0 : n.volumeNumber) || "",
              quantity:
                (null === n || void 0 === n ? void 0 : n.quantity) || "",
              price: (null === n || void 0 === n ? void 0 : n.price) || "",
              entryDate:
                (null === n || void 0 === n ? void 0 : n.entryDate) || "",
            },
            onSubmit: async (t) => {
              const a = new FormData();
              a.append("title", t.title),
                a.append("type", t.type),
                a.append("department", t.department),
                a.append("issueNumber", t.issueNumber),
                a.append("volumeNumber", t.volumeNumber),
                a.append("quantity", t.quantity),
                a.append("price", t.price),
                a.append("entryDate", Be()(t.entryDate).format("YYYY-MM-DD")),
                s.forEach((e) => a.append("bookCover", e)),
                a.append("schoolId", e._id);
              try {
                if ((d(!0), n)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.periodical.update + "/" + n._id,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.periodical.create,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                }
                p();
              } catch (l) {
                console.error(l);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Periodical List" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, mb: 1 },
              children: (0, re.jsxs)(b.A, {
                spacing: 2,
                direction: { xs: "column", md: "row" },
                children: [
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    onClick: () => {
                      console.log("ggg");
                    },
                    children: "Download",
                  }),
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    children: "Count By title",
                  }),
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    children: "Bulk Upload",
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: ns,
              bodyDataModal: "periodical list",
              bodyData: t,
              onEditClick: (e) => {
                m(!0), h(), i(e);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.periodical.delete + "/" + e);
                  h(), j.handleSubmit();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Periodical List",
              onAddClick: () => {
                m(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: c,
              formik: j,
              formTitle: "Add Periodical List",
              onClose: p,
              submitButtonTitle: "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                component: "form",
                onSubmit: j.handleSubmit,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "title",
                      label: "Periodical Title",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      formik: j,
                      name: "type",
                      label: "Select Type",
                      options: [
                        { label: "Journal", value: "journal" },
                        { label: "Magazine", value: "magazine" },
                        { label: "Newspaper", value: "newspaper" },
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "department",
                      label: "Department",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "issueNumber",
                      label: "Issue Number",
                      type: "number",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "volumeNumber",
                      label: "Volume Number",
                      type: "number",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      required: !0,
                      formik: j,
                      name: "quantity",
                      label: "Quantity",
                      type: "number",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "price",
                      label: "price",
                      type: "number",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      required: !0,
                      formik: j,
                      name: "entryDate",
                      label: "Select Entry Date",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Ol.A, {
                      name: "bookCover",
                      onChange: (e) =>
                        ((e) => {
                          const { files: t } = e.target;
                          let a = [];
                          if (t.length > 0) {
                            for (let e = 0; e < t.length; e++) {
                              const l = t[e];
                              a.push(l);
                            }
                            o(a);
                          } else console.log("No files selected");
                        })(e),
                      customOnChange: !0,
                      selectedFiles: s,
                      previousFile:
                        null === n || void 0 === n ? void 0 : n.bookCover,
                      label: "Select Book Cover",
                      accept: "image/*",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const ss = [
          { name: "Photo", key: "photo", type: "image" },
          { name: "Name", key: "name", path: "studentName" },
          { name: "Class", key: "name", path: "className" },
          { name: "Section", key: "name", path: "sectionName" },
          { name: "Roll No", key: "rollNumber", path: "rollNo" },
          { name: "Library Id", key: "id" },
        ],
        os = [
          { name: "Photo", key: "photo", type: "image" },
          { name: "Name", key: "name", path: "studentName" },
          { name: "Class", key: "name", path: "className" },
          { name: "Section", key: "name", path: "sectionName" },
          { name: "Roll No", key: "rollNumber", path: "rollNo" },
          { name: "Library Id", key: "id" },
        ];
      var rs = a(70141),
        ds = a(48920);
      const cs = (e) => {
        let { onUpdate: t = () => {}, data: a = {}, actionType: n } = e;
        const [i, s] = (0, l.useState)(!1),
          [o, r] = (0, l.useState)(!1),
          d = () => {
            r(!1);
          },
          c = (0, et.Wx)({
            initialValues: {},
            onSubmit: async () => {
              try {
                s(!0),
                  "add" === n
                    ? await (0, Se.yJ)(
                        ke.r.student.updateLibraryMember + "/" + a._id
                      )
                    : await (0, Se.yH)(
                        ke.r.student.removeLibraryMember + "/" + a._id
                      ),
                  t(),
                  d(),
                  s(!1);
              } catch (e) {
                console.log(e), s(!1);
              }
            },
          }),
          m = "add" === n ? "Add Member" : "Remove Member",
          x =
            "add" === n
              ? "Do you want to add this student to the library member list?"
              : "Do you want to remove this student from the library member list?";
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(b.A, {
              direction: "row",
              spacing: 1,
              children: (0, re.jsx)($e.A, {
                size: "small",
                variant: "contained",
                startIcon:
                  "add" === n ? (0, re.jsx)(rs.A, {}) : (0, re.jsx)(ds.A, {}),
                onClick: () => {
                  r(!0);
                },
                children: "Member",
              }),
            }),
            (0, re.jsx)(pt, {
              open: o,
              formik: c,
              formTitle: m,
              onClose: d,
              submitButtonTitle: "Submit",
              adding: i,
              children: (0, re.jsx)(xe.Ay, {
                spacing: 2,
                container: !0,
                children: (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 12,
                  md: 12,
                  item: !0,
                  children: (0, re.jsx)(u.A, { children: x }),
                }),
              }),
            }),
          ],
        });
      };
      function ms() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          r = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                  params: { schoolId: e._id },
                }),
                a = t.result
                  .filter((e) => {
                    var t;
                    return null === e ||
                      void 0 === e ||
                      null === (t = e.otherInfo) ||
                      void 0 === t
                      ? void 0
                      : t.libraryMember;
                  })
                  .map((e) => ({
                    ...e,
                    studentName: e.basicInfo,
                    className: e.academicInfo.class,
                    sectionName: e.academicInfo.section,
                    rollNo: e.academicInfo,
                  })),
                l = t.result
                  .filter((e) => {
                    var t;
                    return !(
                      null !== e &&
                      void 0 !== e &&
                      null !== (t = e.otherInfo) &&
                      void 0 !== t &&
                      t.libraryMember
                    );
                  })
                  .map((e) => ({
                    ...e,
                    studentName: e.basicInfo,
                    className: e.academicInfo.class,
                    sectionName: e.academicInfo.section,
                    rollNo: e.academicInfo,
                  }));
              i(a), o(l);
            } catch (t) {
              console.log(t);
            }
          };
        return (
          (0, l.useEffect)(() => {
            r();
          }, [e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Student Library Member" }),
              (0, re.jsx)(kt.A, {
                onChange: (e, t) => a(t),
                value: t,
                labels: ["Student Member List", "Student Non Member List"],
              }),
              (0, re.jsx)(Ct.A, {
                index: 0,
                value: t,
                children: (0, re.jsx)(jt.A, {
                  actions: ["custom"],
                  tableKeys: ss,
                  bodyData: n,
                  bodyDataModal: "student",
                  CustomAction: (e) =>
                    (0, re.jsx)(cs, { ...e, actionType: "remove" }),
                  onUpdate: r,
                }),
              }),
              (0, re.jsx)(Ct.A, {
                index: 1,
                value: t,
                children: (0, re.jsx)(jt.A, {
                  actions: ["custom"],
                  tableKeys: os,
                  bodyData: s,
                  bodyDataModal: "student",
                  CustomAction: (e) =>
                    (0, re.jsx)(cs, { ...e, actionType: "add" }),
                  onUpdate: r,
                }),
              }),
            ],
          })
        );
      }
      const us = [
          { name: "Name", key: "name", path: "issuedName" },
          { name: "Library Id", key: "id" },
          { name: "Title", key: "title", path: "bookName" },
          { name: "Book Id", key: "id", path: "bookId" },
          { name: "Issue Date", key: "issueDate", isDate: !0 },
          { name: "Due Date", key: "dueDate", isDate: !0 },
        ],
        xs = [
          { name: "Name", key: "name", path: "issuedName" },
          { name: "Library Id", key: "id" },
          { name: "Title", key: "title", path: "bookName" },
          { name: "Book Id", key: "id", path: "bookId" },
          { name: "Issue Date", key: "issueDate", isDate: !0 },
          { name: "Due Date", key: "dueDate", isDate: !0 },
        ],
        hs = [
          { name: "Name", key: "name", path: "issuedName" },
          { name: "Library Id", key: "id" },
          { name: "Title", key: "title", path: "bookName" },
          { name: "Book Id", key: "id", path: "bookId" },
          { name: "Issue Date", key: "issueDate", isDate: !0 },
          { name: "Due Date", key: "dueDate", isDate: !0 },
        ],
        ps = (0, n.Ay)(ue.A)((e) => {
          let { theme: t } = e;
          return { display: "flex", justifyContent: "space-around" };
        }),
        js = [
          { label: "Student", value: "student" },
          { label: "Employee", value: "employee" },
        ],
        gs = [
          { label: "Book", value: "book" },
          { label: "Periodical", value: "periodical" },
        ],
        As = (e) => {
          let { onUpdate: t = () => {}, data: a = {} } = e;
          const [n, i] = (0, l.useState)(!1),
            [s, o] = (0, l.useState)(!1),
            r = () => {
              o(!1);
            },
            d = (0, et.Wx)({
              initialValues: {},
              onSubmit: async () => {
                try {
                  i(!0),
                    await (0, Se.yJ)(ke.r.bookIssue.submit + "/" + a._id),
                    t(),
                    r(),
                    i(!1);
                } catch (e) {
                  console.log(e), i(!1);
                }
              },
            });
          return (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(b.A, {
                direction: "row",
                spacing: 1,
                children: (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  onClick: () => {
                    o(!0);
                  },
                  children: "Return",
                }),
              }),
              (0, re.jsx)(pt, {
                open: s,
                formik: d,
                formTitle: "Return Book",
                onClose: r,
                submitButtonTitle: "Submit",
                adding: n,
                children: (0, re.jsx)(xe.Ay, {
                  spacing: 2,
                  container: !0,
                  children: (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(u.A, {
                      children:
                        "Are you sure you want to change the issue status to return?",
                    }),
                  }),
                }),
              }),
            ],
          });
        };
      function ys() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          [x, h] = (0, l.useState)([]),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)([]),
          [y, f] = (0, l.useState)([]),
          [v, S] = (0, l.useState)([]),
          k = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.bookIssue.list, {
                  params: { schoolId: e._id },
                }),
                a = t.result
                  .filter((e) => null == e.submissionDate)
                  .map((e) => ({
                    ...e,
                    bookName: e.book,
                    bookId: e.book,
                    issuedName: e.issuedTo.basicInfo,
                  })),
                l = new Date(),
                n = t.result
                  .filter(
                    (e) =>
                      e.dueDate &&
                      new Date(e.dueDate) < l &&
                      null == e.submissionDate
                  )
                  .map((e) => ({
                    ...e,
                    bookName: e.book,
                    bookId: e.book,
                    issuedName: e.issuedTo.basicInfo,
                  }));
              o(a), A(n);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          k();
        }, [e]);
        const C = async () => {
          try {
            const { data: t } = await (0, Se.Jt)(ke.r.book.list, {
              params: { schoolId: e._id },
            });
            j(t.result.map((e) => ({ ...e, label: e.title, value: e._id })));
          } catch (t) {
            console.log(t);
          }
        };
        (0, l.useEffect)(() => {
          C(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.periodical.list);
                S(
                  e.result.map((e) => ({ ...e, label: e.title, value: e._id }))
                );
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                    params: { schoolId: e._id },
                  }),
                  a = t.result
                    .filter((e) => {
                      var t;
                      return null === e ||
                        void 0 === e ||
                        null === (t = e.otherInfo) ||
                        void 0 === t
                        ? void 0
                        : t.libraryMember;
                    })
                    .map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }));
                m(a);
              } catch (t) {
                console.log(t);
              }
            })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.employee.list, {
                    params: { schoolId: e._id },
                  }),
                  a = t.result
                    .filter((e) =>
                      null === e || void 0 === e ? void 0 : e.libraryMember
                    )
                    .map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }));
                h(a);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e]);
        const D = (0, et.Wx)({
            initialValues: {
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: async (t) => {
              try {
                const { data: a } = await (0, Se.Jt)(ke.r.bookIssue.list, {
                  params: {
                    schoolId: e._id,
                    search: {
                      fromDate: Be()(t.fromDate).format("YYYY/MM/DD"),
                      toDate: Be()(t.toDate).format("YYYY/MM/DD"),
                    },
                  },
                });
                console.log(a.result, "issues"),
                  f(
                    a.result.map((e) => ({
                      ...e,
                      bookName: e.book,
                      bookId: e.book,
                      issuedName: e.issuedTo.basicInfo,
                    }))
                  ),
                  console.log(a.result, "histttttttttt");
              } catch (a) {
                console.log(a);
              }
            },
          }),
          w = (0, et.Wx)({
            initialValues: {
              issueDate: null,
              book: "",
              quantity: 0,
              dueDate: null,
              type: "",
              issuedToType: "",
              issuedTo: "",
              type: "",
            },
            onSubmit: async (t, a) => {
              let { resetForm: l } = a;
              try {
                const a = {
                  ...t,
                  issueDate: Be()(t.issueDate).format("YYYY/MM/DD"),
                  dueDate: Be()(t.dueDate).format("YYYY/MM/DD"),
                  schoolId: e._id,
                };
                d(!0);
                const { data: n } = await (0, Se.bE)(ke.r.bookIssue.create, a);
                k(), l(), I(), C();
              } catch (n) {
                console.log(n);
              }
              d(!1);
            },
            enableReinitialize: !0,
          }),
          I = () => {
            i(!1);
          };
        return (
          (0, l.useEffect)(() => {
            D.handleSubmit();
          }, [e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Issue & Return" }),
              (0, re.jsx)(kt.A, {
                onChange: (e, t) => a(t),
                value: t,
                labels: ["Issue List", "Due List", "History List"],
              }),
              (0, re.jsx)($e.A, {
                variant: "contained",
                onClick: () => {
                  i(!0);
                },
                sx: { mt: 1, mb: 2 },
                children: "Issue Book",
              }),
              (0, re.jsxs)(Ct.A, {
                index: 0,
                value: t,
                children: [
                  (0, re.jsxs)(ps, {
                    sx: { padding: 1 },
                    children: [
                      (0, re.jsxs)(u.A, {
                        variant: "h6",
                        fontWeight: "bold",
                        fontSize: 16,
                        children: [
                          "Total Books:",
                          " ",
                          p.reduce((e, t) => e + t.leftInStock, 0),
                        ],
                      }),
                      (0, re.jsxs)(u.A, {
                        variant: "h6",
                        fontWeight: "bold",
                        fontSize: 16,
                        children: ["Issued: ", s.length],
                      }),
                      (0, re.jsxs)(u.A, {
                        variant: "h6",
                        fontSize: 16,
                        fontWeight: "bold",
                        children: ["Due: ", g.length],
                      }),
                    ],
                  }),
                  (0, re.jsx)(jt.A, {
                    actions: ["custom"],
                    tableKeys: hs,
                    bodyData: s,
                    bodyDataModal: "issue list",
                    CustomAction: As,
                    onUpdate: k,
                  }),
                ],
              }),
              (0, re.jsx)(Ct.A, {
                index: 1,
                value: t,
                children: (0, re.jsx)(jt.A, {
                  actions: ["custom"],
                  tableKeys: us,
                  bodyData: g,
                  bodyDataModal: "due list",
                  CustomAction: As,
                  onUpdate: k,
                }),
              }),
              (0, re.jsxs)(Ct.A, {
                index: 2,
                value: t,
                children: [
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)("form", {
                      onSubmit: D.handleSubmit,
                      children: [
                        " ",
                        (0, re.jsxs)(xe.Ay, {
                          rowSpacing: 1,
                          columnSpacing: 2,
                          container: !0,
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              sm: 6,
                              md: 6,
                              lg: 4,
                              item: !0,
                              children: (0, re.jsx)(qt.A, {
                                formik: D,
                                label: "From Date",
                                name: "fromDate",
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              sm: 6,
                              md: 6,
                              lg: 4,
                              item: !0,
                              children: (0, re.jsx)(qt.A, {
                                formik: D,
                                label: "To Date",
                                name: "toDate",
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              sx: { alignSelf: "center", mt: 1 },
                              item: !0,
                              children: (0, re.jsx)($e.A, {
                                size: "small",
                                type: "submit",
                                variant: "contained",
                                children: "Find",
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 12,
                              lg: 12,
                              item: !0,
                              children: (0, re.jsxs)(b.A, {
                                spacing: 2,
                                direction: { xs: "column", md: "row" },
                                children: [
                                  (0, re.jsx)($e.A, {
                                    size: "small",
                                    onClick: async () => {
                                      try {
                                        Dl(
                                          "application/pdf",
                                          (
                                            await (0, Se.Jt)(
                                              ke.r.bookIssue.downloadPdf,
                                              {
                                                params: {
                                                  schoolId: e._id,
                                                  fromDate: D.values.fromDate,
                                                  toDate: D.values.toDate,
                                                },
                                              }
                                            )
                                          ).data,
                                          "Issue_Details.pdf"
                                        );
                                      } catch (t) {
                                        console.log(t);
                                      }
                                    },
                                    variant: "contained",
                                    children: "Download",
                                  }),
                                  (0, re.jsx)($e.A, {
                                    size: "small",
                                    onClick: async () => {
                                      try {
                                        Dl(
                                          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                          (
                                            await (0, Se.Jt)(
                                              ke.r.bookIssue.downloadExcel,
                                              {
                                                params: {
                                                  schoolId: e._id,
                                                  fromDate: D.values.fromDate,
                                                  toDate: D.values.toDate,
                                                },
                                                responseType: "blob",
                                              }
                                            )
                                          ).data,
                                          "Issue_Details.xlsx"
                                        );
                                      } catch (t) {
                                        console.log(t);
                                      }
                                    },
                                    variant: "contained",
                                    children: "Print",
                                  }),
                                ],
                              }),
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(jt.A, {
                    actions: [],
                    bodyData: y,
                    bodyDataModal: "list",
                    tableKeys: xs,
                  }),
                ],
              }),
              (0, re.jsx)(pt, {
                open: n,
                formik: w,
                formTitle: "Add Issue",
                onClose: I,
                submitButtonTitle: "Submit",
                adding: r,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "type",
                        formik: w,
                        label: "Select Tyoe",
                        options: gs,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: w,
                        name: "book",
                        label: "book" === w.values.type ? "Book" : "Periodical",
                        required: !0,
                        options: "book" === w.values.type ? p : v,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: w,
                        name: "issueDate",
                        label: "Issue Date",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: w,
                        name: "quantity",
                        label: "Quantity",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: w,
                        name: "dueDate",
                        label: "Due Date",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: w,
                        name: "issuedToType",
                        label: "Issued To Type",
                        required: !0,
                        options: js,
                      }),
                    }),
                    "student" === w.values.issuedToType &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: w,
                          name: "issuedTo",
                          label: "Issued To",
                          required: !0,
                          options: c,
                        }),
                      }),
                    "employee" === w.values.issuedToType &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: w,
                          name: "issuedTo",
                          label: "Issued To",
                          required: !0,
                          options: x,
                        }),
                      }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      const fs = [
          { name: "Name", key: "name", path: "empName" },
          { name: "Phone", key: "contactNumber" },
          { name: "Library Id", key: "libraryId" },
        ],
        vs = [
          { name: "Name", key: "name", path: "empName" },
          { name: "Phone", key: "contactNumber" },
          { name: "Library Id", key: "libraryId" },
        ];
      var bs = a(76164);
      const Ss = (e) => {
        let { onUpdate: t = () => {}, data: a = {}, actionType: n } = e;
        const [i, s] = (0, l.useState)(!1),
          [o, r] = (0, l.useState)(!1),
          d = () => {
            r(!1);
          },
          c = (0, et.Wx)({
            initialValues: {},
            onSubmit: async () => {
              try {
                s(!0),
                  "add" === n
                    ? await (0, Se.yJ)(
                        ke.r.employee.updateLibraryMember + "/" + a._id
                      )
                    : await (0, Se.yH)(
                        ke.r.employee.removeLibraryMember + "/" + a._id
                      ),
                  t(),
                  d(),
                  s(!1);
              } catch (e) {
                console.log(e), s(!1);
              }
            },
          }),
          m = "add" === n ? "Add Member" : "Remove Member",
          x =
            "add" === n
              ? "Do you want to add this employee to the library member list?"
              : "Do you want to remove this employee from the library member list?";
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(b.A, {
              direction: "row",
              spacing: 1,
              children: (0, re.jsx)($e.A, {
                size: "small",
                variant: "contained",
                startIcon:
                  "add" === n ? (0, re.jsx)(rs.A, {}) : (0, re.jsx)(bs.A, {}),
                onClick: () => {
                  r(!0);
                },
                children: "Member",
              }),
            }),
            (0, re.jsx)(pt, {
              open: o,
              formik: c,
              formTitle: m,
              onClose: d,
              submitButtonTitle: "Submit",
              adding: i,
              children: (0, re.jsx)(xe.Ay, {
                spacing: 2,
                container: !0,
                children: (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 12,
                  md: 12,
                  item: !0,
                  children: (0, re.jsx)(u.A, { children: x }),
                }),
              }),
            }),
          ],
        });
      };
      function ks() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          r = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.employee.list, {
                  params: { schoolId: e._id },
                }),
                a = t.result
                  .filter((e) =>
                    null === e || void 0 === e ? void 0 : e.libraryMember
                  )
                  .map((e) => ({ ...e, empName: e.basicInfo })),
                l = t.result
                  .filter(
                    (e) => !(null !== e && void 0 !== e && e.libraryMember)
                  )
                  .map((e) => ({ ...e, empName: e.basicInfo }));
              i(a), o(l);
            } catch (t) {
              console.log(t);
            }
          };
        return (
          (0, l.useEffect)(() => {
            r();
          }, [e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Employee Library Member" }),
              (0, re.jsx)(kt.A, {
                onChange: (e, t) => a(t),
                value: t,
                labels: ["Employee Member List", "Employee Non Member List"],
              }),
              (0, re.jsx)(Ct.A, {
                index: 0,
                value: t,
                children: (0, re.jsx)(jt.A, {
                  actions: ["custom"],
                  tableKeys: fs,
                  bodyData: n,
                  bodyDataModal: "employee",
                  CustomAction: (e) =>
                    (0, re.jsx)(Ss, { ...e, actionType: "remove" }),
                  onUpdate: r,
                }),
              }),
              (0, re.jsx)(Ct.A, {
                index: 1,
                value: t,
                children: (0, re.jsx)(jt.A, {
                  actions: ["custom"],
                  tableKeys: vs,
                  bodyData: s,
                  bodyDataModal: "employee",
                  CustomAction: (e) =>
                    (0, re.jsx)(Ss, { ...e, actionType: "add" }),
                  onUpdate: r,
                }),
              }),
            ],
          })
        );
      }
      const Cs = [
          { name: "Name", key: "name" },
          { name: "Library Id", key: "id" },
          { name: "Title", key: "title" },
          { name: "Book Id", key: "bookId" },
          { name: "Issue Date", key: "issueDate" },
          { name: "Due Date", key: "dueDate" },
        ],
        Ds = [
          { name: "Name", key: "name" },
          { name: "Library Id", key: "id" },
          { name: "Title", key: "title" },
          { name: "Book Id", key: "bookId" },
          { name: "Issue Date", key: "issueDate" },
          { name: "Due Date", key: "dueDate" },
        ],
        ws = [
          { name: "Name", key: "name" },
          { name: "Library Id", key: "id" },
          { name: "Title", key: "title" },
          { name: "Book Id", key: "bookId" },
          { name: "Issue Date", key: "issueDate" },
          { name: "Due Date", key: "dueDate" },
        ],
        Is = (0, n.Ay)(ue.A)((e) => {
          let { theme: t } = e;
          return { display: "flex", justifyContent: "space-around" };
        });
      function Ns() {
        const [e, t] = (0, l.useState)(0),
          [a, n] = (0, l.useState)([]),
          i = (0, et.Wx)({
            initialValues: {
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: console.log("nnnn"),
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Employee Issue & Return" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, a) => t(a),
              value: e,
              labels: ["Issue List", "Due List", "History List"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: e,
              children: [
                (0, re.jsxs)(Is, {
                  sx: { padding: 1 },
                  children: [
                    (0, re.jsx)(u.A, {
                      variant: "h6",
                      fontWeight: "bold",
                      fontSize: 16,
                      children: "Total Books: 1",
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "h6",
                      fontWeight: "bold",
                      fontSize: 16,
                      children: "Issued: 1",
                    }),
                    (0, re.jsx)(u.A, {
                      variant: "h6",
                      fontSize: 16,
                      fontWeight: "bold",
                      children: "Due: 1",
                    }),
                  ],
                }),
                (0, re.jsx)(jt.A, {
                  actions: [],
                  tableKeys: ws,
                  bodyData: a,
                  bodyDataModal: "employee",
                }),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: e,
              children: (0, re.jsx)(jt.A, {
                actions: [],
                tableKeys: Ds,
                bodyData: a,
              }),
            }),
            (0, re.jsxs)(Ct.A, {
              index: 2,
              value: e,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: i,
                          label: "From Date",
                          name: "fromDate",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: i,
                          label: "To Date",
                          name: "toDate",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        sx: { alignSelf: "center", mt: 1 },
                        item: !0,
                        children: (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          children: "Find",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsxs)(b.A, {
                          spacing: 2,
                          direction: { xs: "column", md: "row" },
                          children: [
                            (0, re.jsx)($e.A, {
                              size: "small",
                              variant: "contained",
                              children: "Download",
                            }),
                            (0, re.jsx)($e.A, {
                              size: "small",
                              variant: "contained",
                              children: "Print",
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(jt.A, { actions: [], tableKeys: Cs }),
              ],
            }),
          ],
        });
      }
      var _s = a(51292);
      const Ts = [
        { name: "Name", key: "name" },
        { name: "Leave Category", key: "leaveTypeFor" },
        { name: "Department", key: "departmentName" },
        { name: "Total", key: "total" },
      ];
      var Ms = a(90573);
      const Fs = (0, n.Ay)(s.A)(() => ({
          flexWrap: "nowrap",
          overflowY: "hidden",
          overflowX: "auto",
          flexDirection: "column",
          display: "flex",
          margin: "10px 10px",
        })),
        zs = (0, n.Ay)(u.A)(() => ({
          fontSize: "14px",
          paddingRight: "5px",
          paddingLeft: "5px",
        })),
        Es = (0, n.Ay)(s.A)(() => ({
          display: "flex",
          justifyContent: "space-between",
          backgroundColor: "#f9f9f9",
          marginRight: "10px",
          alignItems: "center",
          borderRadius: "10@s",
          minWidth: "150px",
        }));
      function qs(e) {
        let {} = e;
        const { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)([]),
          [o, r] = (0, l.useState)(null),
          [d, c] = (0, l.useState)(!1),
          [m, u] = (0, l.useState)(!1),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)({
            name: "",
            leaveTypeFor: "",
            departments: "",
            autoEarned: !1,
            total: 0,
            isSpecial: !1,
            canResetCarryForward: !1,
            carryForwardCount: 0,
            autoEarnCount: 0,
          });
        let {
          name: y,
          leaveTypeFor: f,
          departments: v,
          autoEarned: S,
          total: k,
          isSpecial: C,
          canResetCarryForward: w,
          carryForwardCount: I,
          autoEarnCount: N,
        } = g;
        const _ = async () => {
          try {
            const { data: e } = await (0, Se.Jt)(ke.r.leaveType.list, {
              params: { schoolId: t._id },
            });
            n(
              e.result.map((e) => ({
                ...e,
                departmentName:
                  null === e || void 0 === e
                    ? void 0
                    : e.departments.map((e) => e.name).join(", "),
              }))
            ),
              console.log(e.result, "bbbnvghfhfd");
          } catch (e) {
            console.log(e);
          }
        };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.department.list);
              s(e.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (e) {
              console.log(e);
            }
          })(),
            _();
        }, [t]);
        const T = () => {
          c(!1), r(null);
        };
        let M = (e) => {
          const { name: t, value: a } = e.target;
          "departments" === t ? j(a) : A({ ...g, [t]: a });
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Leave Type" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: Ts,
              bodyDataModal: "leave type",
              bodyData: a,
              onEditClick: (e) => {
                r(e),
                  A({
                    name: e.name,
                    leaveTypeFor: e.leaveTypeFor,
                    departments: e.departments.map((e) => e._id),
                    autoEarned: e.autoEarned,
                    total: e.total,
                    isSpecial: e.isSpecial,
                    canResetCarryForward: e.canResetCarryForward,
                    carryForwardCount: e.carryForwardCount,
                    autoEarnCount: e.autoEarnCount,
                  }),
                  j(e.departments.map((e) => e._id)),
                  c(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.leaveType.delete + "/" + e);
                  _();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Leave Type",
              onAddClick: () => {
                c(!0);
              },
            }),
            (0, re.jsx)(ct.A, {
              open: d,
              onClose: T,
              PaperProps: { sx: { width: "100%", maxWidth: 650 } },
              children: (0, re.jsxs)("form", {
                onSubmit: async (e) => {
                  e.preventDefault(), u(!0);
                  let a = {
                    name: y,
                    leaveTypeFor: f,
                    departments: p,
                    autoEarned: S,
                    total: k,
                    isSpecial: C,
                    canResetCarryForward: w,
                    carryForwardCount: I,
                    autoEarnCount: N,
                    schoolId: t._id,
                  };
                  try {
                    if ((u(!0), o)) {
                      const { data: e } = await (0, Se.yJ)(
                        ke.r.leaveType.update + "/" + o._id,
                        a
                      );
                      _();
                    } else {
                      const { data: e } = await (0, Se.bE)(
                        ke.r.leaveType.create,
                        a
                      );
                      _();
                    }
                    T();
                  } catch (l) {
                    console.log(l);
                  }
                  A({
                    name: "",
                    leaveTypeFor: "",
                    departments: "",
                    autoEarned: !1,
                    total: 0,
                    isSpecial: !1,
                    canResetCarryForward: !1,
                    carryForwardCount: 0,
                    autoEarnCount: 0,
                  }),
                    j([]),
                    c(!1),
                    u(!1);
                },
                children: [
                  (0, re.jsx)(mt.A, {
                    sx: { fontWeight: 600 },
                    children: o ? "Update  Leave Type" : "Add  Leave Type",
                  }),
                  (0, re.jsx)(x.A, {}),
                  (0, re.jsx)(ut.A, {
                    p: 2,
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 0,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          item: !0,
                          children: (0, re.jsx)(Ta.A, {
                            fullWidth: !0,
                            children: (0, re.jsx)(Mt.A, {
                              required: !0,
                              id: "basic-standard",
                              name: "name",
                              size: "small",
                              value: y,
                              onChange: M,
                              label: "Name",
                              sx: { label: { fontSize: 12 } },
                            }),
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          item: !0,
                          children: (0, re.jsxs)(Ta.A, {
                            fullWidth: !0,
                            size: "small",
                            children: [
                              (0, re.jsx)(Ma.A, {
                                size: "small",
                                required: !0,
                                children: "Select Leave Type",
                              }),
                              (0, re.jsxs)(Fa.A, {
                                required: !0,
                                label: "Select Leave Types",
                                labelId: "demo-simpless-select-filled-label",
                                id: "demo-simple-select-filled-l",
                                name: "leaveTypeFor",
                                value: f,
                                onChange: M,
                                children: [
                                  (0, re.jsx)(D.A, {
                                    value: "Student",
                                    children: "Student",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "Employee",
                                    children: "Employee",
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                        "Employee" ===
                          (null === g || void 0 === g
                            ? void 0
                            : g.leaveTypeFor) &&
                          (0, re.jsxs)(re.Fragment, {
                            children: [
                              (0, re.jsxs)(xe.Ay, {
                                item: !0,
                                xs: 12,
                                md: 12,
                                mt: 2,
                                children: [
                                  (0, re.jsxs)(Ta.A, {
                                    fullWidth: !0,
                                    size: "small",
                                    children: [
                                      (0, re.jsx)(Ma.A, {
                                        size: "small",
                                        required: !0,
                                        children: "Select Department",
                                      }),
                                      (0, re.jsx)(Fa.A, {
                                        label: "Select Departments",
                                        labelId:
                                          "demo-simpless-select-filled-label",
                                        id: "demo-simple-select-filled-l",
                                        name: "departments",
                                        value: p || "",
                                        onChange: M,
                                        multiple: !0,
                                        children: i.map((e) =>
                                          (0, re.jsx)(
                                            D.A,
                                            {
                                              value: e.value,
                                              children: e.label,
                                            },
                                            e.value
                                          )
                                        ),
                                      }),
                                    ],
                                  }),
                                  (0, re.jsx)(Fs, {
                                    children: p.map((e) => {
                                      var t;
                                      return (0, re.jsxs)(
                                        Es,
                                        {
                                          children: [
                                            (0, re.jsx)(zs, {
                                              component: "span",
                                              children:
                                                null ===
                                                  (t = i.filter(
                                                    (t) => t.value == e
                                                  )[0]) || void 0 === t
                                                  ? void 0
                                                  : t.label,
                                            }),
                                            (0, re.jsx)(h.A, {
                                              color: "error",
                                              onClick: () =>
                                                ((e) => {
                                                  let t = p.filter(
                                                    (t) => t != e
                                                  );
                                                  j(t);
                                                })(e),
                                              children: (0, re.jsx)(Ms.A, {
                                                fontSize: "small",
                                              }),
                                            }),
                                          ],
                                        },
                                        e
                                      );
                                    }),
                                  }),
                                ],
                              }),
                              (0, re.jsx)(xe.Ay, {
                                item: !0,
                                xs: 12,
                                sm: 12,
                                md: 12,
                                children: (0, re.jsx)(Ta.A, {
                                  required: !0,
                                  fullWidth: !0,
                                  size: "small",
                                  children: (0, re.jsxs)(za.A, {
                                    size: "small",
                                    row: !0,
                                    "aria-labelledby":
                                      "demo-row-radio-buttons-group-label",
                                    name: "isSpecial",
                                    sx: {
                                      display: "flex",
                                      alignItems: "center",
                                    },
                                    value: C,
                                    onChange: M,
                                    children: [
                                      (0, re.jsx)(_s.A, {
                                        id: "demo-row-radio-buttons-group-label",
                                        sx: {
                                          fontSize: "15px",
                                          fontWeight: 600,
                                        },
                                        children: "Is Special Type:",
                                      }),
                                      (0, re.jsxs)(b.A, {
                                        direction: "row",
                                        marginLeft: 2,
                                        children: [
                                          (0, re.jsx)(Ea.A, {
                                            value: !0,
                                            control: (0, re.jsx)(qa.A, {
                                              size: "small",
                                            }),
                                            label: "Yes",
                                          }),
                                          (0, re.jsx)(Ea.A, {
                                            value: !1,
                                            control: (0, re.jsx)(qa.A, {
                                              size: "small",
                                            }),
                                            label: "No",
                                          }),
                                        ],
                                      }),
                                    ],
                                  }),
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 12,
                                item: !0,
                                children: (0, re.jsx)(Ta.A, {
                                  fullWidth: !0,
                                  size: "small",
                                  children: (0, re.jsx)(Mt.A, {
                                    required: !0,
                                    id: "basic-standard",
                                    size: "small",
                                    name: "total",
                                    value: k,
                                    onChange: M,
                                    label: "Total",
                                    sx: { label: { fontSize: 12 } },
                                    type: "number",
                                  }),
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                item: !0,
                                xs: 12,
                                sm: 12,
                                md: 12,
                                mt: 2,
                                children: (0, re.jsx)(Ta.A, {
                                  fullWidth: !0,
                                  size: "small",
                                  children: (0, re.jsxs)(za.A, {
                                    row: !0,
                                    "aria-labelledby":
                                      "demo-row-radio-buttons-group-label",
                                    name: "autoEarned",
                                    sx: {
                                      display: "flex",
                                      alignItems: "center",
                                    },
                                    value: S,
                                    onChange: M,
                                    children: [
                                      (0, re.jsx)(_s.A, {
                                        id: "demo-row-radio-buttons-group-label",
                                        sx: {
                                          fontSize: "15px",
                                          fontWeight: 600,
                                        },
                                        children: "Is Leave Auto Earned:",
                                      }),
                                      (0, re.jsxs)(b.A, {
                                        direction: "row",
                                        marginLeft: 2,
                                        children: [
                                          (0, re.jsx)(Ea.A, {
                                            value: !0,
                                            control: (0, re.jsx)(qa.A, {
                                              size: "small",
                                            }),
                                            label: "Yes",
                                          }),
                                          (0, re.jsx)(Ea.A, {
                                            size: "small",
                                            value: !1,
                                            control: (0, re.jsx)(qa.A, {
                                              size: "small",
                                            }),
                                            label: "No",
                                          }),
                                        ],
                                      }),
                                    ],
                                  }),
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 12,
                                item: !0,
                                children: (0, re.jsx)(Ta.A, {
                                  fullWidth: !0,
                                  size: "small",
                                  children: (0, re.jsx)(Mt.A, {
                                    required: !0,
                                    id: "basic-standard",
                                    size: "small",
                                    name: "autoEarnCount",
                                    value: N,
                                    onChange: M,
                                    label: "Enter Auto Earn Count",
                                    sx: { label: { fontSize: 12 } },
                                    type: "number",
                                  }),
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                item: !0,
                                xs: 12,
                                sm: 12,
                                md: 12,
                                mt: 2,
                                children: (0, re.jsx)(Ta.A, {
                                  fullWidth: !0,
                                  children: (0, re.jsxs)(za.A, {
                                    row: !0,
                                    "aria-labelledby":
                                      "demo-row-radio-buttons-group-label",
                                    name: "canResetCarryForward",
                                    sx: {
                                      display: "flex",
                                      alignItems: "center",
                                    },
                                    value: w,
                                    onChange: M,
                                    children: [
                                      (0, re.jsx)(_s.A, {
                                        id: "demo-row-radio-buttons-group-label",
                                        sx: {
                                          fontSize: "15px",
                                          fontWeight: 600,
                                        },
                                        children: "Is Carryforward Reset:",
                                      }),
                                      (0, re.jsxs)(b.A, {
                                        direction: "row",
                                        marginLeft: 2,
                                        children: [
                                          (0, re.jsx)(Ea.A, {
                                            size: "small",
                                            value: !0,
                                            sx: { fontSize: 15 },
                                            control: (0, re.jsx)(qa.A, {
                                              size: "small",
                                            }),
                                            label: "Yes",
                                          }),
                                          (0, re.jsx)(Ea.A, {
                                            size: "small",
                                            value: !1,
                                            sx: { fontSize: 15 },
                                            control: (0, re.jsx)(qa.A, {
                                              size: "small",
                                            }),
                                            label: "No",
                                          }),
                                        ],
                                      }),
                                    ],
                                  }),
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 12,
                                item: !0,
                                children: (0, re.jsx)(Ta.A, {
                                  fullWidth: !0,
                                  size: "small",
                                  children: (0, re.jsx)(Mt.A, {
                                    required: !0,
                                    id: "basic-standard",
                                    size: "small",
                                    name: "carryForwardCount",
                                    value: I,
                                    onChange: M,
                                    label: "Enter Carryforward Count",
                                    sx: { label: { fontSize: 12 } },
                                    type: "number",
                                  }),
                                }),
                              }),
                            ],
                          }),
                      ],
                    }),
                  }),
                  (0, re.jsxs)(xt.A, {
                    children: [
                      (0, re.jsx)($e.A, {
                        size: "small",
                        color: "error",
                        variant: "contained",
                        onClick: T,
                        children: "Close",
                      }),
                      (0, re.jsx)(ht.A, {
                        size: "small",
                        loading: m,
                        variant: "contained",
                        type: "submit",
                        children: o ? "Update" : "Submit",
                      }),
                    ],
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Ys = [
        { name: "Name", key: "name" },
        { name: "Leave Type", key: "leaveType" },
        { name: "Number Of Days", key: "numberOfDays" },
        { name: "Start Date", key: "startDate" },
        { name: "End Date", key: "endDate" },
        { name: "Status", key: "status" },
      ];
      function Ws() {
        const [e, t] = (0, l.useState)([]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Student Leave" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit"],
              tableKeys: Ys,
              bodyDataModal: "student leave",
              bodyData: e,
            }),
          ],
        });
      }
      const Rs = [
          { name: "Name", key: "applierRoleName" },
          { name: "Leave Type", key: "leaveTypeName" },
          { name: "Number Of Days", key: "totalDays" },
          { name: "Start Date", key: "startDate", isDate: !0 },
          { name: "End Date", key: "endDate", isDate: !0 },
          { name: "Status", key: "leaveStatus" },
        ],
        Ps = [
          { name: "Name", key: "applierRoleName" },
          { name: "Leave Type", key: "leaveTypeName" },
          { name: "Number Of Days", key: "totalDays" },
          { name: "Start Date", key: "startDate", isDate: !0 },
          { name: "End Date", key: "endDate", isDate: !0 },
          { name: "Status", key: "leaveStatus" },
        ],
        Js = (0, n.Ay)(ue.A)((e) => {
          let { theme: t } = e;
          return { height: "80px", padding: "20px", textAlign: "center" };
        }),
        Vs = (0, n.Ay)(xe.Ay)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            marginBottom: "10px",
          };
        }),
        Bs = [
          { label: "FullDay", value: "fullday" },
          { label: "First half", value: "firstHalf" },
          { label: "Second half", value: "secondHalf" },
        ],
        Os = (e) => {
          let { onUpdate: t = () => {}, data: a = {} } = e;
          const [n, i] = (0, l.useState)(!1),
            [s, o] = (0, l.useState)(!1),
            { selectedSetting: r } = (0, l.useContext)(Ce.A);
          return (0, re.jsx)(re.Fragment, {
            children: (0, re.jsxs)(b.A, {
              direction: "row",
              spacing: 1,
              children: [
                "pending" === a.leaveStatus || "rejected" === a.leaveStatus
                  ? (0, re.jsx)(ht.A, {
                      loading: s,
                      size: "small",
                      onClick: async () => {
                        try {
                          const e = { schoolId: r._id };
                          o(!0),
                            await (0, Se.yJ)(
                              ke.r.leaveApplication.approveLeave + "/" + a._id,
                              e
                            ),
                            t(),
                            o(!1);
                        } catch (e) {
                          console.log(e), o(!1);
                        }
                      },
                      color: "success",
                      variant: "contained",
                      children: "Approve",
                    })
                  : null,
                "pending" === a.leaveStatus || "approved" === a.leaveStatus
                  ? (0, re.jsx)(ht.A, {
                      loading: n,
                      size: "small",
                      onClick: async () => {
                        try {
                          const e = { schoolId: r._id };
                          i(!0),
                            await (0, Se.yJ)(
                              ke.r.leaveApplication.rejectLeave + "/" + a._id,
                              e
                            ),
                            t(),
                            i(!1);
                        } catch (e) {
                          console.log(e), i(!1);
                        }
                      },
                      color: "error",
                      variant: "contained",
                      children: "Reject",
                    })
                  : null,
              ],
            }),
          });
        };
      function Ls() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)(null),
          [o, r] = (0, l.useState)(!1),
          [d, c] = (0, l.useState)(!1),
          [m, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)(0),
          [j, g] = (0, l.useState)([]),
          [A, y] = (0, l.useState)([]),
          [f, v] = (0, l.useState)([]),
          [b, S] = (0, l.useState)([]),
          [k, C] = (0, l.useState)([]),
          D = () => {
            r(!1), i(null);
          },
          w = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.leaveApplication.list, {
                params: { schoolId: e._id },
              });
              y(
                t.result.map((e) => ({ ...e, leaveTypeName: e.leaveType.name }))
              );
            } catch (t) {
              console.log(t);
            }
          },
          I = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(
                ke.r.leaveApplication.listEmployeeApplications,
                { params: { schoolId: e._id } }
              );
              v(
                t.result.map((e) => ({ ...e, leaveTypeName: e.leaveType.name }))
              );
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.leaveType.list, {
                params: { schoolId: e._id },
              });
              g(t.result.map((e) => ({ ...e, label: e.name, value: e._id })));
            } catch (t) {
              console.log(t);
            }
          })(),
            w(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(
                  ke.r.leaveApplication.employeeLeaveCredits,
                  { params: { schoolId: e._id } }
                );
                C(t.result);
              } catch (t) {
                console.log(t);
              }
            })(),
            I();
        }, [e]);
        const N = (0, et.Wx)({
          initialValues: {
            leaveType: "",
            startDate: null,
            endDate: null,
            subject: "",
            description: "",
          },
          onSubmit: async (t) => {
            const a = new FormData();
            a.append("schoolId", e._id),
              a.append("leaveTypeId", t.leaveType),
              a.append("startDate", Be()(t.startDate).format("YYYY-MM-DD")),
              a.append("endDate", Be()(t.endDate).format("YYYY-MM-DD")),
              a.append("subject", t.subject),
              a.append("description", t.description),
              a.append("totalDays", h),
              m.forEach((e) => a.append("file", e));
            try {
              c(!0);
              const { data: e } = await (0, Se.bE)(
                ke.r.leaveApplication.create,
                a
              );
              I(), D();
            } catch (l) {
              console.log(l);
            }
            c(!1);
          },
          enableReinitialize: !0,
        });
        return (
          (0, l.useEffect)(() => {
            let e = 0;
            for (let t of b)
              t.value && ("fullday" === t.value ? (e += 1) : (e += 0.5));
            p(e);
          }, [b]),
          (0, l.useEffect)(() => {
            if (N.values.endDate && N.values.startDate) {
              const e = new Date(N.values.startDate),
                t = new Date(N.values.endDate);
              if (e <= t) {
                const a = new Date(e);
                let l = [];
                for (; a <= t; ) {
                  let e = { value: "", date: new Date(a).toLocaleDateString() };
                  l.push(e), a.setDate(a.getDate() + 1);
                }
                S(l);
              }
            }
          }, [N.values.endDate, N.values.startDate]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Employee Leave" }),
              (0, re.jsx)(kt.A, {
                onChange: (e, t) => a(t),
                value: t,
                labels: ["Leave List", "Leave Manage"],
              }),
              (0, re.jsxs)(Ct.A, {
                index: 0,
                value: t,
                children: [
                  (0, re.jsxs)(Vs, {
                    container: !0,
                    spacing: 2,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 4,
                        md: 4,
                        lg: 2,
                        children: (0, re.jsx)(Js, {
                          children: (0, re.jsx)(u.A, {
                            fontSize: "15px",
                            color: "#196838",
                            children: "Total taken :89",
                          }),
                        }),
                      }),
                      k.map((e) =>
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 4,
                          md: 4,
                          lg: 2,
                          children: (0, re.jsxs)(Js, {
                            children: [
                              (0, re.jsxs)(u.A, {
                                fontSize: "15px",
                                children: [e.name, ":", e.total],
                              }),
                              (0, re.jsxs)(u.A, {
                                fontSize: "15px",
                                children: [
                                  " ",
                                  "Total taken :",
                                  e.totalTaken ? e.totalTaken : 0,
                                ],
                              }),
                            ],
                          }),
                        })
                      ),
                    ],
                  }),
                  (0, re.jsx)(jt.A, {
                    actions: [],
                    tableKeys: Ps,
                    bodyData: f,
                    bodyDataModal: "leave",
                  }),
                ],
              }),
              (0, re.jsx)(Ct.A, {
                index: 1,
                value: t,
                children: (0, re.jsx)(jt.A, {
                  actions: ["custom"],
                  tableKeys: Rs,
                  bodyData: A,
                  bodyDataModal: "leave",
                  CustomAction: Os,
                  onUpdate: w,
                }),
              }),
              (0, re.jsx)(rt, {
                title: "Add Employee Leave",
                onAddClick: () => {
                  r(!0);
                },
              }),
              (0, re.jsx)(pt, {
                open: o,
                formik: N,
                formTitle: n ? "Update Employee Leave" : "Add Employee Leave",
                onClose: D,
                submitButtonTitle: n ? "Update" : "Submit",
                adding: d,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: N,
                        name: "leaveType",
                        label: "Leave Type",
                        required: !0,
                        options: j,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: N,
                        name: "startDate",
                        label: "Start Date",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: N,
                        name: "endDate",
                        label: "End Date",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: N,
                        name: "subject",
                        label: "Subject",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: N,
                        name: "description",
                        label: "Description",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Ol.A, {
                        name: "image",
                        label: "Select File",
                        onChange: (e) =>
                          ((e, t) => {
                            const { files: a } = e.target;
                            let l = [];
                            if (a.length > 0) {
                              for (let e = 0; e < a.length; e++) {
                                const t = a[e];
                                l.push(t);
                              }
                              x(l);
                            } else console.log("No files selected");
                          })(e),
                        customOnChange: !0,
                        selectedFiles: m,
                        onRemove: (e) =>
                          ((e, t) => {
                            x(m.filter((t) => t.name != e));
                          })(e),
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      md: 6,
                      sx: { margin: "15px 0px" },
                      children: (0, re.jsxs)(u.A, {
                        children: ["Number of days : ", h],
                      }),
                    }),
                    N.values.endDate
                      ? (0, re.jsxs)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 12,
                          lg: 12,
                          children: [
                            (0, re.jsx)(u.A, {
                              required: !0,
                              children: "Information :",
                            }),
                            N.values.endDate
                              ? (0, re.jsx)(s.A, {
                                  style: {
                                    height: "100px",
                                    overflow: "scroll",
                                  },
                                  children: b.map((e, t) =>
                                    (0, re.jsxs)(
                                      s.A,
                                      {
                                        sx: {
                                          display: "flex",
                                          flexDirection: "row",
                                          alignItems: "center",
                                          justifyContent: "center",
                                          gap: "10px",
                                        },
                                        children: [
                                          (0, re.jsx)(u.A, {
                                            children: e.date,
                                          }),
                                          (0, re.jsx)(hl, {
                                            name: "totalDays",
                                            value: e.value,
                                            onChange: (t) =>
                                              ((e, t) => {
                                                const { name: a, value: l } =
                                                    e.target,
                                                  n = b.indexOf(t);
                                                let i = b.map((e, t) =>
                                                  t == n
                                                    ? { ...e, value: l }
                                                    : e
                                                );
                                                S(i);
                                              })(t, e),
                                            options: Bs,
                                          }),
                                        ],
                                      },
                                      t
                                    )
                                  ),
                                })
                              : (0, re.jsx)(re.Fragment, {}),
                          ],
                        })
                      : (0, re.jsx)(re.Fragment, {}),
                  ],
                }),
              }),
            ],
          })
        );
      }
      const Us = [
        { label: "Student", value: "student" },
        { label: "Employee", value: "employee" },
      ];
      function Hs() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)([]),
          [A, y] = (0, l.useState)(!1),
          [f, v] = (0, l.useState)(!1),
          b = async (t) => {
            try {
              y(!0);
              Dl(
                "application/pdf",
                (
                  await (0, Se.Jt)(ke.r.leaveApplication.downloadPdf, {
                    params: {
                      schoolId: e._id,
                      fromDate: Be()(t.fromDate).format("YYYY/MM/DD"),
                      toDate: Be()(t.toDate).format("YYYY/MM/DD"),
                      userType: t.userType,
                      academicYearId: t.academicYear,
                    },
                    responseType: "blob",
                  })
                ).data,
                "leave_details.pdf"
              ),
                y(!1);
            } catch (a) {
              console.log(a), y(!1);
            }
          },
          S = async (t) => {
            try {
              v(!0);
              Dl(
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                (
                  await (0, Se.Jt)(ke.r.leaveApplication.downloadExcel, {
                    params: {
                      schoolId: e._id,
                      userType: t.userType,
                      academicYearId: t.academicYear,
                    },
                    responseType: "blob",
                  })
                ).data,
                "leave_details.xlsx"
              ),
                v(!1);
            } catch (a) {
              console.log(a), v(!1);
            }
          },
          k = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              type: "",
              class: "",
              section: "",
              student: "",
              role: "",
              employee: "",
            },
            onSubmit: S,
          }),
          C = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
              type: "",
              userType: "",
              class: "",
              section: "",
              student: "",
              role: "",
              employee: "",
            },
            onSubmit: b,
          });
        return (
          (0, l.useEffect)(() => {
            (k.values.class || C.values.class) &&
              (async () => {
                try {
                  var t, a;
                  const { data: l } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: k.values.class || C.values.class },
                    },
                  });
                  k.setFieldValue(
                    "section",
                    null === (t = l.result[0]) || void 0 === t ? void 0 : t._id
                  ),
                    C.setFieldValue(
                      "section",
                      null === (a = l.result[0]) || void 0 === a
                        ? void 0
                        : a._id
                    ),
                    d(
                      l.result.map((e) => ({
                        ...e,
                        label: e.name,
                        value: e._id,
                      }))
                    );
                } catch (l) {
                  console.log(l);
                }
              })();
          }, [k.values.class, C.values.class]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                var e, t;
                const { data: a } = await (0, Se.Jt)(ke.r.academicYear.list);
                i(
                  a.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                ),
                  k.setFieldValue(
                    "academicYear",
                    null === (e = a.result[0]) || void 0 === e ? void 0 : e._id
                  ),
                  C.setFieldValue(
                    "academicYear",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  });
                  o(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    k.setFieldValue("class", t.result[0]._id),
                    C.setFieldValue("class", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })(),
              (async () => {
                try {
                  var e, t;
                  const { data: a } = await (0, Se.Jt)(ke.r.role.list);
                  x(
                    a.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    k.setFieldValue(
                      "role",
                      null === (e = a.result[0]) || void 0 === e
                        ? void 0
                        : e._id
                    ),
                    C.setFieldValue(
                      "role",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.error(a);
                }
              })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.leaveType.list, {
                    params: { schoolId: e._id },
                  });
                  p(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [e._id]),
          (0, l.useEffect)(() => {
            ((k.values.academicYear && k.values.class && k.values.section) ||
              (C.values.academicYear && C.values.class && C.values.section)) &&
              (async () => {
                try {
                  var t, a;
                  const { data: l } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        academicYear:
                          k.values.academicYear || C.values.academicYear,
                        "academicInfo.class": k.values.class || C.values.class,
                        "academicInfo.section":
                          k.values.section || C.values.section,
                      },
                    },
                  });
                  m(
                    l.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    k.setFieldValue(
                      "student",
                      null === (t = l.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    ),
                    C.setFieldValue(
                      "student",
                      null === (a = l.result[0]) || void 0 === a
                        ? void 0
                        : a._id
                    );
                } catch (l) {
                  console.log(l);
                }
              })();
          }, [
            k.values.academicYear,
            k.values.class,
            k.values.section,
            C.values.academicYear,
            C.values.class,
            C.values.section,
            e,
          ]),
          (0, l.useEffect)(() => {
            (k.values.role || C.values.role) &&
              (async () => {
                try {
                  var t, a;
                  const { data: l } = await (0, Se.Jt)(ke.r.employee.list, {
                    params: {
                      schoolId: e._id,
                      search: { role: k.values.role || C.values.role },
                    },
                  });
                  g(
                    l.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    k.setFieldValue(
                      "employee",
                      null === (t = l.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    ),
                    C.setFieldValue(
                      "employee",
                      null === (a = l.result[0]) || void 0 === a
                        ? void 0
                        : a._id
                    );
                } catch (l) {
                  console.log(l);
                }
              })();
          }, [k.values.role, C.values.role]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Leave Report" }),
              (0, re.jsx)(kt.A, {
                onChange: (e, t) => a(t),
                value: t,
                labels: ["Summary", "Leave Planner"],
              }),
              (0, re.jsx)(Ct.A, {
                index: 0,
                value: t,
                children: (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "academicYear",
                          formik: k,
                          label: "Select Academic Year",
                          options: n,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "type",
                          formik: k,
                          label: "Select Type",
                          options: Us,
                        }),
                      }),
                      "student" === k.values.type &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "class",
                                formik: k,
                                label: "Select Class",
                                options: s,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "section",
                                formik: k,
                                label: "Select Section",
                                options: r,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "student",
                                formik: k,
                                label: "Select Student",
                                options: c,
                              }),
                            }),
                          ],
                        }),
                      "employee" === k.values.type &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "role",
                                formik: k,
                                label: "Select Role",
                                options: u,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "employee",
                                formik: k,
                                label: "Select Employee",
                                options: j,
                              }),
                            }),
                          ],
                        }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        sx: { alignSelf: "center" },
                        item: !0,
                        children: (0, re.jsx)(ht.A, {
                          loading: f,
                          onClick: S,
                          size: "small",
                          variant: "contained",
                          children: "Download",
                        }),
                      }),
                    ],
                  }),
                }),
              }),
              (0, re.jsx)(Ct.A, {
                index: 1,
                value: t,
                children: (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "academicYear",
                          formik: C,
                          label: "Select Academic Year",
                          options: n,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: C,
                          label: "From Date",
                          name: "fromDate",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: C,
                          label: "To Date",
                          name: "toDate",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "type",
                          formik: C,
                          label: "Select Type",
                          options: h,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "userType",
                          formik: C,
                          label: "Select User Type",
                          options: Us,
                        }),
                      }),
                      "student" === C.values.userType &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "class",
                                formik: C,
                                label: "Select Class",
                                options: s,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "section",
                                formik: C,
                                label: "Select Section",
                                options: r,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "student",
                                formik: C,
                                label: "Select Student",
                                options: c,
                              }),
                            }),
                          ],
                        }),
                      "employee" === C.values.userType &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "role",
                                formik: C,
                                label: "Select Role",
                                options: u,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(Xe.A, {
                                required: !0,
                                name: "employee",
                                formik: C,
                                label: "Select Employee",
                                options: j,
                              }),
                            }),
                          ],
                        }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        sx: { alignSelf: "center" },
                        item: !0,
                        children: (0, re.jsx)(ht.A, {
                          loading: A,
                          onClick: b,
                          size: "small",
                          variant: "contained",
                          children: "Print",
                        }),
                      }),
                    ],
                  }),
                }),
              }),
            ],
          })
        );
      }
      const Gs = [
        { name: "Item Name", key: "name" },
        { name: "Department", key: "departmentName" },
        { name: "Item Id", key: "itemId" },
        { name: "Brand", key: "brand" },
      ];
      function Ks() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(0),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(null),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)(!1),
          [h, p] = (0, l.useState)(!1),
          j = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.item.list, {
                params: { schoolId: e._id },
              });
              a(
                t.result.map((e) => {
                  var t;
                  return {
                    ...e,
                    departmentName:
                      null === e ||
                      void 0 === e ||
                      null === (t = e.department) ||
                      void 0 === t
                        ? void 0
                        : t.name,
                  };
                })
              );
            } catch (t) {
              console.log(t);
            }
          },
          g = (0, et.Wx)({
            initialValues: {
              name: (null === r || void 0 === r ? void 0 : r.name) || "",
              department:
                (null === r || void 0 === r ? void 0 : r.department) || "",
              brand: (null === r || void 0 === r ? void 0 : r.brand) || "",
              itemId: (null === r || void 0 === r ? void 0 : r.itemId) || "",
              description:
                (null === r || void 0 === r ? void 0 : r.description) || "",
            },
            onSubmit: async (t) => {
              try {
                const a = { ...t, schoolId: e._id };
                if ((m(!0), r)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.item.update + "/" + r._id,
                    a
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.item.create, a);
                }
                A();
              } catch (a) {
                console.log(a);
              }
              m(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.department.list);
              o(t.result.map((e) => ({ label: e.name, value: e._id }))),
                g.setFieldValue(
                  "department",
                  null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })(),
            j();
        }, []);
        const A = () => {
          i(0), j(), d(null);
        };
        return (
          (0, l.useEffect)(() => {
            0 === n && (g.resetForm(), d(null));
          }, [n]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Item" }),
              (0, re.jsx)(kt.A, {
                onChange: (e, t) => {
                  i(t);
                },
                value: n,
                labels: ["Item List", r && 0 != n ? "Edit Item" : "Add Item"],
              }),
              (0, re.jsxs)(Ct.A, {
                index: 0,
                value: n,
                children: [
                  (0, re.jsx)(ht.A, {
                    type: "submit",
                    size: "small",
                    variant: "contained",
                    sx: { my: 2 },
                    loading: u,
                    onClick: async (t) => {
                      x(!0);
                      try {
                        const t = await (0, Se.Jt)(ke.r.item.downloadPdf, {
                            responseType: "blob",
                            params: { schoolId: e._id },
                          }),
                          a = URL.createObjectURL(t.data);
                        window.open(a, "_blank");
                      } catch (a) {
                        console.log(a);
                      }
                      x(!1);
                    },
                    children: "PDF",
                  }),
                  (0, re.jsx)(ht.A, {
                    type: "submit",
                    size: "small",
                    variant: "contained",
                    sx: { ml: 2, my: 2 },
                    loading: h,
                    onClick: async (t) => {
                      p(!0);
                      try {
                        Dl(
                          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                          (
                            await (0, Se.Jt)(ke.r.item.downloadExcel, {
                              params: { schoolId: e._id },
                              responseType: "blob",
                            })
                          ).data,
                          "Inventory_Items"
                        );
                      } catch (a) {
                        console.error(a);
                      }
                      p(!1);
                    },
                    children: "Excel",
                  }),
                  (0, re.jsx)(jt.A, {
                    actions: ["edit"],
                    bodyDataModal: "Items",
                    bodyData: t,
                    tableKeys: Gs,
                    onEditClick: (e) => {
                      d({ ...e, department: e.department._id }), i(1);
                    },
                  }),
                ],
              }),
              (0, re.jsx)(Ct.A, {
                index: 1,
                value: n,
                children: (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    component: "form",
                    onSubmit: g.handleSubmit,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "name",
                          formik: g,
                          label: "Item name",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "department",
                          formik: g,
                          label: "Select Department",
                          options: s,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "brand",
                          formik: g,
                          label: "Brand",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "itemId",
                          formik: g,
                          label: "item Id",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !1,
                          name: "description",
                          formik: g,
                          label: "Description",
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        style: { alignSelf: "center", marginTop: "10px" },
                        item: !0,
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            color: "error",
                            variant: "contained",
                            onClick: A,
                            children: "Cancel",
                          }),
                          (0, re.jsx)(ht.A, {
                            type: "submit",
                            size: "small",
                            variant: "contained",
                            loading: c,
                            sx: { ml: 2 },
                            children: "Submit",
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
              (0, re.jsx)(Ct.A, {
                index: 2,
                value: n,
                children: (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "name",
                          formik: g,
                          label: "Item name",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "department",
                          formik: g,
                          label: "Select Department",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "brand",
                          formik: g,
                          label: "brand",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "id",
                          formik: g,
                          label: "Item Id",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !1,
                          name: "note",
                          formik: g,
                          label: "Description",
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        style: { alignSelf: "center", marginTop: "10px" },
                        item: !0,
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            color: "error",
                            variant: "contained",
                            children: "Cancel",
                          }),
                          (0, re.jsx)($e.A, {
                            size: "small",
                            variant: "contained",
                            sx: { ml: 2 },
                            children: "Update",
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
            ],
          })
        );
      }
      const Qs = [{ name: "Name", key: "name" }];
      var Zs = a(88084);
      const $s = (0, n.Ay)(s.A)({
          background: "#ececec",
          width: "100px",
          height: "100px",
          borderRadius: "50%",
          overflow: "hidden",
          backgroundPosition: "center",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }),
        Xs = (0, n.Ay)(s.A)({
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          marginBottom: "15px",
          padding: "15px 0px",
        });
      function eo() {
        var e, t, a, n, i, s, o, r, d, c, m, x, h, p, j, g;
        const { selectedSetting: A } = (0, l.useContext)(Ce.A),
          [y, f] = (0, l.useState)(0),
          [v, b] = (0, l.useState)([]),
          [S, k] = (0, l.useState)(null),
          [C, D] = (0, l.useState)(!1),
          [w, I] = (0, l.useState)([]),
          N = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.vendor.list, {
                params: { schoolId: A._id },
              });
              console.log(e.result, "pppp"),
                b(
                  e.result.map((e) => {
                    var t;
                    return {
                      ...e,
                      name:
                        null === e ||
                        void 0 === e ||
                        null === (t = e.basicInfo) ||
                        void 0 === t
                          ? void 0
                          : t.name,
                    };
                  })
                );
            } catch (e) {
              console.log(e);
            }
          },
          _ = (0, et.Wx)({
            initialValues: {
              category:
                (null === S ||
                void 0 === S ||
                null === (e = S.basicInfo) ||
                void 0 === e
                  ? void 0
                  : e.category) || "",
              name:
                (null === S ||
                void 0 === S ||
                null === (t = S.basicInfo) ||
                void 0 === t
                  ? void 0
                  : t.name) || "",
              phone:
                (null === S ||
                void 0 === S ||
                null === (a = S.basicInfo) ||
                void 0 === a
                  ? void 0
                  : a.phone) || "",
              email:
                (null === S ||
                void 0 === S ||
                null === (n = S.basicInfo) ||
                void 0 === n
                  ? void 0
                  : n.email) || "",
              gstNumber:
                (null === S ||
                void 0 === S ||
                null === (i = S.basicInfo) ||
                void 0 === i
                  ? void 0
                  : i.gstNumber) || "",
              dealerName:
                (null === S ||
                void 0 === S ||
                null === (s = S.basicInfo) ||
                void 0 === s
                  ? void 0
                  : s.dealerName) || "",
              dealerPhoneNumber:
                (null === S ||
                void 0 === S ||
                null === (o = S.basicInfo) ||
                void 0 === o
                  ? void 0
                  : o.dealerPhoneNumber) || "",
              website:
                (null === S ||
                void 0 === S ||
                null === (r = S.basicInfo) ||
                void 0 === r
                  ? void 0
                  : r.website) || "",
              address:
                (null === S ||
                void 0 === S ||
                null === (d = S.addressInfo) ||
                void 0 === d
                  ? void 0
                  : d.address) || "",
              state:
                (null === S ||
                void 0 === S ||
                null === (c = S.addressInfo) ||
                void 0 === c
                  ? void 0
                  : c.state) || "",
              city:
                (null === S ||
                void 0 === S ||
                null === (m = S.addressInfo) ||
                void 0 === m
                  ? void 0
                  : m.city) || "",
              zipCode:
                (null === S ||
                void 0 === S ||
                null === (x = S.addressInfo) ||
                void 0 === x
                  ? void 0
                  : x.zipCode) || "",
              bankName:
                (null === S ||
                void 0 === S ||
                null === (h = S.bankInfo) ||
                void 0 === h
                  ? void 0
                  : h.bankName) || "",
              accountNumber:
                (null === S ||
                void 0 === S ||
                null === (p = S.bankInfo) ||
                void 0 === p
                  ? void 0
                  : p.accountNumber) || "",
              ifscCode:
                (null === S ||
                void 0 === S ||
                null === (j = S.bankInfo) ||
                void 0 === j
                  ? void 0
                  : j.ifscCode) || "",
              branchName:
                (null === S ||
                void 0 === S ||
                null === (g = S.bankInfo) ||
                void 0 === g
                  ? void 0
                  : g.branchName) || "",
            },
            onSubmit: async (e) => {
              console.log(e, "values");
              try {
                const t = {
                  basicInfo: {
                    name: e.name,
                    category: e.category,
                    phone: e.phone,
                    email: e.email,
                    gstNumber: e.gstNumber,
                    dealerName: e.dealerName,
                    dealerPhoneNumber: e.dealerPhoneNumber,
                    website: e.website,
                  },
                  addressInfo: {
                    address: e.address,
                    state: e.state,
                    city: e.city,
                    zipCode: e.zipCode,
                  },
                  bankInfo: {
                    bankName: e.bankName,
                    accountNumber: e.accountNumber,
                    ifscCode: e.ifscCode,
                    branchName: e.branchName,
                  },
                  schoolId: A._id,
                };
                D(!0);
                const a = new FormData();
                if (
                  (a.append("body", JSON.stringify(t)),
                  w.forEach((e) => a.append("photo", e)),
                  S)
                ) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.vendor.update + "/" + S._id,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.vendor.create, a, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                }
                T();
              } catch (t) {
                console.log(t);
              }
              D(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          N();
        }, []);
        const T = () => {
          f(0), N(), k(null), I([]);
        };
        (0, l.useEffect)(() => {
          0 === y && (_.resetForm(), k(null));
        }, [y]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Vendor" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                f(t);
              },
              value: y,
              labels: [
                "Vendor List",
                S && 0 != y ? "Edit Vendor" : "Add Vendor",
              ],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: y,
              children: [
                (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  sx: { my: 2 },
                  children: "PDF",
                }),
                (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  sx: { ml: 2, my: 2 },
                  children: "Excel",
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["edit"],
                  bodyDataModal: "Vendor",
                  bodyData: v,
                  tableKeys: Qs,
                  onEditClick: (e) => {
                    k(e), f(1);
                  },
                }),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: y,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  component: "form",
                  onSubmit: _.handleSubmit,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      children: (0, re.jsxs)(Xs, {
                        children: [
                          (0, re.jsx)($s, {
                            children: (0, re.jsx)("img", {
                              src:
                                w.length > 0
                                  ? URL.createObjectURL(w[0])
                                  : null === S || void 0 === S
                                  ? void 0
                                  : S.photo,
                              style: {
                                width: "100px",
                                height: "100px",
                                objectFit: "contain",
                              },
                              alt: "logo",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            container: !0,
                            spacing: 2,
                            display: "flex",
                            justifyContent: "center",
                            children: (0, re.jsxs)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: [
                                " ",
                                (0, re.jsx)(Ol.A, {
                                  name: "photo",
                                  multi: !1,
                                  label: "Select Logo",
                                  onChange: (e) =>
                                    ((e, t) => {
                                      const { files: a } = e.target;
                                      let l = [];
                                      if (a.length > 0) {
                                        for (let e = 0; e < a.length; e++) {
                                          const t = a[e];
                                          l.push(t);
                                        }
                                        "photo" === t && I(l);
                                      } else console.log("No files selected");
                                    })(e, "photo"),
                                  previousFile:
                                    null === S || void 0 === S
                                      ? void 0
                                      : S.photo,
                                  customOnChange: !0,
                                  selectedFiles: w,
                                  onRemove: (e) =>
                                    ((e, t) => {
                                      I(w.filter((t) => t.name != e));
                                    })(e),
                                  accept: "image/jpeg, image/png",
                                }),
                              ],
                            }),
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", mt: 1, fontWeight: "bold" },
                        children: "Basic Information",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "category",
                        formik: _,
                        label: "Category",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "name",
                        formik: _,
                        label: "Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "phone",
                        formik: _,
                        label: "Phone no.",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "email",
                        formik: _,
                        label: "Email",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "gstNumber",
                        formik: _,
                        label: "GST Number",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "dealerName",
                        formik: _,
                        label: "Dealer Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "dealerPhoneNumber",
                        formik: _,
                        label: "Dealer Phone No.",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "website",
                        formik: _,
                        label: "Vendor Website",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", mt: 1, fontWeight: "bold" },
                        children: "Address Information",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "address",
                        formik: _,
                        label: "Address",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "city",
                        formik: _,
                        label: "City",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "state",
                        formik: _,
                        label: "State",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "zipCode",
                        formik: _,
                        label: "Zip Code",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", mt: 1, fontWeight: "bold" },
                        children: "Bank Information",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "bankName",
                        formik: _,
                        label: "Bank Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "accountNumber",
                        formik: _,
                        label: "Account No",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "ifscCode",
                        formik: _,
                        label: "IFSC Code",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "branchName",
                        formik: _,
                        label: "Branch Name",
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center", marginTop: "10px" },
                      item: !0,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          color: "error",
                          variant: "contained",
                          onClick: T,
                          children: "Cancel",
                        }),
                        (0, re.jsx)(ht.A, {
                          type: "submit",
                          size: "small",
                          variant: "contained",
                          loading: C,
                          sx: { ml: 2 },
                          children: "Submit",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
            (0, re.jsx)(Ct.A, {
              index: 2,
              value: y,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: [
                        (0, re.jsx)(u.A, {
                          id: "modal-modal-title",
                          variant: "h6",
                          component: "h2",
                          textAlign: "start",
                          sx: { fontSize: "15px", mt: 2, fontWeight: "bold" },
                          children: "Logo:",
                        }),
                        (0, re.jsx)(At.A, {
                          required: !0,
                          name: "logo",
                          formik: _,
                          label: "logo",
                          type: "file",
                        }),
                      ],
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", mt: 1, fontWeight: "bold" },
                        children: "Basic Information",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "category",
                        formik: _,
                        label: "Category",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "name",
                        formik: _,
                        label: "Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "contactNumber",
                        formik: _,
                        label: "Phone no.",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "email",
                        formik: _,
                        label: "Email",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "gst",
                        formik: _,
                        label: "GST Number",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "dealerName",
                        formik: _,
                        label: "Dealer Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "dealerContact",
                        formik: _,
                        label: "Dealer Phone No.",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "vendorWebsite",
                        formik: _,
                        label: "Vendor Website",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", mt: 1, fontWeight: "bold" },
                        children: "Address Information",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "address",
                        formik: _,
                        label: "Address",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "city",
                        formik: _,
                        label: "City",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "state",
                        formik: _,
                        label: "State",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "zipCode",
                        formik: _,
                        label: "Zip Code",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", mt: 1, fontWeight: "bold" },
                        children: "Bank Information",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "bankName",
                        formik: _,
                        label: "Bank Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "accountNo",
                        formik: _,
                        label: "Account No",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "ifsc",
                        formik: _,
                        label: "IFSC Code",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "branchName",
                        formik: _,
                        label: "Branch Name",
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center", marginTop: "10px" },
                      item: !0,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          color: "error",
                          variant: "contained",
                          children: "Cancel",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          sx: { ml: 2 },
                          children: "Update",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const to = [
          { name: "Item Id", key: "id" },
          { name: "Item Name", key: "name" },
          { name: "Total Price", key: "totalPrice" },
          { name: "Type", key: "type" },
          { name: "Date", key: "date" },
          { name: "Status", key: "status" },
        ],
        ao = [
          { label: "Cash", value: "Cash" },
          { label: "Upi", value: "Upi" },
          { label: "Netbanking", value: "Netbanking" },
          { label: "Cheque", value: "Cheque" },
          { label: "Card", value: "Card" },
          { label: "Others", value: "Others" },
          { label: "Null", value: "Null" },
        ],
        lo = [
          { label: "In", value: "In" },
          { label: "Out", value: "Out" },
        ],
        no = [
          { label: "Inhouse", value: "Inhouse" },
          { label: "Damage", value: "Damage" },
          { label: "Purchase", value: "Purchase" },
          { label: "Sell", value: "Sell" },
          { label: "Return", value: "Return" },
          { label: "InventoryUpdate", value: "InventoryUpdate" },
        ],
        io = [
          { label: "Vendor", value: "Vendor" },
          { label: "School", value: "School" },
        ],
        so = [
          { label: "School", value: "School" },
          { label: "Vendor", value: "Vendor" },
          { label: "Student", value: "Student" },
          { label: "Employee", value: "Employee" },
        ];
      function oo() {
        const { settings: e, selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)(0),
          [o, r] = (0, l.useState)(null),
          [d, c] = (0, l.useState)(!1),
          [m, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)([]),
          [A, y] = (0, l.useState)([]),
          [f, v] = (0, l.useState)([]),
          [b, S] = (0, l.useState)([]),
          [k, C] = (0, l.useState)([]),
          [D, w] = (0, l.useState)([]),
          [I, N] = (0, l.useState)(
            e.map((e) => ({ label: e.name, value: e._id }))
          ),
          _ = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.vendor.list, {
                params: { schoolId: t._id },
              });
              console.log(e.result, "firm");
            } catch (e) {
              console.log(e);
            }
          },
          T = (0, et.Wx)({
            initialValues: {
              item: (null === o || void 0 === o ? void 0 : o.item) || "",
              pricePerItem:
                (null === o || void 0 === o ? void 0 : o.pricePerItem) || "",
              quantity:
                (null === o || void 0 === o ? void 0 : o.quantity) || "",
              trasactionMode:
                (null === o || void 0 === o ? void 0 : o.trasactionMode) || "",
              type: (null === o || void 0 === o ? void 0 : o.type) || "",
              purpose: (null === o || void 0 === o ? void 0 : o.purpose) || "",
              fromType:
                (null === o || void 0 === o ? void 0 : o.fromType) || "",
              status: (null === o || void 0 === o ? void 0 : o.status) || "",
              toType: (null === o || void 0 === o ? void 0 : o.toType) || "",
              vendor: (null === o || void 0 === o ? void 0 : o.vendor) || "",
              section: (null === o || void 0 === o ? void 0 : o.section) || "",
              class: (null === o || void 0 === o ? void 0 : o.class) || "",
              employee:
                (null === o || void 0 === o ? void 0 : o.employee) || "",
              role: (null === o || void 0 === o ? void 0 : o.role) || "",
              studentName:
                (null === o || void 0 === o ? void 0 : o.studentName) || "",
              school: (null === o || void 0 === o ? void 0 : o.school) || "",
              note: (null === o || void 0 === o ? void 0 : o.note) || "",
            },
            onSubmit: async (e) => {
              console.log(e, "values");
              try {
                const a = {
                  ...e,
                  from: "vendor" === e.fromType ? e.vendor : e.school,
                  schoolId: t._id,
                };
                c(!0);
                const l = new FormData();
                if (
                  (l.append("body", JSON.stringify(a)),
                  b.forEach((e) => l.append("invoice", e)),
                  o)
                ) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.vendor.update + "/" + o._id,
                    l,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.vendor.create, l, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                }
                M();
              } catch (a) {
                console.log(a);
              }
              c(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          _(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.item.list);
                x(e.result.map((e) => ({ label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.vendor.list, {
                  params: { schoolId: t._id },
                });
                C(
                  e.result.map((e) => {
                    var t, a;
                    return {
                      label:
                        null === (t = e.addedBy) ||
                        void 0 === t ||
                        null === (a = t.basicInfo) ||
                        void 0 === a
                          ? void 0
                          : a.name,
                      value: e._id,
                    };
                  })
                ),
                  T.setFieldValue("vendor", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: t._id },
                });
                y(e.result.map((e) => ({ label: e.name, value: e._id }))),
                  T.setFieldValue("class", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.role.list);
                w(e.result.map((e) => ({ label: e.name, value: e._id }))),
                  T.setFieldValue("role", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })();
        }, [t._id]),
          (0, l.useEffect)(() => {
            T.values.class &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: t._id,
                      search: { class: T.values.class },
                    },
                  });
                  g(e.result.map((e) => ({ label: e.name, value: e._id }))),
                    T.setFieldValue("section", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [T.values.class]),
          (0, l.useEffect)(() => {
            T.values.section &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: t._id,
                      search: { "academicInfo.section": T.values.section },
                    },
                  });
                  v(
                    e.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    T.setFieldValue("studentName", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [T.values.section, t._id]),
          (0, l.useEffect)(() => {
            T.values.role &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.employee.list, {
                    params: {
                      schoolId: t._id,
                      search: { role: T.values.role },
                    },
                  });
                  p(
                    e.result.map((e) => {
                      var t;
                      return {
                        label:
                          null === e ||
                          void 0 === e ||
                          null === (t = e.basicInfo) ||
                          void 0 === t
                            ? void 0
                            : t.name,
                        value: e._id,
                      };
                    })
                  ),
                    T.setFieldValue("employee", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [T.values.role]);
        const M = () => {
          s(0), _(), r(null);
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Transaction" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                s(t);
              },
              value: i,
              labels: [
                "Transaction List",
                "Make Transaction",
                "Edit Transaction",
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 0,
              value: i,
              children: (0, re.jsx)(jt.A, {
                actions: ["edit"],
                bodyDataModal: "Transaction",
                bodyData: a,
                tableKeys: to,
              }),
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: i,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  component: "form",
                  onSubmit: T.handleSubmit,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", mb: 1, fontWeight: "bold" },
                        children: "Item Details",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "item",
                        formik: T,
                        label: "Item",
                        options: m,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "pricePerItem",
                        formik: T,
                        label: "Price Per Item",
                        type: "number",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "quantity",
                        formik: T,
                        label: "Quantity",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", fontWeight: "bold" },
                        children: "Transaction Details",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "trasactionMode",
                        formik: T,
                        label: "Mode of Payment",
                        options: ao,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "type",
                        formik: T,
                        label: "Type",
                        options: lo,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "purpose",
                        formik: T,
                        label: "Purpose",
                        options: no,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", fontWeight: "bold" },
                        children: "Transaction Between",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "fromType",
                        formik: T,
                        label: "From Type",
                        options: io,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "toType",
                        formik: T,
                        label: "To Type",
                        options: so,
                      }),
                    }),
                    ("Vendor" === T.values.fromType ||
                      "Vendor" === T.values.toType) &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "vendor",
                          formik: T,
                          label: "Vendors",
                          options: k,
                        }),
                      }),
                    "Student" === T.values.toType &&
                      (0, re.jsxs)(re.Fragment, {
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 4,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "class",
                              formik: T,
                              label: "Select Class",
                              options: A,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 4,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "section",
                              formik: T,
                              label: "Select Section",
                              options: j,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 4,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "studentName",
                              formik: T,
                              label: "Select Student Name",
                              options: f,
                            }),
                          }),
                        ],
                      }),
                    ("School" === T.values.fromType ||
                      "School" === T.values.toType) &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "school",
                          formik: T,
                          label: "Select School",
                          options: I,
                        }),
                      }),
                    "Employee" === T.values.toType &&
                      (0, re.jsxs)(re.Fragment, {
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 4,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "role",
                              formik: T,
                              label: "Select Role",
                              options: D,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 4,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "employee",
                              formik: T,
                              label: "Select Employees",
                              options: h,
                            }),
                          }),
                        ],
                      }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "note",
                        formik: T,
                        label: "Note",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Ol.A, {
                        name: "invoice",
                        label: "Select Invoice",
                        onChange: (e) =>
                          ((e, t) => {
                            const { files: a } = e.target;
                            let l = [];
                            if (a.length > 0) {
                              for (let e = 0; e < a.length; e++) {
                                const t = a[e];
                                l.push(t);
                              }
                              "invoice" === t && S(l);
                            } else console.log("No files selected");
                          })(e, "invoice"),
                        customOnChange: !0,
                        selectedFiles: b,
                        onRemove: (e) =>
                          ((e, t) => {
                            S(b.filter((t) => t.name != e));
                          })(e),
                        accept: "image/*,.pdf",
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      style: { alignSelf: "center", marginTop: "10px" },
                      item: !0,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          color: "error",
                          variant: "contained",
                          onClick: M,
                          children: "Cancel",
                        }),
                        (0, re.jsx)(ht.A, {
                          type: "submit",
                          size: "small",
                          variant: "contained",
                          loading: d,
                          sx: { ml: 2 },
                          children: "Submit",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
            (0, re.jsx)(Ct.A, {
              index: 2,
              value: i,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", mb: 1, fontWeight: "bold" },
                        children: "Item Details",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "item",
                        formik: T,
                        label: "Item",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "price",
                        formik: T,
                        label: "Price per Item",
                        type: "number",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "quantity",
                        formik: T,
                        label: "Quantity",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", fontWeight: "bold" },
                        children: "Transaction Details",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "mode",
                        formik: T,
                        label: "Mode of Payment",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "type",
                        formik: T,
                        label: "Type",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "purpose",
                        formik: T,
                        label: "Purpose",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(u.A, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        textAlign: "start",
                        sx: { fontSize: "15px", fontWeight: "bold" },
                        children: "Transaction Between",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "fromType",
                        formik: T,
                        label: "From Type",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "status",
                        formik: T,
                        label: "Transaction Status",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "vender",
                        formik: T,
                        label: "Venders",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: T,
                        label: "section",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "studentName",
                        formik: T,
                        label: "Student Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 4,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "school",
                        formik: T,
                        label: "School",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "note",
                        formik: T,
                        label: "Note",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)($e.A, {
                        size: "small",
                        variant: "outlined",
                        sx: { my: 2 },
                        children: "Upload Invoice",
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      style: { alignSelf: "center", marginTop: "10px" },
                      item: !0,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          color: "error",
                          variant: "contained",
                          onClick: M,
                          children: "Cancel",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          sx: { ml: 2 },
                          children: "Update",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const ro = [
          { name: "Name", key: "name" },
          { name: "Description", key: "description" },
          { name: "Total Price", key: "totalPrice" },
          { name: "Total Stock", key: "totalStock" },
        ],
        co = (0, n.Ay)(oa.A)((e) => {
          let { theme: t } = e;
          return {
            "&:nth-of-type(odd)": {
              backgroundColor: t.palette.action.hover,
              width: "100%",
            },
          };
        }),
        mo = (0, n.Ay)(ra.A)((e) => {
          let { theme: t } = e;
          return {
            border: "1px solid gray",
            ["&.".concat(va.A.head)]: {
              backgroundColor: t.palette.common.black,
              color: t.palette.common.white,
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        });
      function uo() {
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(na.A, {
            sx: { display: "grid", justifyContent: "center", my: 2 },
            children: [
              (0, re.jsx)(u.A, {
                id: "modal-modal-title",
                variant: "h6",
                component: "div",
                textAlign: "start",
                sx: { fontSize: "15px", mt: 1, fontWeight: "bold" },
                children: "Overview",
              }),
              (0, re.jsx)(ia.A, {
                "aria-label": "customized table",
                sx: {
                  display: {
                    xs: "none",
                    sm: "none",
                    md: "inline-block",
                    lg: "inline-block",
                  },
                },
                children: (0, re.jsxs)(ca.A, {
                  children: [
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold", width: 300 },
                          children: "Total Purchase",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold", width: 300 },
                          children: "Total Issue",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold", width: 300 },
                          children: "Total Return",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold", width: 300 },
                          children: "Total Inhouse",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold", width: 300 },
                          children: "Total Damage",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold", width: 300 },
                          children: "Total Sell",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold", width: 300 },
                          children: "Total Inventory Quantity",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [0, " Qty"],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold", width: 300 },
                          children: "Total Inventory Amount",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
              }),
              (0, re.jsx)(ia.A, {
                "aria-label": "customized table",
                sx: {
                  display: {
                    xs: "none",
                    sm: "inline-block",
                    md: "none",
                    lg: "none",
                  },
                },
                children: (0, re.jsxs)(ca.A, {
                  children: [
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Purchase",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Issue",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Return",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Inhouse",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Damage",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Sell",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Inventory Quantity",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [0, "Qty"],
                        }),
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Inventory Amount",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
              }),
              (0, re.jsx)(ia.A, {
                "aria-label": "customized table",
                sx: {
                  display: {
                    xs: "inline-block",
                    sm: "none",
                    md: "none",
                    lg: "none",
                  },
                },
                children: (0, re.jsxs)(ca.A, {
                  children: [
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Purchase",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Issue",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Return",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Inhouse",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Damage",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Sell",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Inventory Quantity",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [0, "  ", "Qty"],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(co, {
                      children: [
                        (0, re.jsx)(mo, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          children: "Total Inventory Amount",
                        }),
                        (0, re.jsxs)(mo, {
                          align: "left",
                          width: 100,
                          children: [
                            (0, re.jsx)(R.A, { fontSize: "small" }),
                            0,
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            ],
          }),
        });
      }
      function xo() {
        const [e, t] = (0, l.useState)([]),
          a = (0, et.Wx)({
            initialValues: {
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: console.log("nnnn"),
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Item Stock" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: a,
                      label: "From Date",
                      name: "fromDate",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: a,
                      name: "toDate",
                      label: "To Date",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center" },
                    item: !0,
                    children: (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      children: "Find",
                    }),
                  }),
                  (0, re.jsxs)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    style: { alignSelf: "center" },
                    item: !0,
                    children: [
                      (0, re.jsx)($e.A, {
                        size: "small",
                        color: "secondary",
                        variant: "contained",
                        sx: { mr: 2, mt: 1 },
                        children: "Sell",
                      }),
                      (0, re.jsx)($e.A, {
                        size: "small",
                        color: "secondary",
                        variant: "contained",
                        sx: { mr: 2, mt: 1 },
                        children: "Issue",
                      }),
                      (0, re.jsx)($e.A, {
                        size: "small",
                        color: "secondary",
                        variant: "contained",
                        sx: { mr: 2, mt: 1 },
                        children: "Add Item",
                      }),
                      (0, re.jsx)($e.A, {
                        size: "small",
                        color: "secondary",
                        variant: "contained",
                        sx: { mr: 2, mt: 1 },
                        children: "Add Vendor",
                      }),
                    ],
                  }),
                ],
              }),
            }),
            (0, re.jsxs)(xe.Ay, {
              xs: 12,
              md: 12,
              lg: 12,
              style: { alignSelf: "center" },
              item: !0,
              children: [
                (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  sx: { mr: 2, mt: 1 },
                  children: "Excel",
                }),
                (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  sx: { mr: 2, mt: 1 },
                  children: "PDF",
                }),
              ],
            }),
            (0, re.jsx)(uo, {}),
            (0, re.jsx)(u.A, {
              id: "modal-modal-title",
              variant: "h6",
              component: "div",
              textAlign: "start",
              sx: { fontSize: "15px", mt: 1, fontWeight: "bold" },
              children: "List of Stocks",
            }),
            (0, re.jsx)(jt.A, {
              actions: [],
              bodyDataModal: "Item stock",
              bodyData: e,
              tableKeys: ro,
            }),
          ],
        });
      }
      const ho = [
          { name: "Item Id", key: "itemId" },
          { name: "Item Name", key: "itemName" },
          { name: "Issuer Name", key: "issueName" },
          { name: "Quantity", key: "quantity" },
          { name: "Total Price", key: "totalPrice" },
        ],
        po = [
          { label: "Returned", value: "Returned" },
          { label: "Pending", value: "Pending" },
          { label: "Issued", value: "Issued" },
          { label: "Deleted", value: "Deleted" },
        ];
      function jo() {
        const { settings: e, selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)(0),
          [o, r] = (0, l.useState)(null),
          [d, c] = (0, l.useState)(!1),
          [m, u] = (0, l.useState)([]),
          [x, h] = (0, l.useState)(
            e.map((e) => ({ label: e.name, value: e._id }))
          ),
          p = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.item.list);
              u(e.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (e) {
              console.log(e);
            }
          },
          j = (0, et.Wx)({
            initialValues: {
              item: "",
              quantity: "",
              issueStatus: "",
              fromType: "",
              school: "",
              toType: "",
              employeeName: "",
              note: "",
            },
            onSubmit: console.log("nnnn"),
          });
        (0, l.useEffect)(() => {
          p();
        }, [t._id]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Issue Details" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                s(t);
              },
              value: i,
              labels: ["List of Issue", "Issue"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: i,
              children: [
                (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  sx: { my: 2 },
                  children: "PDF",
                }),
                (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  sx: { ml: 2, my: 2 },
                  children: "Excel",
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["edit"],
                  bodyDataModal: "Issue",
                  bodyData: a,
                  tableKeys: ho,
                }),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: i,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "item",
                        formik: j,
                        label: "Select Item",
                        options: m,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "quantity",
                        formik: j,
                        label: "Quantity",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "status",
                        formik: j,
                        label: "Select Issue Status",
                        options: po,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "fromType",
                        formik: j,
                        label: "Select From Type",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "school",
                        formik: j,
                        label: "Select School",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "toType",
                        formik: j,
                        label: "Select To Type",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "employeeName",
                        formik: j,
                        label: "Select Employee Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "note",
                        formik: j,
                        label: "Note",
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center", marginTop: "10px" },
                      item: !0,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          color: "error",
                          variant: "contained",
                          onClick: () => {
                            s(0), p(), r(null);
                          },
                          children: "Cancel",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          sx: { ml: 2 },
                          children: "Issue",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const go = [
        { name: "Item Id", key: "itemId" },
        { name: "Item Name", key: "itemName" },
        { name: "Sellar Name", key: "issueName" },
        { name: "Total Quantity", key: "quantity" },
      ];
      function Ao() {
        const [e, t] = (0, l.useState)([]),
          [a, n] = (0, l.useState)(0),
          i = (0, et.Wx)({
            initialValues: {
              item: "",
              quantity: "",
              SellStatus: "",
              fromType: "",
              school: "",
              toType: "",
              employeeName: "",
              note: "",
            },
            onSubmit: console.log("nnnn"),
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Sell Details" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                n(t);
              },
              value: a,
              labels: ["Sold List", "Sell"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: a,
              children: [
                (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  sx: { my: 2 },
                  children: "PDF",
                }),
                (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  sx: { ml: 2, my: 2 },
                  children: "Excel",
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["edit"],
                  bodyDataModal: "Sell",
                  bodyData: e,
                  tableKeys: go,
                }),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: a,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "item",
                        formik: i,
                        label: "Select Item",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "quantity",
                        formik: i,
                        label: "Select Quantity",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "sellStatus",
                        formik: i,
                        label: "Select Sell Status",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "fromType",
                        formik: i,
                        label: "Select From Type",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "school",
                        formik: i,
                        label: "Select School",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "toType",
                        formik: i,
                        label: "Select To Type",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "employeeName",
                        formik: i,
                        label: "Select Employee Name",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "note",
                        formik: i,
                        label: "Note",
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center", marginTop: "10px" },
                      item: !0,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          color: "error",
                          variant: "contained",
                          children: "Cancel",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          sx: { ml: 2 },
                          children: "Sell",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const yo = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            textAlign: "center",
            fontSize: "30px",
            fontWeight: "bold",
            marginTop: "40px",
            textDecoration: "underline",
          };
        }),
        fo = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            fontSize: "25px",
            padding: "0 5px",
            display: "inline",
            fontWeight: "bold",
            textDecoration: "underline",
            fontFamily: "Roboto ,sans-serif",
          };
        }),
        vo = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            width: "100%",
            marginTop: "10px",
            border: "1px solid black",
            padding: "20px",
          };
        }),
        bo = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "flex-end",
            gap: "10px",
            marginTop: "20px",
          };
        }),
        So = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            padding: "20px",
            justifyContent: "space-between",
            alignItems: "center",
          };
        }),
        ko = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return { padding: "20px", display: "flex", textIndent: "50px" };
        });
      function Co() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          [m, x] = (0, l.useState)(!1),
          [h, p] = (0, l.useState)(!1),
          [j, g] = (0, l.useState)(!1),
          [A, y] = (0, l.useState)({}),
          [f, v] = (0, l.useState)(Be()(Date.now())),
          [b, S] = (0, l.useState)(Be()(Date.now())),
          [k, C] = (0, l.useState)([]),
          D = async (e) => {
            console.log(e, "bfyy"), p(!0);
            try {
              var t, a, l, n, i, s, o, r, m, u, x, h, j, g, A, y, f, v, b, S;
              c({
                ...d,
                fatherName:
                  null === e ||
                  void 0 === e ||
                  null === (t = e.student) ||
                  void 0 === t ||
                  null === (a = t.fatherInfo) ||
                  void 0 === a
                    ? void 0
                    : a.name,
                academicYearFrom:
                  null === e ||
                  void 0 === e ||
                  null === (l = e.student) ||
                  void 0 === l ||
                  null === (n = l.academicYear) ||
                  void 0 === n
                    ? void 0
                    : n.from,
                academicYearTo:
                  null === e ||
                  void 0 === e ||
                  null === (i = e.student) ||
                  void 0 === i ||
                  null === (s = i.academicYear) ||
                  void 0 === s
                    ? void 0
                    : s.to,
                academicId:
                  null === e || void 0 === e ? void 0 : e.academicYear,
                studentName:
                  null === e ||
                  void 0 === e ||
                  null === (o = e.student) ||
                  void 0 === o
                    ? void 0
                    : o.basicInfo.name,
                studentId:
                  null === e ||
                  void 0 === e ||
                  null === (r = e.student) ||
                  void 0 === r
                    ? void 0
                    : r._id,
                currentClass:
                  null === e ||
                  void 0 === e ||
                  null === (m = e.student) ||
                  void 0 === m
                    ? void 0
                    : m.academicInfo.class.name,
                dob:
                  null === e ||
                  void 0 === e ||
                  null === (u = e.student) ||
                  void 0 === u
                    ? void 0
                    : u.basicInfo.dob,
                grNo:
                  null === e ||
                  void 0 === e ||
                  null === (x = e.student) ||
                  void 0 === x
                    ? void 0
                    : x.basicInfo.grNo,
                studentPhoto:
                  null === e ||
                  void 0 === e ||
                  null === (h = e.student) ||
                  void 0 === h
                    ? void 0
                    : h.photo,
                schoolName:
                  null === e ||
                  void 0 === e ||
                  null === (j = e.student) ||
                  void 0 === j ||
                  null === (g = j.school) ||
                  void 0 === g
                    ? void 0
                    : g.name,
                schoolAddress:
                  null === e ||
                  void 0 === e ||
                  null === (A = e.student) ||
                  void 0 === A ||
                  null === (y = A.school) ||
                  void 0 === y
                    ? void 0
                    : y.address,
                schoolLogo:
                  null === e ||
                  void 0 === e ||
                  null === (f = e.student) ||
                  void 0 === f ||
                  null === (v = f.school) ||
                  void 0 === v
                    ? void 0
                    : v.logo,
                category:
                  null === e ||
                  void 0 === e ||
                  null === (b = e.student) ||
                  void 0 === b
                    ? void 0
                    : b.basicInfo.category,
                address:
                  null === e ||
                  void 0 === e ||
                  null === (S = e.student) ||
                  void 0 === S
                    ? void 0
                    : S.contactInfo.presentAddress,
              });
            } catch (k) {
              console.log(k);
            }
            p(!1);
          },
          w = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              student: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: D,
          }),
          I = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              student: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: D,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              w.setFieldValue("academicYear", e.result[0]._id),
                a(
                  e.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                );
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                  params: { schoolId: e._id },
                });
                i(
                  t.result.map((e) => ({
                    ...e,
                    label: e.basicInfo.name,
                    value: e,
                    id: e._id,
                  }))
                );
              } catch (t) {
                console.log(t);
              }
            })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                r(t.result.map((e) => ({ label: e.name, value: e._id })));
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e._id]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Study Certificate" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: w,
                      label: "Select Academic Year",
                      options: t,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: w,
                      label: "From Date",
                      name: "fromDate",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: w,
                      label: "To Date",
                      name: "toDate",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "student",
                      formik: w,
                      label: "Select Student",
                      options: n,
                    }),
                  }),
                  (0, re.jsxs)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    display: "flex",
                    justifyContent: "flex-end",
                    gap: 1,
                    item: !0,
                    children: [
                      (0, re.jsx)($e.A, {
                        size: "small",
                        variant: "contained",
                        onClick: () => {
                          x(!0);
                        },
                        children: "Bulk Issue",
                      }),
                      (0, re.jsx)(ht.A, {
                        size: "small",
                        variant: "contained",
                        type: "submit",
                        onClick: w.handleSubmit,
                        loading: h,
                        children: "Issue",
                      }),
                    ],
                  }),
                ],
              }),
            }),
            "" != w.values.student &&
              (0, re.jsxs)(re.Fragment, {
                children: [
                  (0, re.jsxs)(vo, {
                    children: [
                      (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        display: "flex",
                        justifyContent: "space-between",
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 6,
                            md: 6,
                            lg: 3,
                            textAlign: "start",
                            children: (0, re.jsx)("img", {
                              src: d.schoolLogo || "/world-wide-web.png",
                              alt: "loading...",
                              height: 100,
                              width: 95,
                              style: { objectFit: "contain" },
                            }),
                          }),
                          (0, re.jsxs)(xe.Ay, {
                            item: !0,
                            xs: 6,
                            md: 6,
                            lg: 6,
                            textAlign: "center",
                            mt: 2,
                            children: [
                              (0, re.jsx)(u.A, {
                                textAlign: "center",
                                fontSize: "20px",
                                children:
                                  d.schoolName || "St Pauls High School",
                              }),
                              (0, re.jsx)(u.A, {
                                textAlign: "center",
                                fontSize: "16px",
                                children: d.schoolAddress || "ABC NAGAR",
                              }),
                            ],
                          }),
                          (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 6,
                            md: 6,
                            lg: 3,
                            textAlign: "end",
                            children: (0, re.jsx)("img", {
                              src: d.studentPhoto || "/studingimg.jpg",
                              alt: "photo",
                              height: 120,
                              width: 100,
                              style: { objectFit: "contain" },
                            }),
                          }),
                        ],
                      }),
                      (0, re.jsx)(yo, { children: "STUDY CERTIFICATE" }),
                      (0, re.jsx)(ko, {
                        children: (0, re.jsxs)(u.A, {
                          component: "span",
                          sx: { fontSize: "25px", fontFamily: "sans-serif" },
                          children: [
                            "This is to certify that Sri./Kum.",
                            (0, re.jsx)(fo, {
                              component: "span",
                              children: d.fatherName || "NA",
                            }),
                            "son/daughter of Mr.",
                            (0, re.jsx)(fo, {
                              component: "span",
                              children: d.studentName || "NA",
                            }),
                            "studying in",
                            (0, re.jsx)(fo, {
                              component: "span",
                              children: d.currentClass || "NA",
                            }),
                            "in our school for the academic year",
                            (0, re.jsx)(fo, {
                              component: "span",
                              children:
                                ""
                                  .concat(d.academicYearFrom, " - ")
                                  .concat(d.academicYearTo) || "NA",
                            }),
                            ".The residential address is as follows:",
                            (0, re.jsx)(fo, {
                              component: "span",
                              children: d.address || "NA",
                            }),
                            ". According to our school records his/her date of birth is",
                            (0, re.jsx)(fo, {
                              component: "span",
                              children: Be()(d.dob).format("DD-MM-YYYY"),
                            }),
                            ". and category is as per our school record G R No is",
                            " ",
                            (0, re.jsx)(fo, {
                              component: "span",
                              children: d.grNo || "NA",
                            }),
                            ".",
                          ],
                        }),
                      }),
                      (0, re.jsxs)(So, {
                        children: [
                          (0, re.jsxs)(s.A, {
                            children: [
                              (0, re.jsx)(u.A, {
                                gutterBottom: !0,
                                fontSize: "20px",
                                children: Be()().format("DD-MM-YYYY"),
                              }),
                              (0, re.jsxs)(u.A, {
                                component: "span",
                                fontSize: "20px",
                                children: ["Place:", " "],
                              }),
                              (0, re.jsx)(u.A, {
                                component: "span",
                                fontSize: "20px",
                                children: d.schoolAddress,
                              }),
                            ],
                          }),
                          (0, re.jsx)(u.A, {
                            fontSize: "20px",
                            children: "Sign Of Head Master",
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, re.jsxs)(bo, {
                    children: [
                      (0, re.jsx)(ht.A, {
                        variant: "contained",
                        size: "small",
                        type: "submit",
                        loading: j,
                        onClick: async (t) => {
                          g(!0);
                          try {
                            const t = await (0, Se.Jt)(
                                ke.r.certificate.getStudyCertificate,
                                {
                                  responseType: "blob",
                                  params: {
                                    schoolId: e._id,
                                    academicYearId:
                                      null === d || void 0 === d
                                        ? void 0
                                        : d.academicId,
                                    studentId:
                                      null === d || void 0 === d
                                        ? void 0
                                        : d.studentId,
                                  },
                                }
                              ),
                              a = new Blob([t.data], {
                                type: "application/pdf",
                              }),
                              l = document.createElement("a"),
                              n = URL.createObjectURL(a);
                            (l.href = n),
                              l.setAttribute(
                                "download",
                                "studyCertificate.pdf"
                              ),
                              document.body.appendChild(l),
                              l.click(),
                              document.body.removeChild(l),
                              URL.revokeObjectURL(n);
                          } catch (a) {
                            console.log(a);
                          }
                          g(!1);
                        },
                        children: "Download",
                      }),
                      (0, re.jsx)($e.A, {
                        variant: "contained",
                        size: "small",
                        "aria-label": "search",
                        children: "Print",
                      }),
                    ],
                  }),
                ],
              }),
            (0, re.jsx)(ct.A, {
              open: m,
              onClose: () => {
                x(!1);
              },
              "aria-labelledby": "modal-modal-title",
              "aria-describedby": "modal-modal-description",
              children: (0, re.jsxs)(xe.Ay, {
                container: !0,
                spacing: 2,
                sx: {
                  display: "flex",
                  justifyContent: "flex-start",
                  alignItems: "flex-end",
                  p: 2,
                },
                children: [
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 12,
                    lg: 12,
                    children: (0, re.jsx)(u.A, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      textAlign: "center",
                      fontSize: "20px",
                      fontWeight: "bold",
                      children: "Bulk Issue",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 6,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academic",
                      formik: I,
                      label: "Select Academic Year",
                      options: t,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 6,
                    children: (0, re.jsx)(qt.A, {
                      formik: w,
                      label: "From Date",
                      name: "fromDate",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 6,
                    children: (0, re.jsx)(qt.A, {
                      formik: w,
                      label: "To Date",
                      name: "toDate",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 6,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: I,
                      label: "Select Student",
                      options: o,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 6,
                    lg: 6,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: I,
                      label: "Select Student",
                      options: k,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    lg: 12,
                    children: (0, re.jsxs)(s.A, {
                      display: "flex",
                      gap: 2,
                      justifyContent: {
                        xs: "center",
                        sm: "center",
                        md: "flex-end",
                        lg: "flex-end",
                      },
                      children: [
                        (0, re.jsx)(ht.A, {
                          sx: {
                            color: "#fff",
                            background: "#1b3779",
                            ":hover": { background: "#1b3779" },
                          },
                          disabled: j,
                          children: "Download",
                        }),
                        (0, re.jsx)(ht.A, {
                          type: "button",
                          sx: {
                            color: "#fff",
                            background: "#1b3779",
                            ":hover": { background: "#1b3779" },
                          },
                          "aria-label": "search",
                          children: "Print",
                        }),
                      ],
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Do = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            fontSize: "25px",
            fontWeight: "bold",
            [t.breakpoints.down("md")]: { fontSize: "25px" },
            [t.breakpoints.down("sm")]: { fontSize: "21px" },
          };
        }),
        wo = (0, n.Ay)(xe.Ay)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "space-between",
            [t.breakpoints.down("lg")]: { flexDirection: "row" },
            [t.breakpoints.down("md")]: { flexDirection: "row" },
            [t.breakpoints.down("sm")]: { flexDirection: "column" },
            [t.breakpoints.down("xs")]: { flexDirection: "column" },
          };
        }),
        Io = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            marginTop: "20px",
            padding: "40px",
            [t.breakpoints.down("lg")]: { width: "80%" },
            [t.breakpoints.down("md")]: { width: "100%" },
            [t.breakpoints.down("sm")]: { width: "100%" },
            [t.breakpoints.down("xs")]: { width: "100%" },
          };
        }),
        No = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            fontSize: "25px",
            fontWeight: "bold",
            [t.breakpoints.down("md")]: { fontSize: "20px" },
            [t.breakpoints.down("sm")]: { fontSize: "13px" },
          };
        }),
        _o = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            fontSize: "18px",
            width: "48%",
            [t.breakpoints.down("md")]: { fontSize: "20px", width: "100%" },
            [t.breakpoints.down("sm")]: { fontSize: "14px", width: "100%" },
          };
        }),
        To = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            fontSize: "20px",
            [t.breakpoints.down("md")]: { fontSize: "20px" },
            [t.breakpoints.down("sm")]: { fontSize: "14px" },
          };
        }),
        Mo = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            fontSize: "25px",
            fontWeight: 500,
            [t.breakpoints.down("md")]: { fontSize: "25px" },
            [t.breakpoints.down("sm")]: { fontSize: "18px" },
          };
        });
      function Fo() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          s = (0, et.Wx)({
            initialValues: { academicYear: "", student: "" },
            onSubmit: console.log("nnnn"),
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                s.setFieldValue("academicYear", e.result[0]._id),
                  a(
                    e.result.map((e) => ({
                      ...e,
                      label: "".concat(e.from, "-").concat(e.to),
                      value: e._id,
                    }))
                  );
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: { schoolId: e._id },
                  });
                  i(
                    a.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    s.setFieldValue(
                      "student",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [e._id]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Study Certificate" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "academicYear",
                        formik: s,
                        label: "Select Academic Year",
                        options: t,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "student",
                        formik: s,
                        label: "Select Student",
                        options: n,
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      display: "flex",
                      alignSelf: "center",
                      justifyContent: "flex-end",
                      gap: 1,
                      item: !0,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          children: "Issue",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          children: "Bulk Issue",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          children: "Print",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
              (0, re.jsxs)(xe.Ay, {
                container: !0,
                spacing: 2,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 12,
                    lg: 12,
                    sx: { textAlign: "center" },
                    children: (0, re.jsx)(u.A, {
                      sx: {
                        fontSize: {
                          xs: "25px",
                          sm: "25px",
                          md: "30px",
                          lg: "30px",
                        },
                        fontWeight: "bold",
                      },
                      children: "Kayaka school",
                    }),
                  }),
                  (0, re.jsxs)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 12,
                    lg: 12,
                    style: { textAlign: "center" },
                    children: [
                      (0, re.jsx)(Mo, {
                        children: "ENGLISH MEDIUM PRIMARY AND HIGH SCHOOL",
                      }),
                      (0, re.jsx)(Mo, { children: "Kayaka school" }),
                    ],
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 12,
                    lg: 12,
                    sx: { textAlign: "center" },
                    children: (0, re.jsx)(Do, {
                      children: "TRANSFER CERTIFICATE",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 12,
                    lg: 12,
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    width: "100%",
                    children: (0, re.jsx)(Io, {
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children: "1] Name of the School:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "schoolName",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children: "2] Name of the Pupil in full:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "studentName",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, { children: "3] G. R. No:" }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "grNo",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children: "4] Place of Birth:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "birthPlace",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children:
                                  " 5] Date of Birth(in figures and words):",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "dobWords",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, { children: "6] Sex:" }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "sex",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, { children: "7] Nationality:" }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "nationality",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, { children: "8] Religion:" }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "religion",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, { children: "9] Caste:" }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "caste",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsxs)(_o, {
                                children: [
                                  " ",
                                  "10] Whether the candidate belongs to SC and ST:",
                                ],
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "belongs",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, { children: "11] Aadhar No.:" }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "aadhar",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children: "12] Name of the father:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "fatherName",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children: "13] Name of the mother:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "motherName",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children:
                                  " 14] Date of Admission in the Scchool:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "admissionDate",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children: "15] School Previously Attended:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "prevSchool",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsxs)(_o, {
                                children: [
                                  " ",
                                  "16] Standard in which admission is granted:",
                                ],
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "admissionGrant",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsxs)(_o, {
                                children: [
                                  " ",
                                  "17] Standard in which the pupil was studying at the time of leaving the school(in words):",
                                ],
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "currentClass",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children: "18] Medium of instruction:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "instructions",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsxs)(_o, {
                                children: [
                                  " ",
                                  "19] Whether the pupil has paid all the free due of the school:",
                                ],
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "fees",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children: "20] Promoted to/ Detained in:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "proDet",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsxs)(_o, {
                                children: [
                                  " ",
                                  "21] Whether medically examinated or not ? :",
                                ],
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "medical",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsxs)(_o, {
                                children: [
                                  " ",
                                  "22] Date of pupil's last attendance at the school:",
                                ],
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "lastAttend",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsxs)(_o, {
                                children: [
                                  " ",
                                  "23] Date of which the application for the Transfer Certificate was received:",
                                ],
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "transferRecivied",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsxs)(_o, {
                                children: [
                                  " ",
                                  "24] Date of issue of the Transfer Certificate:",
                                ],
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "dateIssue",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, { children: "25] Attendance:" }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "attendance",
                              }),
                            ],
                          }),
                          (0, re.jsxs)(wo, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            children: [
                              (0, re.jsx)(_o, {
                                children: "26] Character & Conduct:",
                              }),
                              (0, re.jsx)(Mt.A, {
                                fullWidth: !0,
                                id: "standard-basic",
                                variant: "standard",
                                name: "character",
                              }),
                            ],
                          }),
                          (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            textAlign: "center",
                            children: (0, re.jsx)(Do, {
                              children: "CERTIFICATE",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 12,
                            md: 12,
                            lg: 12,
                            sx: { textAlign: "center" },
                            children: (0, re.jsx)(To, {
                              children:
                                "Certified that the entries made in this Transfer Certificate are taken from the entries made as per the general egister maintained in the institution. The entries with the original records persented by the parents",
                            }),
                          }),
                          (0, re.jsxs)(xe.Ay, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            lg: 12,
                            sx: {
                              display: "flex",
                              justifyContent: "space-between",
                            },
                            children: [
                              (0, re.jsx)(No, { children: "Prepared By" }),
                              (0, re.jsx)(No, { children: "Checked By" }),
                              (0, re.jsx)(No, { children: "Head Master" }),
                            ],
                          }),
                        ],
                      }),
                    }),
                  }),
                ],
              }),
            ],
          })
        );
      }
      const zo = [{ name: "Receipt Name", key: "name" }];
      var Eo = a(83560);
      const qo = [
        { name: "Details", key: "detail" },
        { name: "Fee", key: "fee" },
      ];
      var Yo = a(43845),
        Wo = a(58390),
        Ro = a(79344),
        Po = a(89302);
      const Jo = {
          class: "Class",
          classOld: "Class - (Old)",
          classNew: "Class - (New)",
          transport: "Transport - (Transport department)",
          hostel: "Hostel - (Hostel department)",
        },
        Vo = [
          { label: "Monthly", id: 1 },
          { label: "Quaterly", id: 2 },
          { label: "Half-Yearly", id: 3 },
          { label: "Yearly", id: 4 },
          { label: "Others", id: 5 },
        ];
      function Bo(e) {
        var t, a, n;
        let {
          dataToEdit: i,
          selectedReceipt: o = "",
          open: r = !0,
          setOpen: d = () => {},
          getFeeMaps: c = () => {},
        } = e;
        const { selectedSetting: m } = (0, l.useContext)(Ce.A),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)([]),
          [A, y] = (0, l.useState)([]),
          [f, v] = (0, l.useState)([]),
          [b, S] = (0, l.useState)([]),
          [k, C] = (0, l.useState)([]),
          [w, I] = (0, l.useState)([]),
          [N, _] = (0, l.useState)(!1),
          [T, M] = (0, l.useState)([]),
          [F, z] = (0, l.useState)({}),
          [E, q] = (0, l.useState)([]),
          [Y, W] = (0, l.useState)(i || null);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list, {
                params: { schoolId: m._id },
              });
              g(
                e.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, " - ").concat(e.to),
                  value: e._id,
                }))
              );
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: m._id },
                });
                p(e.result.map((e) => ({ ...e, label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.route.list, {
                  params: { schoolId: m._id },
                });
                y(
                  e.result.map((e) => {
                    var t;
                    return {
                      ...e,
                      label: ""
                        .concat(
                          null === (t = e.vehicle) || void 0 === t
                            ? void 0
                            : t.number,
                          " "
                        )
                        .concat(
                          null === e || void 0 === e ? void 0 : e.title,
                          " ("
                        )
                        .concat(
                          null === e || void 0 === e ? void 0 : e.routeStart,
                          " To "
                        )
                        .concat(
                          null === e || void 0 === e ? void 0 : e.routeEnd,
                          ")"
                        ),
                      value: null === e || void 0 === e ? void 0 : e._id,
                    };
                  })
                );
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.hostel.list, {
                  params: { schoolId: m._id },
                });
                S(
                  e.result.map((e) => ({
                    ...e,
                    label: null === e || void 0 === e ? void 0 : e.name,
                    value: null === e || void 0 === e ? void 0 : e._id,
                  }))
                );
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.roomType.list, {
                  params: { schoolId: m._id },
                });
                C(
                  e.result.map((e) => ({
                    ...e,
                    label: null === e || void 0 === e ? void 0 : e.name,
                    value: null === e || void 0 === e ? void 0 : e._id,
                  }))
                );
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.room.list, {
                  params: { schoolId: m._id },
                });
                I(e.result);
              } catch (e) {
                console.log(e);
              }
            })();
        }, []);
        const R = () => {
          z({}), c(), d(!1), M([]), q([]);
        };
        (0, l.useEffect)(() => {
          if (i) {
            const {
              route: e,
              class: t,
              hostel: a,
              pickType: l,
              stop: n,
              fee: s,
              installmentType: o,
              installments: r,
              dependencies: d,
            } = i;
            z({
              route: (null === e || void 0 === e ? void 0 : e._id) || "",
              class: (null === t || void 0 === t ? void 0 : t._id) || "",
              hostel: (null === a || void 0 === a ? void 0 : a._id) || "",
              pickType: l || "",
              stop: (null === n || void 0 === n ? void 0 : n._id) || "",
              installmentsType: o || "",
              fee: s || "",
            }),
              W(i),
              M(d);
          } else z({});
        }, [i]);
        const P = (e) => {
          const { name: t, value: a } = e.target;
          z(
            "fee" == t
              ? (e) => ({ ...e, [t]: parseInt(a) })
              : "others" == t
              ? (e) => ({ ...e, [t]: Math.ceil(a) })
              : (e) => ({ ...e, [t]: a })
          );
        };
        (0, l.useEffect)(() => {
          (() => {
            if (!F.installmentsType || !F.fee) return;
            let e = [];
            if ("Monthly" === F.installmentsType) {
              const t = Math.floor(F.fee / 12),
                a = F.fee - 12 * t;
              (e = Array.from({ length: 12 }).map((e, l) => {
                var n;
                return {
                  id: l + 1,
                  amount: t,
                  missing: a,
                  dueDate: Y
                    ? Be()(
                        null === (n = Y.installments[l]) || void 0 === n
                          ? void 0
                          : n.dueDate
                      )
                    : Be()(),
                };
              })),
                e.length > 0 && (e[0].amount += a);
            } else if ("Quaterly" === F.installmentsType) {
              const t = Math.floor(F.fee / 4),
                a = F.fee - 4 * t;
              (e = Array.from({ length: 4 }).map((e, a) => {
                var l;
                return {
                  id: a + 1,
                  amount: t,
                  dueDate: Y
                    ? Be()(
                        null === (l = Y.installments[a]) || void 0 === l
                          ? void 0
                          : l.dueDate
                      )
                    : Be()(),
                };
              })),
                e.length > 0 && (e[0].amount += a);
            } else if ("Half-Yearly" === F.installmentsType) {
              const t = Math.floor(F.fee / 2),
                a = F.fee - 2 * t;
              (e = Array.from({ length: 2 }).map((e, a) => {
                var l;
                return {
                  id: a + 1,
                  amount: t,
                  dueDate: Y
                    ? Be()(
                        null === (l = Y.installments[a]) || void 0 === l
                          ? void 0
                          : l.dueDate
                      )
                    : Be()(),
                };
              })),
                e.length > 0 && (e[0].amount += a);
            } else if ("Yearly" === F.installmentsType)
              e = Array.from({ length: 1 }).map((e, t) => {
                var a;
                return {
                  id: t,
                  amount: F.fee,
                  dueDate: Y
                    ? Be()(
                        null === (a = Y.installments[t]) || void 0 === a
                          ? void 0
                          : a.dueDate
                      )
                    : Be()(),
                };
              });
            else {
              if ("Others" !== F.installmentsType) return void q([]);
              {
                const t = Math.floor(F.fee / F.others),
                  a = F.fee - t * F.others;
                (e = Array.from({ length: F.others }).map((e, a) => {
                  var l;
                  return {
                    id: a + 1,
                    amount: t,
                    dueDate: Y
                      ? Be()(
                          null === (l = Y.installments[a]) || void 0 === l
                            ? void 0
                            : l.dueDate
                        )
                      : Be()(),
                  };
                })),
                  e.length > 0 && (e[0].amount += a);
              }
            }
            q(e);
          })();
        }, [F.installmentsType, F.others, F.fee, Y]);
        const J = (e, t, a) => {
          q((l) => {
            let n = l.map((l, n) => {
              if (n === a)
                return "amount" === t
                  ? { ...l, [t]: parseInt(e) }
                  : "dueDate" === t
                  ? { ...l, [t]: e }
                  : l;
              if (n > a) {
                let t = n - a;
                "Quaterly" === F.installmentsType
                  ? (t *= 3)
                  : "Half-Yearly" === F.installmentsType
                  ? (t *= 6)
                  : "Others" === F.installmentsType && (t *= 1);
                const i = Be()(e).add(t, "month");
                return { ...l, dueDate: i };
              }
              return l;
            });
            return W({ ...Y, installments: n }), n;
          });
        };
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(ct.A, {
            open: r,
            onClose: R,
            onSubmit: async (e) => {
              _(!0),
                e.preventDefault(),
                F.pickType ||
                  (function (e, t) {
                    const a = e.indexOf(t);
                    -1 !== a && e.splice(a, 1);
                  })(T, "pickType");
              try {
                let e = {
                  receiptTitleId: o,
                  dependencies: T,
                  classId: F.class,
                  routeId: F.route,
                  pickType: F.pickType,
                  hostelId: F.hostel,
                  stopId: F.stop,
                  fee: F.fee,
                  installmentType: F.installmentsType,
                  installments: E.map((e) => ({
                    ...e,
                    dueDate: Be()(
                      null === e || void 0 === e ? void 0 : e.dueDate
                    ),
                  })),
                  schoolId: m._id,
                };
                if (i) {
                  const { data: t } = await (0, Se.yJ)(
                    ke.r.feeMap.update +
                      "/" +
                      (null === i || void 0 === i ? void 0 : i._id),
                    e
                  );
                } else {
                  const { data: t } = await (0, Se.bE)(ke.r.feeMap.create, e);
                }
                R();
              } catch (t) {
                _(!1), console.error(t);
              }
              _(!1);
            },
            component: "form",
            children: [
              (0, re.jsx)(mt.A, {
                sx: { fontWeight: 600 },
                children: i ? "Update Fee Map" : "Add Fee Map",
              }),
              (0, re.jsx)(x.A, {}),
              (0, re.jsx)(ut.A, {
                sx: { padding: "10px" },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 12,
                      item: !0,
                      children: [
                        (0, re.jsx)(u.A, {
                          variant: "body",
                          children:
                            "Choose the dependencies that will serve as the basis for the fee calculation.",
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 8,
                          item: !0,
                          children: (0, re.jsxs)(Ta.A, {
                            size: "small",
                            sx: { mt: 2, width: 400 },
                            children: [
                              (0, re.jsx)(Ma.A, {
                                id: "demo-multiple-chip-label",
                                children: "Choose the dependencies",
                              }),
                              (0, re.jsx)(Fa.A, {
                                labelId: "demo-multiple-chip-label",
                                id: "demo-multiple-chip",
                                size: "small",
                                multiple: !0,
                                label: "Choose the dependencies",
                                value: T,
                                onChange: (e) => {
                                  const {
                                    target: { value: t },
                                  } = e;
                                  let a = [...t];
                                  (a = a.pop()),
                                    M(
                                      a
                                        ? "classOld" === a
                                          ? t.filter(
                                              (e) =>
                                                !["class", "classNew"].includes(
                                                  e
                                                )
                                            )
                                          : "classNew" === a
                                          ? t.filter(
                                              (e) =>
                                                !["classOld", "class"].includes(
                                                  e
                                                )
                                            )
                                          : "class" === a
                                          ? t.filter(
                                              (e) =>
                                                ![
                                                  "classOld",
                                                  "classNew",
                                                ].includes(e)
                                            )
                                          : t
                                        : t
                                    );
                                },
                                children: Object.keys(Jo).map((e) =>
                                  (0, re.jsx)(
                                    D.A,
                                    { value: e, children: Jo[e] },
                                    e
                                  )
                                ),
                              }),
                            ],
                          }),
                        }),
                        T &&
                          (0, re.jsx)(s.A, {
                            sx: {
                              display: "flex",
                              flexWrap: "wrap",
                              gap: 0.5,
                              marginLeft: "20px",
                            },
                            children: T.map((e, t) =>
                              (0, re.jsx)(
                                Yo.A,
                                {
                                  sx: { mt: 2 },
                                  label: Jo[e],
                                  onDelete: () => {
                                    return (
                                      (t = e),
                                      M((e) => e.filter((e) => e !== t)),
                                      [
                                        "class",
                                        "classOld",
                                        "classNew",
                                      ].includes(t) &&
                                        z((e) => ({ ...e, class: "" })),
                                      "hostel" === t &&
                                        z((e) => ({ ...e, hostel: "" })),
                                      void (
                                        "transport" === t &&
                                        z((e) => ({
                                          ...e,
                                          stop: "",
                                          route: "",
                                          pickType: "",
                                        }))
                                      )
                                    );
                                    var t;
                                  },
                                },
                                e
                              )
                            ),
                          }),
                      ],
                    }),
                    T.includes("academicYear") &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        mt: 2,
                        children: (0, re.jsxs)(Ta.A, {
                          fullWidth: !0,
                          size: "small",
                          children: [
                            (0, re.jsx)(Ma.A, {
                              children: "Select Academic Year",
                            }),
                            (0, re.jsx)(Fa.A, {
                              size: "small",
                              name: "academicYear",
                              required: !0,
                              value: F.academicYear || "",
                              onChange: P,
                              label: "Select Academic Year",
                              children: j.map((e) =>
                                (0, re.jsx)(
                                  D.A,
                                  { value: e._id, children: e.label },
                                  e._id
                                )
                              ),
                            }),
                          ],
                        }),
                      }),
                    (T.includes("class") ||
                      T.includes("classNew") ||
                      T.includes("classOld")) &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        mt: 2,
                        children: (0, re.jsxs)(Ta.A, {
                          fullWidth: !0,
                          size: "small",
                          children: [
                            (0, re.jsx)(Ma.A, { children: "Select Class" }),
                            (0, re.jsx)(Fa.A, {
                              size: "small",
                              name: "class",
                              required: !0,
                              value: F.class || "",
                              onChange: P,
                              label: "Select Class",
                              children: h.map((e) =>
                                (0, re.jsx)(
                                  D.A,
                                  { value: e._id, children: e.label },
                                  e._id
                                )
                              ),
                            }),
                          ],
                        }),
                      }),
                    T.includes("transport") &&
                      (0, re.jsxs)(re.Fragment, {
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 12,
                            md: 6,
                            lg: 6,
                            mt: 2,
                            children: (0, re.jsxs)(Ta.A, {
                              fullWidth: !0,
                              size: "small",
                              children: [
                                (0, re.jsx)(Ma.A, { children: "Select Route" }),
                                (0, re.jsx)(Fa.A, {
                                  size: "small",
                                  name: "route",
                                  required: !0,
                                  value: F.route || "",
                                  onChange: P,
                                  label: "Select Route",
                                  children: A.map((e) =>
                                    (0, re.jsx)(
                                      D.A,
                                      {
                                        value: e._id,
                                        children:
                                          null === e || void 0 === e
                                            ? void 0
                                            : e.label,
                                      },
                                      e._id
                                    )
                                  ),
                                }),
                              ],
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 12,
                            md: 6,
                            lg: 6,
                            mt: 2,
                            children: (0, re.jsxs)(Ta.A, {
                              fullWidth: !0,
                              size: "small",
                              children: [
                                (0, re.jsx)(Ma.A, { children: "Select Stop" }),
                                (0, re.jsx)(Fa.A, {
                                  size: "small",
                                  name: "stop",
                                  required: !0,
                                  value: F.stop || "",
                                  onChange: P,
                                  label: "Select stop",
                                  children:
                                    null === A ||
                                    void 0 === A ||
                                    null ===
                                      (t = A.find((e) => e._id === F.route)) ||
                                    void 0 === t ||
                                    null === (a = t.stops) ||
                                    void 0 === a ||
                                    null ===
                                      (n = a.map((e) => ({
                                        ...e,
                                        label: e.name,
                                        value: e._id,
                                      }))) ||
                                    void 0 === n
                                      ? void 0
                                      : n.map((e) =>
                                          (0, re.jsx)(
                                            D.A,
                                            {
                                              value: e.value,
                                              children:
                                                null === e || void 0 === e
                                                  ? void 0
                                                  : e.label,
                                            },
                                            e.value
                                          )
                                        ),
                                }),
                              ],
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 6,
                            md: 6,
                            item: !0,
                            mt: 2,
                            children: (0, re.jsxs)(Ta.A, {
                              fullWidth: !0,
                              size: "small",
                              children: [
                                (0, re.jsx)(Ma.A, { children: "Pick Type" }),
                                (0, re.jsx)(Fa.A, {
                                  size: "small",
                                  name: "pickType",
                                  value: F.pickType || "",
                                  onChange: P,
                                  label: "Pick Type",
                                  children: ["Drop", "Pick", "Both"].map((e) =>
                                    (0, re.jsx)(
                                      D.A,
                                      { value: e, children: e },
                                      e
                                    )
                                  ),
                                }),
                              ],
                            }),
                          }),
                        ],
                      }),
                    T.includes("hostel") &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        mt: 2,
                        children: (0, re.jsxs)(Ta.A, {
                          fullWidth: !0,
                          size: "small",
                          children: [
                            (0, re.jsx)(Ma.A, { children: "Select Hostel" }),
                            (0, re.jsx)(Fa.A, {
                              size: "small",
                              name: "hostel",
                              required: !0,
                              value: F.hostel || "",
                              onChange: P,
                              label: "Select Hostel",
                              children: b.map((e) =>
                                (0, re.jsx)(
                                  D.A,
                                  {
                                    value: e._id,
                                    children:
                                      null === e || void 0 === e
                                        ? void 0
                                        : e.label,
                                  },
                                  e._id
                                )
                              ),
                            }),
                          ],
                        }),
                      }),
                    T.includes("roomType") &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        mt: 2,
                        children: (0, re.jsxs)(Ta.A, {
                          fullWidth: !0,
                          size: "small",
                          children: [
                            (0, re.jsx)(Ma.A, { children: "Select Room Type" }),
                            (0, re.jsx)(Fa.A, {
                              size: "small",
                              name: "roomType",
                              required: !0,
                              value: F.roomType || "",
                              onChange: P,
                              label: "Select Room Type",
                              children: k.map((e) =>
                                (0, re.jsx)(
                                  D.A,
                                  {
                                    value: e._id,
                                    children:
                                      null === e || void 0 === e
                                        ? void 0
                                        : e.label,
                                  },
                                  e._id
                                )
                              ),
                            }),
                          ],
                        }),
                      }),
                    T.includes("room") &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        mt: 2,
                        children: (0, re.jsxs)(Ta.A, {
                          fullWidth: !0,
                          size: "small",
                          children: [
                            (0, re.jsx)(Ma.A, { children: "Select Room" }),
                            (0, re.jsx)(Fa.A, {
                              size: "small",
                              name: "room",
                              required: !0,
                              value: F.room || "",
                              onChange: P,
                              label: "Select Room",
                              children: w
                                .filter((e) => {
                                  var t, a, l, n;
                                  return F.hostel && F.roomType
                                    ? (null === (t = e.hostel) || void 0 === t
                                        ? void 0
                                        : t._id) == F.hostel &&
                                        (null === (a = e.type) || void 0 === a
                                          ? void 0
                                          : a._id) == F.roomType
                                    : F.hostel && !F.roomType
                                    ? (null === (l = e.hostel) || void 0 === l
                                        ? void 0
                                        : l._id) == F.hostel
                                    : !F.hostel && F.roomType
                                    ? (null === (n = e.type) || void 0 === n
                                        ? void 0
                                        : n._id) == F.roomType
                                    : e._id;
                                })
                                .map((e) => {
                                  var t, a;
                                  return (0, re.jsxs)(
                                    D.A,
                                    {
                                      value: e._id,
                                      children: [
                                        null === (t = e.hostel) || void 0 === t
                                          ? void 0
                                          : t.name,
                                        " - ",
                                        null === (a = e.type) || void 0 === a
                                          ? void 0
                                          : a.name,
                                        " ",
                                        "(".concat(e.totalBeds, "-Beds)"),
                                      ],
                                    },
                                    e._id
                                  );
                                }),
                            }),
                          ],
                        }),
                      }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      mt: 2,
                      children: (0, re.jsx)(Mt.A, {
                        fullWidth: !0,
                        size: "small",
                        label: "Fee",
                        type: "number",
                        required: !0,
                        name: "fee",
                        value: F.fee || "",
                        onChange: P,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      mt: 2,
                      children: (0, re.jsxs)(Ta.A, {
                        fullWidth: !0,
                        size: "small",
                        children: [
                          (0, re.jsx)(Ma.A, { children: "Installment Type" }),
                          (0, re.jsx)(Fa.A, {
                            size: "small",
                            name: "installmentsType",
                            value: F.installmentsType || "",
                            onChange: P,
                            label: "Select Installment Type",
                            children: Vo.map((e) =>
                              (0, re.jsx)(
                                D.A,
                                { value: e.label, children: e.label },
                                e.id
                              )
                            ),
                          }),
                        ],
                      }),
                    }),
                    "Others" == F.installmentsType &&
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        mt: 2,
                        children: (0, re.jsx)(Mt.A, {
                          fullWidth: !0,
                          label: "Number of installments",
                          size: "small",
                          name: "others",
                          type: "number",
                          value: F.others || "",
                          onChange: P,
                        }),
                      }),
                    E.map((e, t) =>
                      (0, re.jsx)(
                        l.Fragment,
                        {
                          children: (0, re.jsxs)(xe.Ay, {
                            container: !0,
                            rowSpacing: 0,
                            columnSpacing: 2,
                            px: 2,
                            children: [
                              (0, re.jsx)(xe.Ay, {
                                item: !0,
                                xs: 12,
                                sm: 6,
                                md: 6,
                                mt: 2,
                                children: (0, re.jsx)(Mt.A, {
                                  fullWidth: !0,
                                  type: "number",
                                  label: "installment ".concat(t + 1),
                                  value:
                                    (null === e || void 0 === e
                                      ? void 0
                                      : e.amount) || 0,
                                  size: "small",
                                  onChange: (e) =>
                                    J(e.target.value, "amount", t),
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                item: !0,
                                xs: 12,
                                sm: 6,
                                md: 6,
                                children: (0, re.jsx)(Wo.$, {
                                  dateAdapter: Po.R,
                                  children: (0, re.jsx)(Ro.l, {
                                    enabled: i,
                                    label: "Due Date",
                                    format: "DD/MM/YYYY",
                                    value:
                                      (null === e || void 0 === e
                                        ? void 0
                                        : e.dueDate) || null,
                                    onChange: (e) => J(e, "dueDate", t),
                                    sx: {
                                      "& .MuiInputBase-input": {
                                        height: "8px",
                                      },
                                      marginTop: "16px",
                                      width: "100%",
                                    },
                                    renderInput: (e) =>
                                      (0, re.jsx)(Mt.A, {
                                        fullWidth: !0,
                                        enabled: i,
                                        ...e,
                                        size: "small",
                                      }),
                                  }),
                                }),
                              }),
                            ],
                          }),
                        },
                        t
                      )
                    ),
                  ],
                }),
              }),
              (0, re.jsxs)(xt.A, {
                children: [
                  (0, re.jsx)($e.A, {
                    size: "small",
                    color: "error",
                    variant: "contained",
                    onClick: R,
                    children: "Close",
                  }),
                  (0, re.jsx)(ht.A, {
                    size: "small",
                    loading: N,
                    variant: "contained",
                    type: "submit",
                    children: i ? "Update" : "Submit",
                  }),
                ],
              }),
            ],
          }),
        });
      }
      const Oo = (0, n.Ay)(ra.A)((e) => {
        let { theme: t, isDarkMode: a } = e;
        return {
          width: "200px",
          border: "1px solid gray",
          ["&.".concat(va.A.head)]: {
            backgroundColor: a ? "transparent" : "blue",
          },
          ["&.".concat(va.A.body)]: { fontSize: 15 },
        };
      });
      function Lo(e) {
        let {
          open: t = !0,
          title: a = "",
          tableData: n = [],
          onClose: i = () => {},
        } = e;
        const { isDarkMode: s } = (0, l.useContext)(st.A);
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(ct.A, {
            onClose: i,
            "aria-labelledby": "customized-dialog-title",
            open: t,
            children: [
              (0, re.jsx)(mt.A, {
                sx: {
                  m: 0,
                  p: 2,
                  backgroundColor: s ? "#333" : "#fff",
                  color: s ? "#fff" : "#000",
                },
                id: "customized-dialog-title",
                children: a,
              }),
              (0, re.jsx)(h.A, {
                "aria-label": "close",
                onClick: i,
                sx: {
                  position: "absolute",
                  right: 8,
                  top: 8,
                  color: s ? "#fff" : "#000",
                },
                children: (0, re.jsx)(Sa.A, {}),
              }),
              (0, re.jsx)(ut.A, {
                sx: {
                  backgroundColor: s ? "#333" : "#fff",
                  color: s ? "#fff" : "#000",
                },
                children: (0, re.jsxs)(ia.A, {
                  "aria-label": "customized table",
                  children: [
                    (0, re.jsx)(sa.A, {
                      sx: {
                        backgroundColor: (e) =>
                          "dark" === e.palette.mode
                            ? e.palette.primary.dark
                            : e.palette.primary.light,
                      },
                      children: (0, re.jsxs)(oa.A, {
                        children: [
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "S.No",
                          }),
                          (0, re.jsx)(ra.A, {
                            sx: { fontWeight: "bold" },
                            align: "center",
                            children: "Amount",
                          }),
                          (0, re.jsx)(ra.A, {
                            sx: { fontWeight: "bold" },
                            align: "center",
                            children: "Due Date",
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(ca.A, {
                      children:
                        null === n || void 0 === n
                          ? void 0
                          : n.map((e, t) =>
                              (0, re.jsx)(
                                l.Fragment,
                                {
                                  children: (0, re.jsxs)(oa.A, {
                                    children: [
                                      (0, re.jsx)(Oo, {
                                        align: "center",
                                        children: t + 1,
                                      }),
                                      (0, re.jsx)(Oo, {
                                        align: "center",
                                        children: e.amount,
                                      }),
                                      (0, re.jsx)(Oo, {
                                        align: "center",
                                        children: Be()(e.dueDate).format(
                                          "DD/MM/YYYY"
                                        ),
                                      }),
                                    ],
                                  }),
                                },
                                t
                              )
                            ),
                    }),
                  ],
                }),
              }),
            ],
          }),
        });
      }
      const Uo = (0, n.Ay)(I.A)((e) => {
          let {} = e;
          return {
            "& .MuiSwitch-switchBase.Mui-checked": { color: "green" },
            "& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track": {
              backgroundColor: "green",
            },
            "& .MuiSwitch-switchBase": { color: "red" },
            "& .MuiSwitch-switchBase + .MuiSwitch-track": {
              backgroundColor: "red",
            },
          };
        }),
        Ho = (e) => {
          let t = [];
          for (let c of e.dependencies)
            if (["class"].includes(c)) {
              var a;
              let l = "[".concat(
                null === (a = e.class) || void 0 === a ? void 0 : a.name,
                "]-Class"
              );
              t.push(l);
            } else if (["classOld"].includes(c)) {
              var l;
              let a = "[".concat(
                null === (l = e.class) || void 0 === l ? void 0 : l.name,
                "]-Class-Old"
              );
              t.push(a);
            } else if (["classNew"].includes(c)) {
              var n;
              let a = "[".concat(
                null === (n = e.class) || void 0 === n ? void 0 : n.name,
                "]-Class-New"
              );
              t.push(a);
            } else if (["hostel"].includes(c)) {
              var i;
              let a = "[".concat(
                null === (i = e.hostel) || void 0 === i ? void 0 : i.name,
                "]-Hostel"
              );
              t.push(a);
            } else if (["transport"].includes(c)) {
              var s, o, r, d;
              let a = "["
                .concat(
                  null === e ||
                    void 0 === e ||
                    null === (s = e.route) ||
                    void 0 === s ||
                    null === (o = s.vehicle) ||
                    void 0 === o
                    ? void 0
                    : o.number,
                  "]+["
                )
                .concat(
                  null === e ||
                    void 0 === e ||
                    null === (r = e.route) ||
                    void 0 === r
                    ? void 0
                    : r.title,
                  "]-Transport-["
                )
                .concat(
                  null === e ||
                    void 0 === e ||
                    null === (d = e.stop) ||
                    void 0 === d
                    ? void 0
                    : d.name,
                  "]-Stop-["
                )
                .concat(e.pickType, "]-Pick_Type");
              t.push(a);
            } else if (["pickType"].includes(c)) {
              let a = "[".concat(e.pickType, "]-Pick_Type");
              t.push(a);
            }
          return t.join(" | ");
        },
        Go = (e) => {
          let {
            onUpdate: t = () => {},
            data: a = {},
            onEditClick: n = () => {},
            onNavigateFeeMap: i = () => {},
          } = e;
          const [s, o] = (0, l.useState)(!1);
          return (0, re.jsx)(re.Fragment, {
            children: (0, re.jsxs)(b.A, {
              direction: "row",
              spacing: 1,
              alignItems: "center",
              children: [
                (0, re.jsx)($e.A, {
                  size: "small",
                  variant: "contained",
                  onClick: () => i(a._id),
                  children: "Fee Map",
                }),
                (0, re.jsx)(S.A, {
                  title: "Edit",
                  children: (0, re.jsx)(h.A, {
                    onClick: () => n(a),
                    size: "small",
                    children: (0, re.jsx)(Eo.A, {
                      color: "primary",
                      fontSize: "12px",
                    }),
                  }),
                }),
                (0, re.jsx)(S.A, {
                  title: a.active ? "Deactive" : "Activate",
                  children: (0, re.jsx)(Uo, {
                    size: "small",
                    checked: a.active,
                    onChange: async () => {
                      try {
                        o(!0),
                          await (0, Se.yJ)(
                            ""
                              .concat(ke.r.receiptTitle.toggleActiveStatus, "/")
                              .concat(a._id)
                          ),
                          t(),
                          o(!1);
                      } catch (e) {
                        console.log(e), o(!1);
                      }
                    },
                    inputProps: { "aria-label": "controlled" },
                  }),
                }),
              ],
            }),
          });
        };
      function Ko() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(0),
          [s, o] = (0, l.useState)(!1),
          [r, d] = (0, l.useState)(null),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)(!1),
          [h, p] = (0, l.useState)(!1),
          [j, g] = (0, l.useState)(""),
          [A, y] = (0, l.useState)({
            open: !1,
            tableData: [],
            action: () => {},
          }),
          f = async () => {
            try {
              var t;
              const { data: l } = await (0, Se.Jt)(ke.r.feeMap.list, {
                params: { schoolId: e._id, search: { receiptTitle: j } },
              });
              a(
                null === l ||
                  void 0 === l ||
                  null === (t = l.result) ||
                  void 0 === t
                  ? void 0
                  : t.map((e) => ({ ...e, detail: Ho(e) }))
              );
            } catch (l) {
              console.error(l);
            }
          },
          v = async () => {
            try {
              const { data: t, status: a } = await (0, Se.Jt)(
                ke.r.receiptTitle.list,
                { params: { schoolId: e._id } }
              );
              m(t.result), t.result.length > 0 && g(j || t.result[0]._id);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          j && f();
        }, [j, e._id]),
          (0, l.useEffect)(() => {
            v();
          }, [e]);
        const b = () => {
            o(!1), d(null), v();
          },
          S = (0, et.Wx)({
            initialValues: {
              name: (null === r || void 0 === r ? void 0 : r.name) || "",
              active: (null === r || void 0 === r ? void 0 : r.active) || !0,
            },
            onSubmit: async (t) => {
              try {
                const a = {
                  ...t,
                  schoolId: null === e || void 0 === e ? void 0 : e._id,
                };
                if ((x(!0), r)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.receiptTitle.update + "/" + r._id,
                    a
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.receiptTitle.create,
                    a
                  );
                }
                b();
              } catch (a) {
                console.log(a);
              }
              x(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Receipt Book" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                i(t);
              },
              value: n,
              labels: ["Receipt Book", "Fee Map"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: n,
              children: [
                (0, re.jsx)($e.A, {
                  variant: "contained",
                  size: "small",
                  onClick: () => {
                    o(!0);
                  },
                  startIcon: (0, re.jsx)(rs.A, {}),
                  sx: { mt: 1, mb: 2 },
                  children: "Add Receipt",
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["custom"],
                  bodyDataModal: "Receipt Book",
                  bodyData: c,
                  tableKeys: zo,
                  feeMapTableKeys: !0,
                  onEditClick: (e) => {
                    d(e), o(!0);
                  },
                  onNavigateFeeMap: (e) => {
                    g(e), i(1);
                  },
                  CustomAction: Go,
                  onUpdate: v,
                }),
                (0, re.jsx)(pt, {
                  open: s,
                  formik: S,
                  formTitle: r ? "Update Receipt Book" : "Add Receipt Book",
                  onClose: b,
                  submitButtonTitle: r ? "Update" : "Submit",
                  adding: u,
                  children: (0, re.jsx)(xe.Ay, {
                    rowSpacing: 0,
                    columnSpacing: 2,
                    container: !0,
                    children: (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: S,
                        name: "name",
                        label: "Receipt Name",
                        required: !0,
                      }),
                    }),
                  }),
                }),
              ],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 1,
              value: n,
              children: [
                (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  sx: { display: "flex", alignItems: "center", my: 1.5 },
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsxs)(Ta.A, {
                        fullWidth: !0,
                        size: "small",
                        children: [
                          (0, re.jsx)(Ma.A, { children: "Select Receipt" }),
                          (0, re.jsx)(Fa.A, {
                            required: !0,
                            fullWidth: !0,
                            value: j || "",
                            onChange: (e) => g(e.target.value),
                            label: "Select Receipt",
                            children: c.map((e) =>
                              (0, re.jsx)(
                                D.A,
                                { value: e._id, children: e.name },
                                e._id || ""
                              )
                            ),
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)($e.A, {
                        variant: "contained",
                        startIcon: (0, re.jsx)(rs.A, {}),
                        onClick: () => {
                          p(!0), d(null);
                        },
                        children: "Add Fee Map",
                      }),
                    }),
                  ],
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["edit", "switch", "view"],
                  bodyDataModal: "Fee Map",
                  bodyData: t,
                  tableKeys: qo,
                  toggleStatus: "active",
                  onToggleSwitch: async (e) => {
                    try {
                      const { data: t } = await (0, Se.yJ)(
                        ke.r.feeMap.toggleActiveStatus + "/" + e._id
                      );
                      f();
                    } catch (t) {
                      console.error(t);
                    }
                  },
                  onViewClick: (e) => {
                    y({
                      ...A,
                      open: !0,
                      tableData:
                        null === e || void 0 === e ? void 0 : e.installments,
                    });
                  },
                  onEditClick: (e) => {
                    d(e), p(!0);
                  },
                }),
                (0, re.jsx)(Bo, {
                  open: h,
                  dataToEdit: r,
                  getFeeMaps: f,
                  setOpen: p,
                  loading: u,
                  selectedReceipt: j,
                }),
                (0, re.jsx)(Lo, {
                  title: "Installment Details",
                  open: null === A || void 0 === A ? void 0 : A.open,
                  tableData: null === A || void 0 === A ? void 0 : A.tableData,
                  onClose: (e) => {
                    y({ ...A, open: !1 });
                  },
                }),
              ],
            }),
          ],
        });
      }
      const Qo = [
        { name: "Name", key: "name" },
        { name: "Description", key: "description" },
        { name: "Amount\t", key: "amount" },
      ];
      function Zo(e) {
        let {
          open: t = !1,
          categories: a = [],
          adding: l = !1,
          setCategories: n = () => {},
          addCategory: s = () => {},
          removeCategory: o = () => {},
          onClose: r = () => {},
          onSubmit: d = () => {},
          totalAmount: c = 0,
          leftAmount: m = 0,
        } = e;
        const p = (0, i.A)();
        let j = (0, dt.A)(p.breakpoints.down("sm"));
        const g = (e, t) => {
          n([
            ...a.map((a) =>
              a.id === t ? { ...a, [e.target.name]: e.target.value } : a
            ),
          ]);
        };
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(ct.A, {
            fullScreen: j,
            open: t,
            onClose: r,
            PaperProps: { sx: { width: "100%", maxWidth: 650 } },
            children: [
              (0, re.jsx)(mt.A, {
                sx: { fontWeight: 600 },
                children: "Add Fee Map Category",
              }),
              (0, re.jsx)(x.A, {}),
              (0, re.jsxs)(ut.A, {
                sx: { padding: "10px" },
                children: [
                  (0, re.jsxs)(u.A, {
                    variant: "caption",
                    fontSize: 12,
                    children: [
                      "Total Amount:",
                      " ",
                      (0, re.jsxs)("b", {
                        style: { color: "rgb(0, 196, 159)" },
                        children: ["\u20b9", c],
                      }),
                    ],
                  }),
                  (0, re.jsxs)(u.A, {
                    variant: "caption",
                    fontSize: 12,
                    ml: 2,
                    children: [
                      "Left Amount:",
                      " ",
                      (0, re.jsxs)("b", {
                        style: { color: "rgb(255, 128, 66)" },
                        children: ["\u20b9", m],
                      }),
                    ],
                  }),
                  a.map((e, t) =>
                    (0, re.jsxs)(
                      xe.Ay,
                      {
                        rowSpacing: 0,
                        columnSpacing: 1,
                        container: !0,
                        alignItems: "center",
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 4,
                            md: 4,
                            item: !0,
                            children: (0, re.jsx)(li, {
                              required: !0,
                              type: "text",
                              name: "name",
                              value: e.name || "",
                              label: "Name",
                              onChange: (t) => g(t, e.id),
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 4,
                            md: 4,
                            item: !0,
                            children: (0, re.jsx)(li, {
                              type: "text",
                              name: "description",
                              value: e.description || "",
                              label: "Description",
                              onChange: (t) => g(t, e.id),
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 3,
                            md: 3,
                            item: !0,
                            children: (0, re.jsx)(li, {
                              required: !0,
                              type: "number",
                              name: "amount",
                              value: e.amount || "",
                              label: "Amount",
                              onChange: (t) => g(t, e.id),
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 1,
                            md: 1,
                            item: !0,
                            children: (0, re.jsx)(S.A, {
                              title: "Remove Category",
                              children: (0, re.jsx)(h.A, {
                                color: "error",
                                size: "small",
                                onClick: () => o(e.id),
                                sx: { mt: 1 },
                                children: (0, re.jsx)(bs.A, {}),
                              }),
                            }),
                          }),
                        ],
                      },
                      e.id
                    )
                  ),
                  (0, re.jsx)(S.A, {
                    title: "Add Category",
                    sx: { mt: 1 },
                    children: (0, re.jsx)(h.A, {
                      color: "primary",
                      size: "small",
                      children: (0, re.jsx)(ot.A, { onClick: () => s() }),
                    }),
                  }),
                ],
              }),
              (0, re.jsxs)(xt.A, {
                children: [
                  (0, re.jsx)($e.A, {
                    size: "small",
                    color: "error",
                    variant: "contained",
                    onClick: r,
                    children: "Close",
                  }),
                  (0, re.jsx)(ht.A, {
                    size: "small",
                    loading: l,
                    variant: "contained",
                    onClick: d,
                    children: "Submit",
                  }),
                ],
              }),
            ],
          }),
        });
      }
      const $o = (e) => {
        let t = [];
        for (let s of e.dependencies)
          if (["class"].includes(s)) {
            var a;
            let l = "[".concat(
              null === (a = e.class) || void 0 === a ? void 0 : a.name,
              "]-Class"
            );
            t.push(l);
          } else if (["classOld"].includes(s)) {
            var l;
            let a = "[".concat(
              null === (l = e.class) || void 0 === l ? void 0 : l.name,
              "]-Class-Old"
            );
            t.push(a);
          } else if (["classNew"].includes(s)) {
            var n;
            let a = "[".concat(
              null === (n = e.class) || void 0 === n ? void 0 : n.name,
              "]-Class-New"
            );
            t.push(a);
          } else if ("hostel" === s) {
            var i;
            let a = "[".concat(
              null === (i = e.hostel) || void 0 === i ? void 0 : i.name,
              "]-Hostel"
            );
            t.push(a);
          } else if ("transport" == s) {
            let a = "["
              .concat(e.route.vehicle.number, "]+[")
              .concat(e.route.title, "]-Transport-[")
              .concat(e.stop.name, "]-Stop-[")
              .concat(e.pickType, "]-Pick_Type");
            t.push(a);
          } else if ("pickType" == s) {
            let a = "[".concat(e.pickType, "]-Pick_Type");
            t.push(a);
          }
        return t.join(" | ");
      };
      function Xo() {
        var e, t;
        const { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(null),
          [u, x] = (0, l.useState)(!1),
          [h, p] = (0, l.useState)(!1),
          [j, g] = (0, l.useState)(!1),
          [A, y] = (0, l.useState)([
            { id: 1, name: "Category 1", amount: 1, description: "" },
          ]),
          f = (0, et.Wx)({
            initialValues: { name: "", feeMap: "" },
            onSubmit: async (e) => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.feeMapCategory.list, {
                  params: {
                    schoolId: a._id,
                    search: {
                      feeMap: null === e || void 0 === e ? void 0 : e.feeMap,
                    },
                  },
                });
                i(t.result);
              } catch (t) {
                console.log(t);
              }
            },
          }),
          v = (0, et.Wx)({
            initialValues: {
              name: (null === c || void 0 === c ? void 0 : c.name) || "",
              description:
                (null === c || void 0 === c ? void 0 : c.description) || "",
              amount: (null === c || void 0 === c ? void 0 : c.amount) || "",
            },
            onSubmit: async (e) => {
              try {
                const t = { ...e, schoolId: a._id };
                if ((p(!0), c)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.feeMapCategory.update + "/" + c._id,
                    t
                  );
                } else {
                  if (
                    A.find(
                      (e) =>
                        !e.name ||
                        !parseFloat(e.amount) ||
                        parseFloat(e.amount) < 0
                    )
                  )
                    return (
                      p(!1),
                      Ba.oR.error(
                        "Please mention name and amount for each category"
                      )
                    );
                  const { data: e } = await (0, Se.bE)(
                    ke.r.feeMapCategory.createMultiple,
                    {
                      schoolId: a._id,
                      feeMapId: f.values.feeMap,
                      categories: A.map((e) => ({
                        ...e,
                        amount: parseFloat(e.amount),
                      })),
                    }
                  );
                }
                b(), S();
              } catch (t) {
                console.log(t);
              }
              p(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          f.values.name &&
            (async () => {
              try {
                var e, t;
                const { data: l } = await (0, Se.Jt)(ke.r.feeMap.list, {
                  params: {
                    schoolId: a._id,
                    search: { receiptTitle: f.values.name },
                  },
                });
                d(
                  null === l ||
                    void 0 === l ||
                    null === (e = l.result) ||
                    void 0 === e
                    ? void 0
                    : e.map((e) => ({ ...e, label: $o(e), value: e._id }))
                ),
                  f.setFieldValue(
                    "feeMap",
                    null === (t = l.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (l) {
                console.error(l);
              }
            })();
        }, [a, f.values.name]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.receiptTitle.list, {
                  params: { schoolId: a._id },
                });
                o(e.result.map((e) => ({ label: e.name, value: e._id }))),
                  f.setFieldValue("name", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })();
          }, [a._id]);
        const b = () => {
            x(!1), m(null), f.handleSubmit(), v.resetForm();
          },
          S = () => {
            g(!1),
              y([{ id: 1, name: "Category 1", amount: 1, description: "" }]);
          };
        (0, l.useEffect)(() => {
          f.values.feeMap && f.handleSubmit();
        }, [f.values.feeMap, a._id]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Fee Map Category" }),
            (0, re.jsxs)(xe.Ay, {
              rowSpacing: 1,
              columnSpacing: 2,
              container: !0,
              sx: { display: "flex", alignItems: "center", mb: 1 },
              children: [
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  md: 6,
                  lg: 3,
                  item: !0,
                  children: (0, re.jsx)(Xe.A, {
                    required: !0,
                    name: "name",
                    formik: f,
                    label: "Select Receipt Name",
                    options: s,
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  md: 6,
                  lg: 3,
                  item: !0,
                  children: (0, re.jsx)(Xe.A, {
                    required: !0,
                    name: "feeMap",
                    formik: f,
                    label: "Select Fee Maps",
                    options: r,
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  md: 6,
                  lg: 3,
                  item: !0,
                  children: (0, re.jsx)($e.A, {
                    variant: "contained",
                    size: "small",
                    startIcon: (0, re.jsx)(rs.A, {}),
                    onClick: () => g(!0),
                    children: "Add Fee Category",
                  }),
                }),
              ],
            }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              bodyDataModal: "Fee Map Category",
              bodyData: n,
              tableKeys: Qo,
              feeMapTableKeys: !0,
              onEditClick: (e) => {
                x(!0), m(e);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.feeMapCategory.delete + "/" + e);
                  f.handleSubmit();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(pt, {
              open: u,
              formik: v,
              formTitle: c ? "Update Fee Map Category" : "Add Fee Map Category",
              onClose: b,
              submitButtonTitle: c ? "Update" : "Submit",
              adding: h,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 4,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: v,
                      name: "name",
                      label: "Name",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 4,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: v,
                      name: "description",
                      label: "Description",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 4,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: v,
                      name: "amount",
                      label: "Amount",
                      type: "number",
                      required: !0,
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(Zo, {
              totalAmount:
                null === (e = r.find((e) => e._id === f.values.feeMap)) ||
                void 0 === e
                  ? void 0
                  : e.fee,
              leftAmount:
                (null === (t = r.find((e) => e._id === f.values.feeMap)) ||
                void 0 === t
                  ? void 0
                  : t.fee) -
                (null === n || void 0 === n
                  ? void 0
                  : n.reduce((e, t) => e + t.amount, 0)),
              open: j,
              adding: h,
              categories: A,
              setCategories: y,
              addCategory: () => {
                let e = [
                  ...A,
                  { id: A.length + 1, name: "New", amount: 1, description: "" },
                ];
                y(e);
              },
              removeCategory: (e) => {
                let t = A.filter((t) => t.id !== e);
                y(t);
              },
              onClose: S,
              onSubmit: () => v.handleSubmit(),
            }),
          ],
        });
      }
      const er = {
          width: "100%",
          height: "auto",
          bgcolor: "background.paper",
          p: 2,
        },
        tr = (e) => {
          const t = (0, i.A)(),
            a = (0, dt.A)(t.breakpoints.down("sm")),
            [n, o] = (0, l.useState)({}),
            [r, d] = (0, l.useState)(""),
            c = (0, l.useRef)(),
            m =
              ((0, l.useRef)(),
              (e) => {
                const { name: t, value: a } = e.target;
                o((e) => ({ ...e, [t]: a }));
              });
          return (0, re.jsx)("div", {
            children: (0, re.jsx)(ct.A, {
              fullScreen: a,
              open: e.open,
              onClose: e.onClose,
              sx: {
                "& .MuiDialog-container": {
                  "& .MuiPaper-root": {
                    width: "100%",
                    maxWidth: { xs: "100%", sm: 400, md: 400, lg: 400 },
                  },
                },
              },
              children: (0, re.jsx)(s.A, {
                sx: er,
                children: (0, re.jsx)("form", {
                  onSubmit: (t) => {
                    if (
                      (t.preventDefault(),
                      !n.refer && !n.format && !n.concession)
                    )
                      return d("Please fill all fields");
                    e.onSubmit(n), o({}), d("");
                  },
                  ref: c,
                  children: (0, re.jsxs)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsx)(u.A, {
                          id: "modal-modal-title",
                          variant: "h6",
                          component: "h2",
                          textAlign: "center",
                          fontSize: "20px",
                          fontWeight: "bold",
                          children: "Add Concession",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsx)(Mt.A, {
                          fullWidth: !0,
                          required: !0,
                          value: n.refer || "",
                          name: "refer",
                          label: "Reference/recommended",
                          onChange: m,
                          size: "small",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsxs)(Ta.A, {
                          fullWidth: !0,
                          size: "small",
                          required: !0,
                          children: [
                            (0, re.jsx)(Ma.A, {
                              children: "Concession format",
                            }),
                            (0, re.jsxs)(Fa.A, {
                              required: !0,
                              value: n.format || "",
                              name: "format",
                              label: "Concession format",
                              size: "small",
                              onChange: m,
                              children: [
                                (0, re.jsx)(D.A, {
                                  value: "Value",
                                  children: "Value",
                                }),
                                (0, re.jsx)(D.A, {
                                  value: "Percentage",
                                  children: "Percentage",
                                }),
                              ],
                            }),
                          ],
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsx)(Mt.A, {
                          fullWidth: !0,
                          type: "number",
                          required: !0,
                          value: n.concession || "",
                          name: "concession",
                          label: "Concession",
                          size: "small",
                          onChange: m,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        display: "flex",
                        justifyContent: "flex-end",
                        children: (0, re.jsxs)(b.A, {
                          direction: "row",
                          gap: 2,
                          children: [
                            (0, re.jsx)($e.A, {
                              onClick: e.onClose,
                              color: "error",
                              variant: "contained",
                              size: "small",
                              children: "Cancel",
                            }),
                            (0, re.jsx)($e.A, {
                              onClick: () => {
                                c.current.dispatchEvent(
                                  new Event("submit", {
                                    cancelable: !0,
                                    bubbles: !0,
                                  })
                                );
                              },
                              variant: "contained",
                              size: "small",
                              sx: {
                                background: "#1B3779",
                                "&:hover": { background: "#1B3779" },
                              },
                              children: "Add",
                            }),
                          ],
                        }),
                      }),
                    ],
                  }),
                }),
              }),
            }),
          });
        },
        ar = {
          width: "100%",
          height: "auto",
          bgcolor: "background.paper",
          p: 2,
        },
        lr = (e) => {
          let {
            onSubmit: t = () => {},
            onPreviewButtonClick: a = () => {},
            onClose: n = () => {},
            open: o = !1,
            payingAmount: r = 0,
            note: d = "",
            onUpdateNote: c = () => {},
            collectingFee: m = !1,
            downloadingPreview: x = !1,
            payingDate: h = null,
            setPayingDate: p = () => {},
          } = e;
          const j = (0, i.A)(),
            g = (0, dt.A)(j.breakpoints.down("sm")),
            [A, y] = (0, l.useState)(""),
            [f, v] = (0, l.useState)({}),
            b = (e) => {
              const { name: t, value: a } = e.target;
              v((e) => ({ ...e, [t]: a }));
            };
          return (
            (0, l.useEffect)(() => {
              v({});
            }, [A]),
            (0, re.jsx)(ct.A, {
              fullScreen: g,
              open: o,
              onClose: n,
              children: (0, re.jsx)(s.A, {
                sx: ar,
                children: (0, re.jsx)("form", {
                  onSubmit: (e) => {
                    e.preventDefault(), p(""), t(A, f), v({});
                  },
                  children: (0, re.jsxs)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsx)(u.A, {
                          id: "modal-modal-title",
                          variant: "h6",
                          component: "h2",
                          textAlign: "center",
                          fontSize: "20px",
                          fontWeight: "bold",
                          children: "Collect Fee",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsxs)(u.A, {
                          variant: "body",
                          children: [
                            (0, re.jsx)("b", {
                              children: "Total Amount Being Paid:",
                            }),
                            " ",
                            "\u20b9".concat(Number(r).toFixed(1)),
                          ],
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsx)(Wo.$, {
                          dateAdapter: Po.R,
                          children: (0, re.jsx)(Ro.l, {
                            sx: { width: "100%" },
                            label: "Payment Date",
                            value: h || null,
                            onChange: (e) => p(e),
                            renderInput: (e) =>
                              (0, re.jsx)(Mt.A, {
                                ...e,
                                size: "small",
                                fullWidth: !0,
                              }),
                          }),
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsxs)(Ta.A, {
                          required: !0,
                          children: [
                            (0, re.jsx)(_s.A, {
                              children: "Select payment method",
                            }),
                            (0, re.jsxs)(za.A, {
                              row: !0,
                              value: A || "",
                              name: "payment",
                              onChange: (e) => {
                                const { name: t, value: a } = e.target;
                                y(a);
                              },
                              children: [
                                (0, re.jsx)(xe.Ay, {
                                  item: !0,
                                  xs: 4,
                                  sm: 4,
                                  md: 2,
                                  lg: 2,
                                  children: (0, re.jsx)(Ea.A, {
                                    value: "Cash",
                                    control: (0, re.jsx)(qa.A, {}),
                                    label: "CASH",
                                  }),
                                }),
                                (0, re.jsx)(xe.Ay, {
                                  item: !0,
                                  xs: 4,
                                  sm: 4,
                                  md: 2,
                                  lg: 2,
                                  children: (0, re.jsx)(Ea.A, {
                                    value: "Cheque",
                                    control: (0, re.jsx)(qa.A, {}),
                                    label: "Cheque",
                                  }),
                                }),
                                (0, re.jsx)(xe.Ay, {
                                  item: !0,
                                  xs: 4,
                                  sm: 4,
                                  md: 2,
                                  lg: 2,
                                  display: "flex",
                                  justifyContent: {
                                    xs: "flex-start",
                                    sm: "flex-start",
                                    md: "center",
                                    lg: "center",
                                  },
                                  children: (0, re.jsx)(Ea.A, {
                                    value: "DD",
                                    control: (0, re.jsx)(qa.A, {}),
                                    label: "DD",
                                  }),
                                }),
                                (0, re.jsx)(xe.Ay, {
                                  item: !0,
                                  xs: 4,
                                  sm: 4,
                                  md: 2,
                                  lg: 2,
                                  children: (0, re.jsx)(Ea.A, {
                                    value: "Upi",
                                    control: (0, re.jsx)(qa.A, {}),
                                    label: "UPI",
                                  }),
                                }),
                                (0, re.jsx)(xe.Ay, {
                                  item: !0,
                                  xs: 4,
                                  sm: 4,
                                  md: 2,
                                  lg: 2,
                                  children: (0, re.jsx)(Ea.A, {
                                    value: "Card",
                                    control: (0, re.jsx)(qa.A, {}),
                                    label: "Card",
                                  }),
                                }),
                                (0, re.jsx)(xe.Ay, {
                                  item: !0,
                                  xs: 4,
                                  sm: 4,
                                  md: 2,
                                  lg: 2,
                                  children: (0, re.jsx)(Ea.A, {
                                    value: "Netbanking",
                                    control: (0, re.jsx)(qa.A, {}),
                                    label: "Netbanking",
                                  }),
                                }),
                              ],
                            }),
                          ],
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        children: (0, re.jsx)(Mt.A, {
                          label: "Note",
                          multiline: !0,
                          rows: 3,
                          name: "note",
                          value: d || "",
                          size: "small",
                          fullWidth: !0,
                          onChange: (e) => c(e.target.value),
                        }),
                      }),
                      "Cheque" === A &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Bank Name",
                                value: f.bankName || "",
                                fullWidth: !0,
                                name: "bankName",
                                onChange: b,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Branch Name",
                                value: f.branchName || "",
                                fullWidth: !0,
                                name: "branchName",
                                onChange: b,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Cheque Number",
                                value: f.chequeNumber || "",
                                fullWidth: !0,
                                name: "chequeNumber",
                                onChange: b,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Wo.$, {
                                dateAdapter: Po.R,
                                children: (0, re.jsx)(Ro.l, {
                                  sx: { width: "100%" },
                                  label: "Cheque Date",
                                  value: f.chequeDate || null,
                                  onChange: (e) =>
                                    b({
                                      target: { name: "chequeDate", value: e },
                                    }),
                                  renderInput: (e) =>
                                    (0, re.jsx)(Mt.A, {
                                      ...e,
                                      size: "small",
                                      fullWidth: !0,
                                    }),
                                }),
                              }),
                            }),
                          ],
                        }),
                      "DD" === A &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Bank Name",
                                value: f.bankName || "",
                                fullWidth: !0,
                                name: "bankName",
                                onChange: b,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Branch Name",
                                value: f.branchName || "",
                                fullWidth: !0,
                                name: "branchName",
                                onChange: b,
                              }),
                            }),
                          ],
                        }),
                      "Upi" === A &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "UPI app name",
                                value: f.upiApp || "",
                                fullWidth: !0,
                                name: "upiApp",
                                onChange: b,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Ref Number",
                                value: f.utrNo || "",
                                fullWidth: !0,
                                name: "utrNo",
                                onChange: b,
                              }),
                            }),
                          ],
                        }),
                      "Card" === A &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Bank Name",
                                value: f.bankName || "",
                                fullWidth: !0,
                                name: "bankName",
                                onChange: b,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Card Type",
                                value: f.cardType || "",
                                fullWidth: !0,
                                name: "cardType",
                                onChange: b,
                              }),
                            }),
                          ],
                        }),
                      "Netbanking" === A &&
                        (0, re.jsxs)(re.Fragment, {
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Bank Name",
                                value: f.bankName || "",
                                fullWidth: !0,
                                name: "bankName",
                                onChange: b,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Reference Number",
                                value: f.refNumber || "",
                                fullWidth: !0,
                                name: "refNumber",
                                onChange: b,
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              sm: 12,
                              md: 12,
                              lg: 12,
                              children: (0, re.jsx)(Mt.A, {
                                size: "small",
                                label: "Paid By",
                                value: f.paidByName || "",
                                fullWidth: !0,
                                name: "paidByName",
                                onChange: b,
                              }),
                            }),
                          ],
                        }),
                      (0, re.jsxs)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 12,
                        lg: 12,
                        display: "flex",
                        justifyContent: "flex-end",
                        gap: 2,
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            onClick: () => (y(""), void n()),
                            variant: "contained",
                            color: "error",
                            children: "cancel",
                          }),
                          (0, re.jsx)(ht.A, {
                            size: "small",
                            loading: m,
                            type: "submit",
                            variant: "contained",
                            children: "collect",
                          }),
                          (0, re.jsx)(ht.A, {
                            size: "small",
                            loading: x,
                            onClick: (e) => {
                              e.preventDefault(), a(A, f);
                            },
                            variant: "contained",
                            children: "preview",
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
            })
          );
        },
        nr = (e) => {
          let t = [];
          for (let c of e.dependencies)
            if (["class"].includes(c)) {
              var a;
              let l = "[".concat(
                null === (a = e.class) || void 0 === a ? void 0 : a.name,
                "]-Class"
              );
              t.push(l);
            } else if (["classOld"].includes(c)) {
              var l;
              let a = "[".concat(
                null === (l = e.class) || void 0 === l ? void 0 : l.name,
                "]-Class-Old"
              );
              t.push(a);
            } else if (["classNew"].includes(c)) {
              var n;
              let a = "[".concat(
                null === (n = e.class) || void 0 === n ? void 0 : n.name,
                "]-Class-New"
              );
              t.push(a);
            } else if (["hostel"].includes(c)) {
              var i;
              let a = "[".concat(
                null === (i = e.hostel) || void 0 === i ? void 0 : i.name,
                "]-Hostel"
              );
              t.push(a);
            } else if (["transport"].includes(c)) {
              var s, o, r, d;
              let a = "["
                .concat(
                  null === e ||
                    void 0 === e ||
                    null === (s = e.route) ||
                    void 0 === s ||
                    null === (o = s.vehicle) ||
                    void 0 === o
                    ? void 0
                    : o.number,
                  "]+["
                )
                .concat(
                  null === e ||
                    void 0 === e ||
                    null === (r = e.route) ||
                    void 0 === r
                    ? void 0
                    : r.title,
                  "]-Transport-["
                )
                .concat(
                  null === e ||
                    void 0 === e ||
                    null === (d = e.stop) ||
                    void 0 === d
                    ? void 0
                    : d.name,
                  "]-Stop-["
                )
                .concat(e.pickType, "]-Pick_Type");
              t.push(a);
            } else if (["pickType"].includes(c)) {
              let a = "[".concat(e.pickType, "]-Pick_Type");
              t.push(a);
            }
          return t.join(" | ");
        },
        ir = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "flex-end",
            alignItems: "center",
            padding: "10px",
            columnGap: "10px",
            backgroundColor:
              "dark" === t.palette.mode
                ? "rgba(255,255,255,0.2)"
                : "whitesmoke",
            borderRadius: "5px",
            marginTop: "80px",
          };
        });
      function sr() {
        var e, t, a, n, i, o, r, d, c, m, x;
        const [h, p] = (0, l.useState)([]),
          { selectedSetting: j } = (0, l.useContext)(Ce.A),
          [g, A] = (0, l.useState)([]),
          [y, f] = (0, l.useState)([]),
          [v, S] = (0, l.useState)([]),
          [k, C] = (0, l.useState)([]),
          [w, I] = (0, l.useState)([]),
          [N, _] = (0, l.useState)(null),
          [T, M] = (0, l.useState)(null),
          [F, z] = (0, l.useState)({}),
          [E, q] = (0, l.useState)(0),
          [Y, W] = (0, l.useState)([]),
          [R, P] = (0, l.useState)(!1),
          [J, V] = (0, l.useState)(!1),
          [B, O] = (0, l.useState)(""),
          [L, U] = (0, l.useState)(""),
          [H, G] = (0, l.useState)(""),
          [K, Q] = (0, l.useState)(!1),
          [Z, $] = (0, l.useState)(null),
          [X, ee] = (0, l.useState)(""),
          [te, ae] = (0, l.useState)(null),
          [le, ne] = (0, l.useState)(!1),
          [ie, se] = (0, l.useState)(!1),
          [oe, de] = (0, l.useState)(!1),
          me = () => de(!1),
          he = (0, et.Wx)({
            initialValues: {
              receiptName: "",
              feeMap: "",
              class: "",
              section: "",
              student: "",
            },
            onSubmit: async (e) => {
              if ((V(!0), !e.feeMap || !e.student || !e.receiptName))
                return M(null), V(!1);
              try {
                var t;
                const { data: a, status: l } = await (0, Se.Jt)(
                  ke.r.receipt.getFeeDetails,
                  {
                    params: {
                      feeMapId: e.feeMap,
                      studentId: e.student,
                      receiptTitleId: e.receiptName,
                      installmentId:
                        B ||
                        (null === (t = y.filter((t) => t._id == e.feeMap)[0]) ||
                        void 0 === t
                          ? void 0
                          : t.installments[0]._id),
                      schoolId: j._id,
                    },
                  }
                );
                console.log(a.result, "===="), M(a.result);
              } catch (a) {
                console.log(a);
              }
              V(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.receiptTitle.list, {
                params: { search: { active: !0 }, schoolId: j._id },
              });
              A(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                he.setFieldValue(
                  "receiptName",
                  null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })();
        }, [j._id]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.class.list);
              S(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                he.setFieldValue(
                  "class",
                  null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })();
        }, []);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              if (!he.values.class)
                return he.setFieldValue("section", ""), C([]);
              const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                params: { search: { class: he.values.class } },
              });
              C(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                he.setFieldValue(
                  "section",
                  (null === (e = t.result[0]) || void 0 === e
                    ? void 0
                    : e._id) || ""
                );
            } catch (t) {
              console.log(t);
            }
          })();
        }, [he.values.class]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e, t, a;
              if (!he.values.class || !he.values.receiptName)
                return f([]), void he.setFieldValue("feeMap", "");
              const { data: l } = await (0, Se.Jt)(ke.r.feeMap.list, {
                params: {
                  search: {
                    active: !0,
                    receiptTitle: he.values.receiptName,
                    class: he.values.class,
                  },
                  schoolId: j._id,
                },
              });
              f(
                null === l ||
                  void 0 === l ||
                  null === (e = l.result) ||
                  void 0 === e
                  ? void 0
                  : e.map((e) => ({ ...e, label: nr(e), value: e._id }))
              ),
                he.setFieldValue(
                  "feeMap",
                  null === l ||
                    void 0 === l ||
                    null === (t = l.result) ||
                    void 0 === t ||
                    null === (a = t[0]) ||
                    void 0 === a
                    ? void 0
                    : a._id
                );
            } catch (l) {
              console.log(l);
            }
          })();
        }, [he.values.receiptName, he.values.class, j]);
        (0, l.useEffect)(() => {
          (async () => {
            if (!he.values.feeMap || !he.values.class || !he.values.section)
              return I([]), void he.setFieldValue("student", "");
            try {
              var e;
              const t = {
                  feeMapId: he.values.feeMap,
                  classId: he.values.class,
                  sectionId: he.values.section,
                },
                { data: a } = await (0, Se.Jt)(ke.r.receipt.getStudentsList, {
                  params: { search: t, schoolId: j._id },
                });
              I(
                a.result.map((e) => ({
                  ...e,
                  label: ""
                    .concat(e.basicInfo.name, " | ")
                    .concat(e.academicInfo.rollNumber, " | ")
                    .concat(e.fatherInfo.name),
                  value: e._id,
                }))
              ),
                he.setFieldValue(
                  "student",
                  null === (e = a.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })();
        }, [he.values.feeMap, he.values.class, he.values.section]),
          (0, l.useEffect)(() => {
            var e, t;
            M(null),
              O(
                null === (e = y.find((e) => e._id === he.values.feeMap)) ||
                  void 0 === e ||
                  null === (t = e.installments[0]) ||
                  void 0 === t
                  ? void 0
                  : t._id
              );
          }, [he.values.student, he.values.feeMap]);
        const pe = (0, l.useMemo)(() => {
            var e;
            let t = T
                ? null === (e = T.feeMapCategories) || void 0 === e
                  ? void 0
                  : e.reduce((e, t) => e + parseFloat(t.amountPaid), 0)
                : 0,
              a = parseFloat(t) + parseFloat(L || 0) + parseFloat(H || 0),
              l = 0;
            return (
              Z &&
                (l =
                  "Percentage" === Z.format
                    ? (Number(Z.concession) / 100) * Number(a)
                    : Number(Z.concession)),
              parseFloat(t) + parseFloat(L || 0) + parseFloat(H || 0) - l
            );
          }, [T, L, H, Z]),
          je = (0, l.useMemo)(() => {
            var e;
            return T
              ? null === (e = T.feeMapCategories) || void 0 === e
                ? void 0
                : e.reduce((e, t) => e + parseFloat(t.amountPaid), 0)
              : 0;
          }, [T]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Collect Fees" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 1, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                columnSpacing: 1,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "receiptName",
                      formik: he,
                      label: "Select Receipt Name",
                      options: g,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: he,
                      label: "Select Class",
                      options: v,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: he,
                      label: "Select Section",
                      options: k,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "feeMap",
                      formik: he,
                      label: "Select Fee Map",
                      options: y,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "student",
                      formik: he,
                      label: "Select Students",
                      options: w,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center", marginTop: "10px" },
                    item: !0,
                    children: (0, re.jsx)(ht.A, {
                      loading: J,
                      onClick: he.handleSubmit,
                      size: "small",
                      variant: "contained",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            T
              ? (0, re.jsx)(ue.A, {
                  sx: {
                    padding: 1,
                    my: 3,
                    backgroundColor: (e) =>
                      "dark" === e.palette.mode
                        ? "rgba(255,255,255,0.2)"
                        : "whitesmoke",
                  },
                  children: (0, re.jsxs)(s.A, {
                    sx: {
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                    },
                    children: [
                      (0, re.jsxs)(s.A, {
                        children: [
                          (0, re.jsxs)(Ta.A, {
                            size: "small",
                            sx: { width: 300, mt: 1 },
                            required: !0,
                            children: [
                              (0, re.jsx)(Ma.A, {
                                id: "demo-simple-select-filled-label",
                                children: "Select Installment",
                              }),
                              (0, re.jsx)(Fa.A, {
                                size: "small",
                                labelId: "demo-simple-select-filled-label",
                                id: "demo-simple-select-filled",
                                name: "installmentId",
                                label: "Select Installment",
                                value:
                                  B ||
                                  (null === T ||
                                  void 0 === T ||
                                  null === (e = T.feeMap) ||
                                  void 0 === e
                                    ? void 0
                                    : e.installments[0]._id),
                                required: !0,
                                onChange: (e) => {
                                  O(e.target.value), he.handleSubmit();
                                },
                                children:
                                  null === T ||
                                  void 0 === T ||
                                  null === (t = T.feeMap) ||
                                  void 0 === t ||
                                  null === (a = t.installments) ||
                                  void 0 === a
                                    ? void 0
                                    : a.map((e, t) => {
                                        var a;
                                        return (0, re.jsxs)(
                                          D.A,
                                          {
                                            value: e._id,
                                            sx: {
                                              fontSize: 12,
                                              fontWeight: 500,
                                            },
                                            children: [
                                              t + 1,
                                              "-",
                                              e.amount,
                                              "-",
                                              null !== T &&
                                              void 0 !== T &&
                                              null !==
                                                (a = T.previousReceipts) &&
                                              void 0 !== a &&
                                              a.filter(
                                                (t) =>
                                                  t.installmentPaid == e._id
                                              )[0]
                                                ? "Paid"
                                                : "Not-Paid",
                                            ],
                                          },
                                          e._id
                                        );
                                      }),
                              }),
                            ],
                          }),
                          (0, re.jsxs)(u.A, {
                            sx: {
                              fontSize: "14px",
                              margin: "2px 0 0 0",
                              fontWeight: "bold",
                              color: (e) =>
                                "dark" === e.palette.mode ? "orange" : "red",
                            },
                            children: [
                              "Due Date :",
                              " ",
                              B
                                ? Be()(
                                    null === T ||
                                      void 0 === T ||
                                      null === (n = T.feeMap) ||
                                      void 0 === n ||
                                      null ===
                                        (i = n.installments.filter(
                                          (e) => e._id == B
                                        )[0]) ||
                                      void 0 === i
                                      ? void 0
                                      : i.dueDate
                                  )
                                    .toDate()
                                    .toLocaleDateString()
                                : null,
                            ],
                          }),
                        ],
                      }),
                      (0, re.jsxs)(s.A, {
                        children: [
                          (0, re.jsxs)(u.A, {
                            fontSize: "12px",
                            children: [
                              (0, re.jsx)("b", {
                                children:
                                  "Past Due (All Other Academic Years) :",
                              }),
                              " \u20b9",
                              " ",
                              (0, re.jsx)("span", {
                                children:
                                  null === T ||
                                  void 0 === T ||
                                  null === (o = T.pastDues) ||
                                  void 0 === o
                                    ? void 0
                                    : o.toFixed(2),
                              }),
                            ],
                          }),
                          (0, re.jsxs)(u.A, {
                            fontSize: "12px",
                            children: [
                              (0, re.jsx)("b", {
                                children: "Total Due (Current Academic Year) :",
                              }),
                              " \u20b9",
                              " ",
                              (0, re.jsx)("span", {
                                children:
                                  null === T ||
                                  void 0 === T ||
                                  null ===
                                    (r = T.totalDueForThisAcademicYear) ||
                                  void 0 === r
                                    ? void 0
                                    : r.toFixed(2),
                              }),
                            ],
                          }),
                          B &&
                            (0, re.jsxs)(u.A, {
                              fontSize: "12px",
                              children: [
                                (0, re.jsx)("b", {
                                  children:
                                    "Current Due (Current Academic Year) :",
                                }),
                                " \u20b9",
                                " ",
                                (0, re.jsx)("span", {
                                  children:
                                    null === T ||
                                    void 0 === T ||
                                    null === (d = T.currentDue) ||
                                    void 0 === d
                                      ? void 0
                                      : d.toFixed(2),
                                }),
                              ],
                            }),
                        ],
                      }),
                    ],
                  }),
                })
              : null,
            null !== T &&
            void 0 !== T &&
            null !== (c = T.previousReceipts) &&
            void 0 !== c &&
            c.length
              ? (0, re.jsxs)(ue.A, {
                  sx: { padding: "10px", margin: "10px 0" },
                  children: [
                    (0, re.jsxs)(u.A, {
                      fontSize: "14px",
                      mb: 2,
                      children: [
                        (0, re.jsx)("b", { children: "Previous Receipts:" }),
                        " PP - Partially Paid, PPD - Partial Payment Done, FP - Full Payment",
                      ],
                    }),
                    (0, re.jsx)(s.A, {
                      sx: {
                        display: "flex",
                        alignItems: "center",
                        marginRight: "10px",
                        columnGap: "5px",
                      },
                      children: T.previousReceipts.map((e) =>
                        (0, re.jsxs)(
                          ht.A,
                          {
                            loading: R === e._id,
                            size: "small",
                            variant: "outlined",
                            disabled: !!R,
                            onClick: (t) =>
                              (async (e, t) => {
                                e.preventDefault();
                                try {
                                  P(t);
                                  const e = await (0, Se.Jt)(
                                    ke.r.receipt.downloadReceipt + "/" + t,
                                    {
                                      validateStatus: (e) => e < 500,
                                      responseType: "blob",
                                    }
                                  );
                                  if (200 === e.status)
                                    Dl("application/pdf", e.data, "receipt");
                                  else {
                                    var a;
                                    const t = await new Response(e.data).text();
                                    Ba.oR.error(
                                      null === (a = JSON.parse(t)) ||
                                        void 0 === a
                                        ? void 0
                                        : a.message
                                    );
                                  }
                                } catch (l) {
                                  console.log(l);
                                }
                                P("");
                              })(t, e._id),
                            endIcon: (0, re.jsx)(Jl.A, {}),
                            children: [
                              Be()(e.paidAt).format("DD/MM/YYYY"),
                              "-",
                              e.partiallyPaid
                                ? e.partialPaymentCompleted
                                  ? "PPD"
                                  : "PP"
                                : "FP",
                            ],
                          },
                          e._id
                        )
                      ),
                    }),
                  ],
                })
              : null,
            T
              ? (0, re.jsxs)(na.A, {
                  component: ue.A,
                  children: [
                    (0, re.jsxs)(ia.A, {
                      size: "small",
                      children: [
                        (0, re.jsx)(sa.A, {
                          sx: {
                            backgroundColor: (e) => e.palette.primary.main,
                          },
                          children: (0, re.jsxs)(oa.A, {
                            children: [
                              (0, re.jsx)(ra.A, {
                                sx: { color: "white" },
                                align: "center",
                                children: "#SL",
                              }),
                              (0, re.jsx)(ra.A, {
                                sx: { color: "white" },
                                align: "center",
                                children: "Fee Particular",
                              }),
                              (0, re.jsx)(ra.A, {
                                sx: { color: "white" },
                                align: "center",
                                children: "Due Amount",
                              }),
                              (0, re.jsx)(ra.A, {
                                sx: { color: "white" },
                                align: "center",
                                children: "Collecting Amount",
                              }),
                            ],
                          }),
                        }),
                        (0, re.jsxs)(ca.A, {
                          children: [
                            null === T ||
                            void 0 === T ||
                            null === (m = T.feeMapCategories) ||
                            void 0 === m
                              ? void 0
                              : m.map((e, t) =>
                                  (0, re.jsxs)(
                                    oa.A,
                                    {
                                      children: [
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: t + 1,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: (0, re.jsx)(u.A, {
                                            children: e.name,
                                          }),
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: (0, re.jsxs)(u.A, {
                                            fontWeight: "bold",
                                            children: ["\u20b9 ", e.amount],
                                          }),
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: (0, re.jsx)(li, {
                                            disabled: !e.amount,
                                            type: "number",
                                            style: {
                                              maxWidth: "150px",
                                              margin: "4px 0",
                                            },
                                            value: e.amountPaid || "",
                                            label: "Amount",
                                            onChange: (t) =>
                                              ((e, t) => {
                                                var a;
                                                let l =
                                                  null ===
                                                    (a = T.feeMapCategories) ||
                                                  void 0 === a
                                                    ? void 0
                                                    : a.map((a) =>
                                                        a._id === t._id
                                                          ? {
                                                              ...a,
                                                              amountPaid:
                                                                e.target.value,
                                                            }
                                                          : a
                                                      );
                                                M({
                                                  ...T,
                                                  feeMapCategories: l,
                                                });
                                              })(t, e),
                                          }),
                                        }),
                                      ],
                                    },
                                    t
                                  )
                                ),
                            (0, re.jsxs)(oa.A, {
                              sx: {
                                backgroundColor: (e) =>
                                  "dark" === e.palette.mode
                                    ? "rgba(255,255,255,0.2)"
                                    : "whitesmoke",
                              },
                              children: [
                                (0, re.jsx)(ra.A, { align: "center" }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsx)(u.A, {
                                    sx: { fontWeight: "bold" },
                                    children: "Total",
                                  }),
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsxs)(u.A, {
                                    sx: { fontWeight: "bold" },
                                    children: [
                                      "\u20b9 ",
                                      null === T ||
                                      void 0 === T ||
                                      null === (x = T.currentDue) ||
                                      void 0 === x
                                        ? void 0
                                        : x.toFixed(2),
                                    ],
                                  }),
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsxs)(u.A, {
                                    sx: { fontWeight: "bold" },
                                    children: ["\u20b9 ", je],
                                  }),
                                }),
                              ],
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, re.jsxs)(ir, {
                      children: [
                        (0, re.jsxs)(b.A, {
                          direction: "row",
                          columnGap: 2,
                          children: [
                            (0, re.jsx)(li, {
                              type: "number",
                              name: "penalty",
                              value: L,
                              onChange: (e) => U(e.target.value),
                              label: "Penalty/Fine",
                              style: { marginBottom: "15px" },
                            }),
                            (0, re.jsx)(li, {
                              type: "number",
                              name: "miscellaneous",
                              value: H,
                              onChange: (e) => G(e.target.value),
                              label: "Miscellaneous",
                            }),
                          ],
                        }),
                        (0, re.jsxs)(s.A, {
                          sx: {
                            display: "flex",
                            columnGap: 2,
                            alignItems: "center",
                          },
                          children: [
                            (0, re.jsxs)(b.A, {
                              direction: "row",
                              columnGap: 2,
                              children: [
                                (0, re.jsx)(u.A, {
                                  sx: {
                                    textAlign: "center",
                                    fontWeight: "bold",
                                  },
                                  children: Z
                                    ? "Value" ===
                                      (null === Z || void 0 === Z
                                        ? void 0
                                        : Z.format)
                                      ? "Concession : \u20b9".concat(
                                          null === Z || void 0 === Z
                                            ? void 0
                                            : Z.concession
                                        )
                                      : "Concession : ".concat(
                                          null === Z || void 0 === Z
                                            ? void 0
                                            : Z.concession,
                                          "%"
                                        )
                                    : "",
                                }),
                                (0, re.jsx)($e.A, {
                                  color: "warning",
                                  onClick: () => {
                                    Z ? $(null) : Q(!0);
                                  },
                                  variant: "contained",
                                  size: "small",
                                  children: Z
                                    ? "remove concession"
                                    : "add concession",
                                }),
                              ],
                            }),
                            (0, re.jsx)($e.A, {
                              onClick: () => de(!0),
                              variant: "contained",
                              size: "small",
                              children: "collect fee",
                            }),
                          ],
                        }),
                      ],
                    }),
                  ],
                })
              : null,
            (0, re.jsx)(tr, {
              onSubmit: (e) => {
                $(e), Q(!1);
              },
              open: K,
              onClose: () => Q(!1),
            }),
            (0, re.jsx)(lr, {
              collectingFee: le,
              downloadingPreview: ie,
              onPreviewButtonClick: async (e, t) => {
                var a;
                se(!0);
                const l = {
                  penalty: L || 0,
                  miscellaneous: H || 0,
                  payingDate: te ? Be()(te).format("DD/MM/YYYY") : null,
                  note: X,
                  receiptTitleId: he.values.receiptName,
                  feeMapId: he.values.feeMap,
                  studentId: he.values.student,
                  paymentMode: e,
                  feeParticulars:
                    null === T ||
                    void 0 === T ||
                    null === (a = T.feeMapCategories) ||
                    void 0 === a
                      ? void 0
                      : a.filter((e) => e.amountPaid > 0),
                  installmentId: B,
                  concessionDetails: Z
                    ? {
                        amount: Z.concession,
                        referredBy: Z.refer,
                        givenAs: Z.format,
                      }
                    : {},
                  schoolId: j._id,
                };
                switch (e) {
                  case "Cash":
                    l.cashDetails = {};
                    break;
                  case "Cheque":
                    l.chequeDetails = {
                      bankName: t.bankName,
                      branchName: t.branchName,
                      chequeNumber: t.chequeNumber,
                      chequeDate: t.chequeDate,
                    };
                    break;
                  case "DD":
                    l.ddDetails = {
                      bankName: t.bankName,
                      branchName: t.branchName,
                    };
                    break;
                  case "Upi":
                    l.upiDetails = { upiApp: t.upiApp, utrNo: t.utrNo };
                    break;
                  case "Card":
                    l.cardDetails = {
                      bankName: t.bankName,
                      cardType: t.cardType,
                    };
                    break;
                  case "Netbanking":
                    l.netBankingDetails = {
                      bankName: t.bankName,
                      refNumber: t.refNumber,
                      paidByName: t.paidByName,
                    };
                }
                try {
                  const e = await (0, Se.bE)(ke.r.receipt.previewReceipt, l, {
                    responseType: "blob",
                    validateStatus: (e) => e < 500,
                  });
                  if (200 === e.status)
                    Dl("application/pdf", e.data, "Receipt_preview");
                  else {
                    var n;
                    const t = await new Response(e.data).text();
                    Ba.oR.error(
                      null === (n = JSON.parse(t)) || void 0 === n
                        ? void 0
                        : n.message
                    );
                  }
                } catch (i) {
                  console.error("Network error:", i);
                } finally {
                  se(!1);
                }
              },
              feeReceipt: T,
              onSubmit: async (e, t) => {
                var a;
                ne(!0);
                const l = {
                  penalty: L || 0,
                  miscellaneous: H || 0,
                  payingDate: te ? Be()(te).format("DD/MM/YYYY") : null,
                  note: X,
                  receiptTitleId: he.values.receiptName,
                  feeMapId: he.values.feeMap,
                  studentId: he.values.student,
                  paymentMode: e,
                  feeParticulars:
                    null === T ||
                    void 0 === T ||
                    null === (a = T.feeMapCategories) ||
                    void 0 === a
                      ? void 0
                      : a.filter((e) => e.amountPaid > 0),
                  installmentId: B,
                  concessionDetails: Z
                    ? {
                        amount: Z.concession,
                        referredBy: Z.refer,
                        givenAs: Z.format,
                      }
                    : {},
                  schoolId: j._id,
                };
                switch (e) {
                  case "Cash":
                    l.cashDetails = {};
                    break;
                  case "Cheque":
                    l.chequeDetails = {
                      bankName: t.bankName,
                      branchName: t.branchName,
                      chequeNumber: t.chequeNumber,
                      chequeDate: t.chequeDate,
                    };
                    break;
                  case "DD":
                    l.ddDetails = {
                      bankName: t.bankName,
                      branchName: t.branchName,
                    };
                    break;
                  case "Upi":
                    l.upiDetails = { upiApp: t.upiApp, utrNo: t.utrNo };
                    break;
                  case "Card":
                    l.cardDetails = {
                      bankName: t.bankName,
                      cardType: t.cardType,
                    };
                    break;
                  case "Netbanking":
                    l.netBankingDetails = {
                      bankName: t.bankName,
                      refNumber: t.refNumber,
                      paidByName: t.paidByName,
                    };
                }
                try {
                  const e = await (0, Se.bE)(ke.r.receipt.collectFees, l, {
                    responseType: "blob",
                    validateStatus: (e) => e < 500,
                  });
                  if (200 === e.status)
                    Dl("application/pdf", e.data, "Receipt_preview"),
                      me(),
                      he.handleSubmit(),
                      $(null),
                      U(""),
                      G("");
                  else {
                    var n;
                    const t = await new Response(e.data).text();
                    Ba.oR.error(
                      null === (n = JSON.parse(t)) || void 0 === n
                        ? void 0
                        : n.message
                    );
                  }
                } catch (i) {
                  console.error("Network error:", i);
                } finally {
                  ne(!1);
                }
              },
              open: oe,
              onClose: me,
              onUpdateNote: ee,
              payingAmount: pe,
              note: X,
              payingDate: te,
              setPayingDate: ae,
            }),
          ],
        });
      }
      const or = [
          { name: "Receipt", key: "receiptTitle" },
          { name: "Roll No", key: "rollNo" },
          { name: "Class", key: "class" },
          { name: "Section", key: "section" },
          { name: "Name", key: "name" },
          { name: "Father", key: "fatherName" },
          { name: "Phone", key: "phone" },
          { name: "Amount", key: "amount" },
          { name: "Concession", key: "concession" },
          { name: "Fine", key: "fine" },
          { name: "Miscellaneous", key: "miscellaneous" },
          { name: "Paid", key: "paid" },
          { name: "Balance", key: "balance" },
        ],
        rr = (e) => {
          let t = [];
          for (let s of e.dependencies)
            if (["class"].includes(s)) {
              var a;
              let l = "[".concat(
                null === (a = e.class) || void 0 === a ? void 0 : a.name,
                "]-Class"
              );
              t.push(l);
            } else if (["classOld"].includes(s)) {
              var l;
              let a = "[".concat(
                null === (l = e.class) || void 0 === l ? void 0 : l.name,
                "]-Class-Old"
              );
              t.push(a);
            } else if (["classNew"].includes(s)) {
              var n;
              let a = "[".concat(
                null === (n = e.class) || void 0 === n ? void 0 : n.name,
                "]-Class-New"
              );
              t.push(a);
            } else if ("hostel" === s) {
              var i;
              let a = "[".concat(
                null === (i = e.hostel) || void 0 === i ? void 0 : i.name,
                "]-Hostel"
              );
              t.push(a);
            } else if ("transport" == s) {
              let a = "["
                .concat(e.route.vehicle.number, "]+[")
                .concat(e.route.title, "]-Transport-[")
                .concat(e.stop.name, "]-Stop-[")
                .concat(e.pickType, "]-Pick_Type");
              t.push(a);
            } else if ("pickType" == s) {
              let a = "[".concat(e.pickType, "]-Pick_Type");
              t.push(a);
            }
          return t.join(" | ");
        };
      function dr() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          [m, u] = (0, l.useState)([]),
          [x, h] = (0, l.useState)([]),
          [p, j] = (0, l.useState)(!1),
          [g, A] = (0, l.useState)(!1),
          y = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              receiptName: "",
              feeMap: "",
              class: "",
              section: "",
            },
            onSubmit: async (t) => {
              console.log(t, "values"), j(!0);
              try {
                const { data: l, status: n } = await (0, Se.Jt)(
                  ke.r.receipt.getBalanceFeeReport,
                  {
                    params: {
                      classId: t.class,
                      sectionId: t.section,
                      feeMapId: t.feeMap,
                      academicYearId: t.academicYear,
                      schoolId: e._id,
                    },
                  }
                );
                a(l.result);
              } catch (l) {
                console.log(l);
              }
              j(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              y.setFieldValue("academicYear", e.result[0]._id),
                i(
                  e.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                );
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                var t;
                const { data: a } = await (0, Se.Jt)(ke.r.receiptTitle.list, {
                  params: { search: { active: !0 }, schoolId: e._id },
                });
                r(a.result.map((e) => ({ label: e.name, value: e._id }))),
                  y.setFieldValue(
                    "receiptName",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                c(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  y.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e._id]),
          (0, l.useEffect)(() => {
            y.values.class &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: y.values.class },
                    },
                  });
                  y.setFieldValue(
                    "section",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  ),
                    u(
                      a.result.map((e) => ({
                        ...e,
                        label: e.name,
                        value: e._id,
                      }))
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [y.values.class]),
          (0, l.useEffect)(() => {
            y.values.receiptName &&
              y.values.class &&
              (async () => {
                try {
                  var t, a;
                  const { data: l } = await (0, Se.Jt)(ke.r.feeMap.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        active: !0,
                        class: y.values.class,
                        receiptTitle: y.values.receiptName,
                      },
                    },
                  });
                  h(
                    null === l ||
                      void 0 === l ||
                      null === (t = l.result) ||
                      void 0 === t
                      ? void 0
                      : t.map((e) => ({ ...e, label: rr(e), value: e._id }))
                  ),
                    y.setFieldValue(
                      "feeMap",
                      null === (a = l.result[0]) || void 0 === a
                        ? void 0
                        : a._id
                    );
                } catch (l) {
                  console.error(l);
                }
              })();
          }, [y.values.receiptName, y.values.class, e._id]),
          (0, l.useEffect)(() => {
            a([]);
          }, [y.values.feeMap, e._id]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Balance Fee Report" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: y,
                      label: "Select Academic Year",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "receiptName",
                      formik: y,
                      label: "Select Receipt Name",
                      options: o,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: y,
                      label: "Select Class",
                      options: d,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: y,
                      label: "Select Section",
                      options: m,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "feeMap",
                      formik: y,
                      label: "Select Fee Map",
                      options: x,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center", marginTop: "10px" },
                    item: !0,
                    children: (0, re.jsx)(ht.A, {
                      size: "small",
                      variant: "contained",
                      loading: p,
                      onClick: y.handleSubmit,
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: [],
              bodyDataModal: "Balance Fee Report",
              bodyData: t,
              tableKeys: or,
            }),
            t.length > 0 &&
              (0, re.jsx)(re.Fragment, {
                children: (0, re.jsx)(s.A, {
                  style: {
                    display: "flex",
                    justifyContent: "flex-end",
                    alignItems: "center",
                  },
                  children: (0, re.jsx)(ht.A, {
                    loading: g,
                    onClick: async () => {
                      A(!0);
                      const t = y.values;
                      try {
                        const l = await (0, Se.Jt)(
                          ke.r.receipt.downloadBalanceFeeReport,
                          {
                            params: {
                              classId: t.class,
                              sectionId: t.section,
                              feeMapId: t.feeMap,
                              academicYearId: t.academicYear,
                              schoolId: e._id,
                            },
                            validateStatus: (e) => e < 500,
                            responseType: "blob",
                          }
                        );
                        if (200 === l.status)
                          Dl(
                            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            l.data,
                            "Balance_Report.xlsx"
                          );
                        else {
                          var a;
                          const e = await new Response(l.data).text();
                          Ba.oR.error(
                            null === (a = JSON.parse(e)) || void 0 === a
                              ? void 0
                              : a.message
                          );
                        }
                      } catch (l) {
                        console.log(l);
                      }
                      A(!1);
                    },
                    size: "small",
                    variant: "contained",
                    color: "primary",
                    sx: { mt: 3 },
                    children: "DOWNLOAD",
                  }),
                }),
              }),
          ],
        });
      }
      const cr = [
          { name: "Payment", key: "payment" },
          { name: "Total", key: "total" },
          { name: "Cash", key: "cash" },
          { name: "Cheque", key: "cheque" },
          { name: "DD", key: "dd" },
          { name: "Chalan", key: "chalan" },
          { name: "NetBanking", key: "netBanking" },
          { name: "Online", key: "online" },
        ],
        mr = [
          { name: "Receipt No", key: "receiptNo" },
          { name: "Paid Date", key: "paidDate" },
          { name: "Amount", key: "amount" },
          { name: "Payment Mode", key: "paymentMode" },
          { name: "Name", key: "name" },
          { name: "Class", key: "class" },
          { name: "Section", key: "section" },
          { name: "Admission No", key: "admissionNo" },
          { name: "View", key: "view" },
        ],
        ur = (e) => {
          let t = [];
          for (let s of e.dependencies)
            if (["class"].includes(s)) {
              var a;
              let l = "[".concat(
                null === (a = e.class) || void 0 === a ? void 0 : a.name,
                "]-Class"
              );
              t.push(l);
            } else if (["classOld"].includes(s)) {
              var l;
              let a = "[".concat(
                null === (l = e.class) || void 0 === l ? void 0 : l.name,
                "]-Class-Old"
              );
              t.push(a);
            } else if (["classNew"].includes(s)) {
              var n;
              let a = "[".concat(
                null === (n = e.class) || void 0 === n ? void 0 : n.name,
                "]-Class-New"
              );
              t.push(a);
            } else if ("hostel" === s) {
              var i;
              let a = "[".concat(
                null === (i = e.hostel) || void 0 === i ? void 0 : i.name,
                "]-Hostel"
              );
              t.push(a);
            } else if ("transport" == s) {
              let a = "["
                .concat(e.route.vehicle.number, "]+[")
                .concat(e.route.title, "]-Transport-[")
                .concat(e.stop.name, "]-Stop-[")
                .concat(e.pickType, "]-Pick_Type");
              t.push(a);
            } else if ("pickType" == s) {
              let a = "[".concat(e.pickType, "]-Pick_Type");
              t.push(a);
            }
          return t.join(" | ");
        };
      function xr() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)([]),
          j = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              collected: "",
              feeReceipt: "",
              feeMap: "",
              class: "",
              section: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: console.log("nnnn"),
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                j.setFieldValue("academicYear", e.result[0]._id),
                  i(
                    e.result.map((e) => ({
                      ...e,
                      label: "".concat(e.from, "-").concat(e.to),
                      value: e._id,
                    }))
                  );
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.receiptTitle.list, {
                    params: { schoolId: e._id },
                  });
                  o(a.result.map((e) => ({ label: e.name, value: e._id }))),
                    j.setFieldValue(
                      "feeReceipt",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })(),
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  });
                  d(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    j.setFieldValue("class", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })(),
              (async () => {
                try {
                  var t, a;
                  const { data: l } = await (0, Se.Jt)(ke.r.role.list, {
                    params: {
                      search: {
                        $or: [
                          { roleName: "ACCOUNTANT" },
                          { roleName: "SUPER ADMIN" },
                          { roleName: "ADMIN" },
                        ],
                      },
                      schoolId: e._id,
                    },
                  });
                  j.setFieldValue(
                    "collected",
                    null === (t = l.result[0]) || void 0 === t ? void 0 : t._id
                  );
                  const n = await (0, Se.Jt)(ke.r.employee.list, {
                    params: {
                      search: { role: j.values.collected },
                      schoolId: e._id,
                    },
                  });
                  p(
                    null === n ||
                      void 0 === n ||
                      null === (a = n.data) ||
                      void 0 === a
                      ? void 0
                      : a.result.map((e) => {
                          var t;
                          return {
                            ...e,
                            label:
                              null === (t = e.role) || void 0 === t
                                ? void 0
                                : t.name,
                            value: null === e || void 0 === e ? void 0 : e._id,
                          };
                        })
                  );
                } catch (l) {
                  console.log(l);
                }
              })();
          }, [e._id]),
          (0, l.useEffect)(() => {
            j.values.class &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: j.values.class },
                    },
                  });
                  j.setFieldValue(
                    "section",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  ),
                    m(
                      a.result.map((e) => ({
                        ...e,
                        label: e.name,
                        value: e._id,
                      }))
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [j.values.class, e]),
          (0, l.useEffect)(() => {
            j.values.class &&
              j.values.feeReceipt &&
              (async () => {
                try {
                  var t, a;
                  const { data: l } = await (0, Se.Jt)(ke.r.feeMap.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        active: !0,
                        class: j.values.class,
                        receiptTitle: j.values.receiptName,
                      },
                    },
                  });
                  x(
                    null === l ||
                      void 0 === l ||
                      null === (t = l.result) ||
                      void 0 === t
                      ? void 0
                      : t.map((e) => ({ ...e, label: ur(e), value: e._id }))
                  ),
                    j.setFieldValue(
                      "feeMap",
                      null === (a = l.result[0]) || void 0 === a
                        ? void 0
                        : a._id
                    );
                } catch (l) {
                  console.error(l);
                }
              })();
          }, [j.values.class, j.values.feeReceipt, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Fee Overview" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 3 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  sx: { display: "flex", alignItems: "center", mb: 1 },
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "academicYear",
                        formik: j,
                        label: "Select Academic Year",
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "collected",
                        formik: j,
                        label: "Select Collected By",
                        options: h,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "feeReceipt",
                        formik: j,
                        label: "Select Fee Receipt",
                        options: s,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: j,
                        label: "Select Class",
                        options: r,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: j,
                        label: "Select Section",
                        options: c,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "feeMap",
                        formik: j,
                        label: "Select Fee Map",
                        options: u,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: j,
                        name: "fromDate",
                        label: "From Date",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: j,
                        name: "toDate",
                        label: "To Date",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)($e.A, {
                        variant: "contained",
                        children: "Find",
                      }),
                    }),
                  ],
                }),
              }),
              (0, re.jsx)(jt.A, {
                actions: [],
                bodyDataModal: "data",
                bodyData: t,
                tableKeys: cr,
              }),
              (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                sx: { display: "flex", alignItems: "center", my: 1 },
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "addmisionNo",
                      formik: j,
                      label: "Select Addmision No",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "search",
                      label: "Search...",
                    }),
                  }),
                ],
              }),
              (0, re.jsx)(jt.A, {
                actions: [],
                bodyDataModal: "data",
                bodyData: t,
                tableKeys: mr,
              }),
            ],
          })
        );
      }
      const hr = [
        { name: "Receipt Number", key: "receiptNumber" },
        { name: "Name", key: "name" },
        { name: "Roll No", key: "roleNo" },
        { name: "Amount", key: "amountPaid" },
        { name: "Bank Name", key: "bankName" },
        { name: "Bank Branch", key: "branchName" },
        { name: "Cheque Number", key: "chequeNumber" },
        { name: "Date", key: "chequeDate", isDate: !0 },
      ];
      function pr() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]);
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(
                  ke.r.receipt.getReceiptsPaidWithCheque,
                  { params: { schoolId: e._id } }
                );
                a(
                  t.result.map((e) => {
                    var t, a, l, n, i, s;
                    return {
                      ...e,
                      roleNo:
                        null === e ||
                        void 0 === e ||
                        null === (t = e.payeeDetails) ||
                        void 0 === t
                          ? void 0
                          : t.rollNumber,
                      name:
                        null === e ||
                        void 0 === e ||
                        null === (a = e.payeeDetails) ||
                        void 0 === a
                          ? void 0
                          : a.name,
                      bankName:
                        null === e ||
                        void 0 === e ||
                        null === (l = e.chequeDetails) ||
                        void 0 === l
                          ? void 0
                          : l.bankName,
                      branchName:
                        null === e ||
                        void 0 === e ||
                        null === (n = e.chequeDetails) ||
                        void 0 === n
                          ? void 0
                          : n.branchName,
                      chequeNumber:
                        null === e ||
                        void 0 === e ||
                        null === (i = e.chequeDetails) ||
                        void 0 === i
                          ? void 0
                          : i.chequeNumber,
                      chequeDate:
                        null === e ||
                        void 0 === e ||
                        null === (s = e.chequeDetails) ||
                        void 0 === s
                          ? void 0
                          : s.chequeDate,
                    };
                  })
                );
              } catch (t) {
                console.log(t);
              }
            })();
          }, [e._id]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Fee Reconciliation" }),
              (0, re.jsx)(jt.A, {
                actions: [],
                bodyDataModal: "Fee Reconciliation",
                bodyData: t,
                tableKeys: hr,
              }),
            ],
          })
        );
      }
      const jr = [
          { name: "Hostel Name", key: "name" },
          { name: "Hostel Type", key: "type" },
          { name: "Address", key: "address" },
        ],
        gr = (0, n.Ay)(oa.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            color: a ? "#fff" : "#000",
            "&:nth-of-type(odd)": {
              backgroundColor: a ? "transparent" : "#F0F8FF",
            },
          };
        }),
        Ar = (0, n.Ay)(ra.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            border: "1px solid gray",
            color: a ? "#fff" : "#000",
            ["&.".concat(va.A.head)]: {
              backgroundColor: a ? "transparent" : "blue",
              color: a ? "#fff" : "#000",
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        });
      function yr(e) {
        let {
          title: t = "",
          onClose: a = () => {},
          open: n = !0,
          tableData: i,
          schoolName: s,
        } = e;
        const { isDarkMode: o } = (0, l.useContext)(st.A);
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(ka, {
            title: t,
            onClose: a,
            open: n,
            children: (0, re.jsx)(ia.A, {
              "aria-label": "customized table",
              children: (0, re.jsxs)(ca.A, {
                children: [
                  (0, re.jsxs)(gr, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(Ar, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "School Name",
                      }),
                      (0, re.jsx)(Ar, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children: s,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(gr, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(Ar, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Hostel Name",
                      }),
                      (0, re.jsx)(Ar, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children: null === i || void 0 === i ? void 0 : i.name,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(gr, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsxs)(Ar, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: ["Hostel Type", " "],
                      }),
                      (0, re.jsx)(Ar, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children: null === i || void 0 === i ? void 0 : i.type,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(gr, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(Ar, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Address",
                      }),
                      (0, re.jsx)(Ar, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children:
                          null === i || void 0 === i ? void 0 : i.address,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(gr, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(Ar, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Note",
                      }),
                      (0, re.jsx)(Ar, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children: null === i || void 0 === i ? void 0 : i.note,
                      }),
                    ],
                  }),
                  (0, re.jsxs)(gr, {
                    isDarkMode: o,
                    children: [
                      (0, re.jsx)(Ar, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        isDarkMode: o,
                        children: "Created",
                      }),
                      (0, re.jsx)(Ar, {
                        align: "left",
                        width: 100,
                        isDarkMode: o,
                        children:
                          null === i || void 0 === i ? void 0 : i.createdAt,
                      }),
                    ],
                  }),
                ],
              }),
            }),
          }),
        });
      }
      const fr = [
        { label: "Boys", value: "Boys" },
        { label: "Girls", value: "Girls" },
        { label: "Combined", value: "Combined" },
      ];
      function vr() {
        var e;
        const { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)([]),
          [o, r] = (0, l.useState)(!1),
          [d, c] = (0, l.useState)(!1),
          [m, u] = (0, l.useState)(null),
          [x, h] = (0, l.useState)({
            open: !1,
            tableData: "",
            action: () => {},
          }),
          p = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.hostel.list);
              n(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          p(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.employee.list, {
                    params: { schoolId: t._id },
                  }),
                  a = e.result.filter((e) => "WARDEN" === e.role.name);
                s(
                  a.map((e) => ({
                    ...e,
                    label: e.basicInfo.name,
                    value: e._id,
                  }))
                );
              } catch (e) {
                console.log(e);
              }
            })();
        }, [t]);
        const j = (0, et.Wx)({
            initialValues: {
              name: (null === m || void 0 === m ? void 0 : m.name) || "",
              type: (null === m || void 0 === m ? void 0 : m.type) || "",
              warden:
                (null === m ||
                void 0 === m ||
                null === (e = m.warden) ||
                void 0 === e
                  ? void 0
                  : e._id) || "",
              address: (null === m || void 0 === m ? void 0 : m.address) || "",
              contactNumber:
                (null === m || void 0 === m ? void 0 : m.contactNumber) || "",
              note: (null === m || void 0 === m ? void 0 : m.note) || "",
            },
            onSubmit: async (e) => {
              try {
                if ((c(!0), m)) {
                  const { data: t } = await (0, Se.yJ)(
                    ke.r.hostel.update + "/" + m._id,
                    e
                  );
                } else {
                  const { data: t } = await (0, Se.bE)(ke.r.hostel.create, e);
                }
                u(null), g();
              } catch (t) {
                console.log(t), c(!1);
              }
              c(!1);
            },
            enableReinitialize: !0,
          }),
          g = () => {
            r(!1), p(), u(null);
          };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Hostel" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete", "view"],
              tableKeys: jr,
              bodyDataModal: "hostel",
              bodyData: a,
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.yH)(
                    ke.r.hostel.delete + "/" + e
                  );
                  p();
                } catch (t) {
                  console.log(t);
                }
              },
              onEditClick: (e) => {
                r(!0), u(e);
              },
              onViewClick: (e) => {
                console.log(e, "vvvvvb"),
                  h({
                    ...x,
                    open: !0,
                    tableData: e,
                    schoolName: null === t || void 0 === t ? void 0 : t.name,
                  });
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Hostel",
              onAddClick: () => {
                r(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: o,
              formik: j,
              formTitle: m ? "Update Hostel" : "Add Hostel",
              onClose: g,
              submitButtonTitle: m ? "Update" : "Submit",
              adding: d,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "name",
                      label: "Hostel Name",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "contactNumber",
                      label: "Phone No.",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: j,
                      name: "type",
                      label: "Hostel Type",
                      required: !0,
                      options: fr,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: j,
                      name: "warden",
                      label: "Select Warden",
                      required: !0,
                      options: i,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "address",
                      label: "Address",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: j,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(yr, {
              title: "Hostel Information",
              open: null === x || void 0 === x ? void 0 : x.open,
              tableData: null === x || void 0 === x ? void 0 : x.tableData,
              schoolName: null === x || void 0 === x ? void 0 : x.schoolName,
              onClose: () => {
                h({ ...x, open: !1 });
              },
            }),
          ],
        });
      }
      const br = [
        { name: "Room Name", key: "name" },
        { name: "Specification", key: "specification" },
      ];
      function Sr() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(null),
          [s, o] = (0, l.useState)(!1),
          [r, d] = (0, l.useState)(!1),
          c = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.roomType.list);
              a(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          c();
        }, [e]);
        const m = (0, et.Wx)({
            initialValues: {
              name: (null === n || void 0 === n ? void 0 : n.name) || "",
              specification:
                (null === n || void 0 === n ? void 0 : n.specification) || "",
            },
            onSubmit: async (e) => {
              try {
                if ((o(!0), n)) {
                  const { data: t } = await (0, Se.yJ)(
                    ke.r.roomType.update + "/" + n._id,
                    e
                  );
                } else {
                  const { data: t } = await (0, Se.bE)(ke.r.roomType.create, e);
                }
                o(!1), c(), u();
              } catch (t) {
                console.log(t), o(!1);
              }
            },
            enableReinitialize: !0,
          }),
          u = () => {
            d(!1), i(null);
          };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Hostel Room Type" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: br,
              bodyDataModal: "room",
              bodyData: t,
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.yH)(
                    ke.r.roomType.delete + "/" + e
                  );
                  c();
                } catch (t) {
                  console.log(t);
                }
              },
              onEditClick: (e) => {
                console.log(e, "iiii"), d(!0), i(e);
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Room Type",
              onAddClick: () => {
                d(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: r,
              formik: m,
              formTitle: n ? "Update Room Type" : "Add Room Type",
              onClose: u,
              submitButtonTitle: n ? "Update" : "Submit",
              adding: s,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: m,
                      name: "name",
                      label: "Name",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: m,
                      name: "specification",
                      label: "Specification",
                      required: !0,
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const kr = [
          { name: "Room no", key: "number" },
          { name: "Room Type", key: "roomType" },
          { name: "Total Seat", key: "totalBeds" },
          { name: "Hostel Name", key: "hostelName" },
        ],
        Cr = (0, n.Ay)(oa.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            color: a ? "#fff" : "#000",
            "&:nth-of-type(odd)": {
              backgroundColor: a ? "transparent" : "#F0F8FF",
            },
          };
        }),
        Dr = (0, n.Ay)(ra.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "300px",
            border: "1px solid gray",
            color: a ? "#fff" : "#000",
            ["&.".concat(va.A.head)]: {
              backgroundColor: a ? "transparent" : "blue",
              color: a ? "#fff" : "#000",
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        });
      function wr(e) {
        var t;
        let {
          title: a = "",
          onClose: n = () => {},
          open: i = !0,
          tableData: o,
          schoolName: r,
        } = e;
        const { isDarkMode: d } = (0, l.useContext)(st.A);
        return (
          console.log(o, "tableData"),
          (0, re.jsx)(re.Fragment, {
            children: (0, re.jsx)(ka, {
              title: a,
              onClose: n,
              open: i,
              children: (0, re.jsx)(ia.A, {
                "aria-label": "customized table",
                children: (0, re.jsxs)(ca.A, {
                  children: [
                    (0, re.jsxs)(Cr, {
                      isDarkMode: d,
                      children: [
                        (0, re.jsx)(Dr, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          isDarkMode: d,
                          children: "School Name",
                        }),
                        (0, re.jsx)(Dr, {
                          align: "left",
                          width: 100,
                          isDarkMode: d,
                          children: r,
                        }),
                      ],
                    }),
                    (0, re.jsxs)(Cr, {
                      isDarkMode: d,
                      children: [
                        (0, re.jsx)(Dr, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          isDarkMode: d,
                          children: "Room No",
                        }),
                        (0, re.jsx)(Dr, {
                          align: "left",
                          width: 100,
                          isDarkMode: d,
                          children:
                            null === o || void 0 === o ? void 0 : o.number,
                        }),
                      ],
                    }),
                    (0, re.jsxs)(Cr, {
                      isDarkMode: d,
                      children: [
                        (0, re.jsx)(Dr, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          isDarkMode: d,
                          children: "Seat Total",
                        }),
                        (0, re.jsx)(Dr, {
                          align: "left",
                          width: 100,
                          isDarkMode: d,
                          children:
                            null === o || void 0 === o ? void 0 : o.totalBeds,
                        }),
                      ],
                    }),
                    (0, re.jsxs)(Cr, {
                      isDarkMode: d,
                      children: [
                        (0, re.jsx)(Dr, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          isDarkMode: d,
                          children: "Bed",
                        }),
                        (0, re.jsx)(Dr, {
                          align: "left",
                          width: 100,
                          isDarkMode: d,
                          children:
                            null === o ||
                            void 0 === o ||
                            null === (t = o.beds) ||
                            void 0 === t
                              ? void 0
                              : t.map((e) =>
                                  (0, re.jsxs)(
                                    s.A,
                                    {
                                      sx: {
                                        width: "100%",
                                        display: "flex",
                                        flexDirection: "column",
                                        my: 1,
                                      },
                                      children: [
                                        (0, re.jsxs)(Cr, {
                                          isDarkMode: d,
                                          children: [
                                            (0, re.jsx)(Dr, {
                                              align: "left",
                                              sx: { fontWeight: "bold" },
                                              isDarkMode: d,
                                              children: "Bed Name",
                                            }),
                                            (0, re.jsx)(Dr, {
                                              align: "left",
                                              width: 100,
                                              isDarkMode: d,
                                              children:
                                                (null === e || void 0 === e
                                                  ? void 0
                                                  : e.name) || "NA",
                                            }),
                                          ],
                                        }),
                                        (0, re.jsxs)(Cr, {
                                          isDarkMode: d,
                                          children: [
                                            (0, re.jsx)(Dr, {
                                              align: "left",
                                              sx: { fontWeight: "bold" },
                                              isDarkMode: d,
                                              children: "Bed Position",
                                            }),
                                            (0, re.jsx)(Dr, {
                                              align: "left",
                                              width: 100,
                                              isDarkMode: d,
                                              children:
                                                (null === e || void 0 === e
                                                  ? void 0
                                                  : e.position) || "NA",
                                            }),
                                          ],
                                        }),
                                        (0, re.jsxs)(Cr, {
                                          isDarkMode: d,
                                          children: [
                                            (0, re.jsx)(Dr, {
                                              align: "left",
                                              sx: {
                                                fontWeight: 600,
                                                width: "200px",
                                              },
                                              isDarkMode: d,
                                              children: "Bed Allocated",
                                            }),
                                            (0, re.jsx)(Dr, {
                                              align: "left",
                                              width: 100,
                                              isDarkMode: d,
                                              children:
                                                null !== e &&
                                                void 0 !== e &&
                                                e.allocated
                                                  ? "Yes"
                                                  : "No",
                                            }),
                                          ],
                                        }),
                                      ],
                                    },
                                    e.name
                                  )
                                ),
                        }),
                      ],
                    }),
                    (0, re.jsxs)(Cr, {
                      isDarkMode: d,
                      children: [
                        (0, re.jsx)(Dr, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          isDarkMode: d,
                          children: "Note",
                        }),
                        (0, re.jsx)(Dr, {
                          align: "left",
                          width: 100,
                          isDarkMode: d,
                          children:
                            null === o || void 0 === o ? void 0 : o.note,
                        }),
                      ],
                    }),
                    (0, re.jsxs)(Cr, {
                      isDarkMode: d,
                      children: [
                        (0, re.jsx)(Dr, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          isDarkMode: d,
                          children: "Created",
                        }),
                        (0, re.jsx)(Dr, {
                          align: "left",
                          width: 100,
                          isDarkMode: d,
                          children:
                            null === o || void 0 === o ? void 0 : o.createdAt,
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
          })
        );
      }
      function Ir() {
        var e, t;
        const { selectedSetting: a } = (0, l.useContext)(Ce.A),
          { isDarkMode: n } = (0, l.useContext)(st.A),
          [i, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [x, h] = (0, l.useState)(!1),
          [p, j] = (0, l.useState)(null),
          [g, A] = (0, l.useState)(!1),
          [y, f] = (0, l.useState)(!1),
          [v, b] = (0, l.useState)(!1),
          [S, k] = (0, l.useState)({
            open: !1,
            tableData: "",
            action: () => {},
          }),
          C = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.room.list);
              o(
                e.result.map((e) => {
                  var t, a;
                  return {
                    ...e,
                    hostelName:
                      null === e ||
                      void 0 === e ||
                      null === (t = e.hostel) ||
                      void 0 === t
                        ? void 0
                        : t.name,
                    roomType:
                      null === (a = e.type) || void 0 === a ? void 0 : a.name,
                  };
                })
              );
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          C(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.roomType.list);
                d(e.result.map((e) => ({ label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.hostel.list);
                m(e.result.map((e) => ({ label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })();
        }, [a]);
        const D = (0, et.Wx)({
            initialValues: {
              number: (null === p || void 0 === p ? void 0 : p.number) || "",
              type:
                (null === p ||
                void 0 === p ||
                null === (e = p.type) ||
                void 0 === e
                  ? void 0
                  : e._id) || "",
              totalBeds:
                (null === p || void 0 === p ? void 0 : p.totalBeds) || 0,
              hostel:
                (null === p ||
                void 0 === p ||
                null === (t = p.hostel) ||
                void 0 === t
                  ? void 0
                  : t._id) || "",
              note: (null === p || void 0 === p ? void 0 : p.note) || "",
              beds: (null === p || void 0 === p ? void 0 : p.beds) || [
                { id: 1, name: "", position: "", allocated: !1 },
              ],
            },
            onSubmit: async (e) => {
              try {
                if ((h(!0), p)) {
                  delete e.beds;
                  const { data: t } = await (0, Se.yJ)(
                    ke.r.room.update + "/" + p._id,
                    e
                  );
                } else {
                  let t = { ...e, totalBeds: e.beds.length };
                  const { data: a } = await (0, Se.bE)(ke.r.room.create, t);
                }
                w(), C(), h(!1);
              } catch (t) {
                console.log(t), h(!1);
              }
            },
            enableReinitialize: !0,
          }),
          w = () => {
            b(!1), j(null), D.resetForm();
          },
          I = (e, t) => {
            D.setFieldValue(
              "beds",
              D.values.beds.map((a) =>
                a.id === t.id ? { ...a, [e.target.name]: e.target.value } : a
              )
            );
          };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Hostel Room & Beds" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete", "view"],
              tableKeys: kr,
              bodyDataModal: "room",
              bodyData: i,
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.yH)(
                    ke.r.room.delete + "/" + e
                  );
                  C();
                } catch (t) {
                  console.log(t);
                }
              },
              onEditClick: (e) => {
                b(!0), j(e);
              },
              onViewClick: (e) => {
                k({ ...S, open: !0, tableData: e, schoolName: a.name }), C();
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Room & Bed",
              onAddClick: () => {
                b(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: v,
              formik: D,
              formTitle: p ? "Update Room & Bed" : "Add Room & Bed",
              onClose: w,
              submitButtonTitle: p ? "Update" : "Submit",
              adding: x,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: D,
                      name: "number",
                      label: "Room No.",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: D,
                      name: "type",
                      label: "Room Type",
                      required: !0,
                      options: r,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: D,
                      name: "hostel",
                      label: "Hostel Name",
                      required: !0,
                      options: c,
                    }),
                  }),
                  (0, re.jsxs)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: [
                      (0, re.jsxs)(s.A, {
                        style: {
                          display: "flex",
                          justifyContent: "space-between",
                          padding: "10px",
                          alignItems: "center",
                          fontSize: "14px",
                          fontWeight: "bold",
                        },
                        children: [
                          (0, re.jsx)(u.A, { children: "Bed Name" }),
                          (0, re.jsx)(u.A, { children: "Bed Position" }),
                          (0, re.jsx)(u.A, { children: "Is Alloted" }),
                        ],
                      }),
                      D.values.beds.map((e, t) =>
                        (0, re.jsxs)(
                          xe.Ay,
                          {
                            container: !0,
                            gap: 1,
                            sx: {
                              backgroundColor: n ? "transparent" : "#F0F8FF",
                              borderRadius: "5px",
                              padding: "20px 15px 30px 15px",
                              border: "1px solid lightgrey",
                              my: 2,
                            },
                            children: [
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 4,
                                md: 4,
                                item: !0,
                                children: (0, re.jsx)(li, {
                                  value:
                                    null === e || void 0 === e
                                      ? void 0
                                      : e.name,
                                  name: "name",
                                  label: "Bed Name",
                                  required: !0,
                                  onChange: (t) => I(t, e),
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 4,
                                md: 4,
                                item: !0,
                                children: (0, re.jsx)(li, {
                                  value:
                                    null === e || void 0 === e
                                      ? void 0
                                      : e.position,
                                  name: "position",
                                  label: "Bed Position",
                                  required: !0,
                                  onChange: (t) => I(t, e),
                                }),
                              }),
                              (0, re.jsxs)(xe.Ay, {
                                xs: 12,
                                sm: 3,
                                md: 3,
                                item: !0,
                                sx: {
                                  fontSize: 16,
                                  display: "flex",
                                  alignItems: "center",
                                  justifyContent: "flex-end",
                                },
                                children: [
                                  (0, re.jsx)($e.A, {
                                    onClick: () =>
                                      (() => {
                                        let e = [...D.values.beds],
                                          t = {
                                            id: e.length + 1,
                                            name: "",
                                            position: "",
                                            allocated: !1,
                                          };
                                        D.setFieldValue("beds", [...e, t]);
                                      })(),
                                    children: (0, re.jsx)(ot.A, {}),
                                  }),
                                  (0, re.jsx)($e.A, {
                                    color: "error",
                                    onClick: () =>
                                      ((e) => {
                                        let t = [...D.values.beds];
                                        t.splice(e, 1),
                                          D.setFieldValue("beds", t);
                                      })(t),
                                    children: (0, re.jsx)(bs.A, {
                                      color: "error",
                                    }),
                                  }),
                                ],
                              }),
                            ],
                          },
                          t
                        )
                      ),
                    ],
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: D,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(wr, {
              title: "Room Information",
              open: S.open,
              tableData: S.tableData,
              schoolName: S.schoolName,
              onClose: () => {
                k({ ...S, open: !1 });
              },
            }),
          ],
        });
      }
      const Nr = [
          { name: "Name", key: "name", path: "studentName" },
          { name: "Admisson No", key: "admissionNumber", path: "admission" },
          { name: "Room", key: "number" },
        ],
        _r = [
          { name: "Name", key: "name", path: "studentName" },
          { name: "Admisson No", key: "admissionNumber", path: "admission" },
        ],
        Tr = (e) => {
          var t, a;
          let { onUpdate: n = () => {}, data: i = {} } = e;
          const [s, o] = (0, l.useState)(!1),
            [r, d] = (0, l.useState)(!1),
            { selectedSetting: c } = (0, l.useContext)(Ce.A),
            [m, u] = (0, l.useState)([]),
            [x, h] = (0, l.useState)([]);
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.hostel.list);
                u(e.result.map((e) => ({ ...e, label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })();
          }, [c]);
          const p = () => {
              d(!1);
            },
            j = (0, et.Wx)({
              initialValues: {
                name:
                  (null === i ||
                  void 0 === i ||
                  null === (t = i.basicInfo) ||
                  void 0 === t
                    ? void 0
                    : t.name) || "",
                hostel: "",
                room: "",
                bed: "",
              },
              onSubmit: async (e) => {
                try {
                  const t = {
                    ...e,
                    schoolId: c._id,
                    hostel: e.hostel,
                    room: e.room,
                    bed: e.bed,
                  };
                  o(!0),
                    await (0, Se.yJ)(
                      ke.r.student.updateHostelMember + "/" + i._id,
                      t
                    ),
                    n(),
                    p(),
                    o(!1);
                } catch (t) {
                  console.log(t), o(!1);
                }
              },
            });
          return (
            (0, l.useEffect)(() => {
              j.values.hostel &&
                (async () => {
                  try {
                    const { data: e } = await (0, Se.Jt)(ke.r.room.list, {
                      params: {
                        schoolId: c._id,
                        search: { hostel: j.values.hostel },
                      },
                    });
                    h(
                      e.result.map((e) => ({
                        ...e,
                        label: String(e.number),
                        value: e._id,
                      }))
                    );
                  } catch (e) {
                    console.log(e);
                  }
                })();
            }, [j.values.hostel, c]),
            (0, re.jsxs)(re.Fragment, {
              children: [
                (0, re.jsx)(b.A, {
                  direction: "row",
                  spacing: 1,
                  children: (0, re.jsx)($e.A, {
                    size: "small",
                    startIcon: (0, re.jsx)(rs.A, {}),
                    variant: "contained",
                    onClick: () => {
                      d(!0);
                    },
                    children: "Member",
                  }),
                }),
                (0, re.jsx)(pt, {
                  open: r,
                  formik: j,
                  formTitle: "Add Member",
                  onClose: p,
                  submitButtonTitle: "Submit",
                  adding: s,
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 0,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          formik: j,
                          name: "name",
                          label: "Name",
                          required: !0,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: j,
                          name: "hostel",
                          label: "Hostel",
                          required: !0,
                          options: m,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: j,
                          name: "room",
                          label: "Room No",
                          required: !0,
                          options: x,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          formik: j,
                          name: "bed",
                          label: "Beds",
                          required: !0,
                          options:
                            (null ===
                              (a = x.find((e) => e._id === j.values.room)) ||
                            void 0 === a
                              ? void 0
                              : a.beds.map((e) => ({
                                  label: e.name,
                                  value: e._id,
                                }))) || [],
                        }),
                      }),
                    ],
                  }),
                }),
              ],
            })
          );
        };
      function Mr() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          h = async (t) => {
            try {
              if ("all" === t.section) {
                const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                  params: {
                    schoolId: e._id,
                    search: {
                      academicYear: t.academicYear,
                      "academicInfo.class": t.class,
                    },
                  },
                });
                console.log(a.result, "=================");
                const l = a.result
                    .filter((e) => {
                      var t;
                      return null === e ||
                        void 0 === e ||
                        null === (t = e.otherInfo) ||
                        void 0 === t
                        ? void 0
                        : t.hostelMember;
                    })
                    .map((e) => ({
                      ...e,
                      studentName: e.basicInfo,
                      admission: e.academicInfo,
                    })),
                  n = a.result
                    .filter((e) => {
                      var t;
                      return !(
                        null !== e &&
                        void 0 !== e &&
                        null !== (t = e.otherInfo) &&
                        void 0 !== t &&
                        t.hostelMember
                      );
                    })
                    .map((e) => ({
                      ...e,
                      studentName: e.basicInfo,
                      admission: e.academicInfo,
                    }));
                m(l), x(n);
              } else {
                const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        academicYear: t.academicYear,
                        "academicInfo.class": t.class,
                        "academicInfo.section": t.section,
                      },
                    },
                  }),
                  l = a.result
                    .filter((e) => {
                      var t;
                      return null === e ||
                        void 0 === e ||
                        null === (t = e.otherInfo) ||
                        void 0 === t
                        ? void 0
                        : t.hostelMember;
                    })
                    .map((e) => ({
                      ...e,
                      studentName: e.basicInfo,
                      admission: e.academicInfo,
                    })),
                  n = a.result
                    .filter((e) => {
                      var t;
                      return !(
                        null !== e &&
                        void 0 !== e &&
                        null !== (t = e.otherInfo) &&
                        void 0 !== t &&
                        t.hostelMember
                      );
                    })
                    .map((e) => ({
                      ...e,
                      studentName: e.basicInfo,
                      admission: e.academicInfo,
                    }));
                m(l), x(n);
              }
            } catch (a) {
              console.log(a);
            }
          },
          p = (0, et.Wx)({
            initialValues: { academicYear: "", class: "", section: "" },
            onSubmit: h,
            enableReinitialize: !0,
          }),
          j = (0, et.Wx)({
            initialValues: { academicYear: "", class: "", section: "" },
            onSubmit: h,
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              d(
                e.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                p.setFieldValue("academicYear", e.result[0]._id),
                j.setFieldValue("academicYear", e.result[0]._id);
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                var t, a;
                const { data: l } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                i(l.result.map((e) => ({ label: e.name, value: e._id }))),
                  p.setFieldValue(
                    "class",
                    null === (t = l.result[0]) || void 0 === t ? void 0 : t._id
                  ),
                  j.setFieldValue(
                    "class",
                    null === (a = l.result[0]) || void 0 === a ? void 0 : a._id
                  );
              } catch (l) {
                console.log(l);
              }
            })();
        }, [e._id]),
          (0, l.useEffect)(() => {
            (p.values.class || j.values.class) &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                      params: {
                        schoolId: e._id,
                        search: { class: j.values.class || p.values.class },
                      },
                    }),
                    a = [
                      { label: "All", value: "all" },
                      ...t.result.map((e) => ({ label: e.name, value: e._id })),
                    ];
                  o(a),
                    p.setFieldValue("section", "all"),
                    j.setFieldValue("section", "all");
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [p.values.class, j.values.class, e]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Hostel Member" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => a(t),
              value: t,
              labels: ["Member List", "Non Member List"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: t,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)("form", {
                    onSubmit: p.handleSubmit,
                    children: [
                      " ",
                      (0, re.jsxs)(xe.Ay, {
                        rowSpacing: 1,
                        columnSpacing: 2,
                        container: !0,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "academicYear",
                              formik: p,
                              label: "Select Academic Year",
                              options: r,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "class",
                              formik: p,
                              label: "Select Class",
                              options: n,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "section",
                              formik: p,
                              label: "Select Section",
                              options: s,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 12,
                            md: 6,
                            lg: 3,
                            sx: { alignSelf: "center" },
                            children: (0, re.jsx)($e.A, {
                              size: "small",
                              type: "submit",
                              variant: "contained",
                              children: "Find",
                            }),
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["delete"],
                  onDeleteClick: async (e) => {
                    try {
                      await (0, Se.yH)(
                        ke.r.student.removeHostelMember + "/" + e
                      );
                      p.handleSubmit();
                    } catch (t) {
                      console.error(t);
                    }
                  },
                  tableKeys: Nr,
                  bodyData: c,
                  bodyDataModal: "hostel member",
                }),
              ],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 1,
              value: t,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsx)("form", {
                    onSubmit: j.handleSubmit,
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "academicYear",
                            formik: j,
                            label: "Select Academic Year",
                            options: r,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "class",
                            formik: j,
                            label: "Select Class",
                            options: n,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "section",
                            formik: j,
                            label: "Select Section",
                            options: s,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 6,
                          lg: 3,
                          sx: { alignSelf: "center" },
                          children: (0, re.jsx)($e.A, {
                            size: "small",
                            type: "submit",
                            variant: "contained",
                            children: "Find",
                          }),
                        }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(jt.A, {
                  actions: "custom",
                  tableKeys: _r,
                  bodyData: u,
                  bodyDataModal: "hostel member",
                  CustomAction: Tr,
                  onUpdate: j.handleSubmit,
                }),
              ],
            }),
          ],
        });
      }
      const Fr = [
          { name: "Vehicle Number", key: "number" },
          { name: "Driver", key: "driverName" },
          { name: "Contact", key: "driverContactNumber" },
          { name: "Total Passengers", key: "totalSeats" },
          { name: "Tracking Id", key: "trackingId" },
          { name: "Vehicle Model", key: "model" },
          { name: "Insurance Name", key: "insuranceName" },
        ],
        zr = (0, n.Ay)(oa.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            "&:nth-of-type(odd)": {
              backgroundColor: a ? "transparent" : "#F0F8FF",
              color: a ? "#fff" : "#000",
            },
          };
        }),
        Er = (0, n.Ay)(ra.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            border: "1px solid gray",
            ["&.".concat(va.A.head)]: {
              backgroundColor: a ? "transparent" : "blue",
              color: a ? "#fff" : "#000",
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        });
      function qr(e) {
        let {
          title: t = "",
          onClose: a = () => {},
          open: n = !0,
          tableData: i,
          schoolName: s,
        } = e;
        const { isDarkMode: o } = (0, l.useContext)(st.A);
        return (0, re.jsx)(ka, {
          title: t,
          onClose: a,
          open: n,
          children: (0, re.jsx)(ia.A, {
            "aria-label": "customized table",
            children: (0, re.jsxs)(ca.A, {
              children: [
                (0, re.jsxs)(zr, {
                  isDarkMode: o,
                  children: [
                    (0, re.jsx)(Er, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: o,
                      children: "School Name",
                    }),
                    (0, re.jsx)(Er, {
                      align: "left",
                      width: 100,
                      isDarkMode: o,
                      children: s,
                    }),
                  ],
                }),
                (0, re.jsxs)(zr, {
                  isDarkMode: o,
                  children: [
                    (0, re.jsx)(Er, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: o,
                      children: "Vehicle Number",
                    }),
                    (0, re.jsx)(Er, {
                      align: "left",
                      width: 100,
                      isDarkMode: o,
                      children: null === i || void 0 === i ? void 0 : i.number,
                    }),
                  ],
                }),
                (0, re.jsxs)(zr, {
                  isDarkMode: o,
                  children: [
                    (0, re.jsx)(Er, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: o,
                      children: "Vehicle Model",
                    }),
                    (0, re.jsx)(Er, {
                      align: "left",
                      width: 100,
                      isDarkMode: o,
                      children: null === i || void 0 === i ? void 0 : i.model,
                    }),
                  ],
                }),
                (0, re.jsxs)(zr, {
                  isDarkMode: o,
                  children: [
                    (0, re.jsx)(Er, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: o,
                      children: "Driver",
                    }),
                    (0, re.jsx)(Er, {
                      align: "left",
                      width: 100,
                      isDarkMode: o,
                      children:
                        null === i || void 0 === i ? void 0 : i.driverName,
                    }),
                  ],
                }),
                (0, re.jsxs)(zr, {
                  isDarkMode: o,
                  children: [
                    (0, re.jsx)(Er, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: o,
                      children: "Vehicle License",
                    }),
                    (0, re.jsx)(Er, {
                      align: "left",
                      width: 100,
                      isDarkMode: o,
                      children:
                        null === i || void 0 === i ? void 0 : i.licenseNumber,
                    }),
                  ],
                }),
                (0, re.jsxs)(zr, {
                  isDarkMode: o,
                  children: [
                    (0, re.jsx)(Er, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: o,
                      children: "Driver Contact Number",
                    }),
                    (0, re.jsx)(Er, {
                      align: "left",
                      width: 100,
                      isDarkMode: o,
                      children:
                        null === i || void 0 === i
                          ? void 0
                          : i.driverContactNumber,
                    }),
                  ],
                }),
                (0, re.jsxs)(zr, {
                  isDarkMode: o,
                  children: [
                    (0, re.jsx)(Er, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: o,
                      children: "Note",
                    }),
                    (0, re.jsx)(Er, {
                      align: "left",
                      width: 100,
                      isDarkMode: o,
                      children: null === i || void 0 === i ? void 0 : i.note,
                    }),
                  ],
                }),
                (0, re.jsxs)(zr, {
                  isDarkMode: o,
                  children: [
                    (0, re.jsx)(Er, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: o,
                      children: "Created",
                    }),
                    (0, re.jsx)(Er, {
                      align: "left",
                      width: 100,
                      isDarkMode: o,
                      children:
                        null === i || void 0 === i ? void 0 : i.createdAt,
                    }),
                  ],
                }),
              ],
            }),
          }),
        });
      }
      function Yr() {
        var e;
        const { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)(null),
          [o, r] = (0, l.useState)(!1),
          [d, c] = (0, l.useState)(!1),
          [m, u] = (0, l.useState)([]),
          [x, h] = (0, l.useState)({
            open: !1,
            tableData: "",
            schoolName: "",
            action: () => {},
          }),
          p = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.vehicle.list, {
                params: { schoolId: t._id },
              });
              n(
                e.result.map((e) => {
                  var t, a;
                  return {
                    ...e,
                    driverName:
                      null === e ||
                      void 0 === e ||
                      null === (t = e.driver) ||
                      void 0 === t ||
                      null === (a = t.basicInfo) ||
                      void 0 === a
                        ? void 0
                        : a.name,
                    id: e._id,
                  };
                })
              );
            } catch (e) {
              console.log(e);
            }
          },
          j = () => {
            c(!1), s(null), p();
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: a } = await (0, Se.Jt)(ke.r.employee.list, {
                params: { schoolId: t._id },
              });
              u(
                null === (e = a.result) || void 0 === e
                  ? void 0
                  : e
                      .filter((e) =>
                        e.role.name
                          .toLowerCase()
                          .match(new RegExp("Driver", "i"))
                      )
                      .map((e) => ({ label: e.basicInfo.name, value: e._id }))
              );
            } catch (a) {
              console.log(a);
            }
          })(),
            p();
        }, [t]);
        const g = (0, et.Wx)({
          initialValues: {
            number: (null === i || void 0 === i ? void 0 : i.number) || "",
            model: (null === i || void 0 === i ? void 0 : i.model) || "",
            driver:
              (null === i ||
              void 0 === i ||
              null === (e = i.driver) ||
              void 0 === e
                ? void 0
                : e._id) || "",
            licenseNumber:
              (null === i || void 0 === i ? void 0 : i.licenseNumber) || "",
            driverContactNumber:
              (null === i || void 0 === i ? void 0 : i.driverContactNumber) ||
              "",
            trackingId:
              (null === i || void 0 === i ? void 0 : i.trackingId) || "",
            insuranceName:
              (null === i || void 0 === i ? void 0 : i.insuranceName) || "",
            insuranceId:
              (null === i || void 0 === i ? void 0 : i.insuranceId) || "",
            totalSeats:
              (null === i || void 0 === i ? void 0 : i.totalSeats) || "",
            note: (null === i || void 0 === i ? void 0 : i.note) || "",
          },
          onSubmit: async (e) => {
            try {
              const a = { ...e, schoolId: t._id };
              if ((r(!0), i)) {
                const { data: e } = await (0, Se.yJ)(
                  ke.r.vehicle.update + "/" + i._id,
                  a
                );
              } else {
                const { data: e } = await (0, Se.bE)(ke.r.vehicle.create, a);
              }
              j();
            } catch (a) {
              console.log(a);
            }
            r(!1);
          },
          enableReinitialize: !0,
        });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Vehicle" }),
            (0, re.jsx)(jt.A, {
              actions: ["view", "edit", "delete"],
              tableKeys: Fr,
              bodyDataModal: "vehicle",
              bodyData: a,
              onEditClick: (e) => {
                c(!0), s(e);
              },
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.yH)(
                    ke.r.vehicle.delete + "/" + e
                  );
                  p();
                } catch (t) {
                  console.log(t);
                }
              },
              onViewClick: (e) => {
                h({
                  ...x,
                  open: !0,
                  tableData: e,
                  schoolName: null === t || void 0 === t ? void 0 : t.name,
                });
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Vehicle",
              onAddClick: () => {
                c(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: d,
              formik: g,
              formTitle: i ? "Update Vehicle" : "Add Vehicle",
              onClose: j,
              submitButtonTitle: i ? "Update" : "Submit",
              adding: o,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: g,
                      name: "number",
                      label: "Number",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: g,
                      name: "driver",
                      label: "Driver",
                      options: m,
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: g,
                      name: "model",
                      label: "Model",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: g,
                      name: "licenseNumber",
                      label: "License Number",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: g,
                      name: "driverContactNumber",
                      label: "Driver Contact Number",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: g,
                      name: "trackingId",
                      label: "Tracking Id",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: g,
                      name: "insuranceName",
                      label: "Insurance Name",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: g,
                      name: "insuranceId",
                      label: "Insurance Id",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: g,
                      name: "totalSeats",
                      label: "Total Seats",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: g,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(qr, {
              title: "Vehicle Information",
              open: null === x || void 0 === x ? void 0 : x.open,
              tableData: null === x || void 0 === x ? void 0 : x.tableData,
              schoolName: null === x || void 0 === x ? void 0 : x.schoolName,
              onClose: () => {
                h({ ...x, open: !1 });
              },
            }),
          ],
        });
      }
      const Wr = [
          { name: "Route Title", key: "title" },
          { name: "Route Start", key: "routeStart" },
          { name: "Route End", key: "routeEnd" },
          { name: "Vehicle For Route", key: "vehicleForRoute" },
          { name: "Stop Name", key: "stopName" },
        ],
        Rr = (0, n.Ay)(oa.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            color: a ? "#fff" : "#000",
            "&:nth-of-type(odd)": {
              backgroundColor: a ? "transparent" : "#F0F8FF",
            },
          };
        }),
        Pr = (0, n.Ay)(ra.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "300px",
            border: "1px solid gray",
            color: a ? "#fff" : "#000",
            ["&.".concat(va.A.head)]: {
              backgroundColor: a ? "transparent" : "blue",
              color: a ? "#fff" : "#000",
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        });
      function Jr(e) {
        var t, a;
        let {
          title: n = "",
          onClose: i = () => {},
          open: s = !0,
          tableData: o,
          schoolName: r,
        } = e;
        const { isDarkMode: d } = (0, l.useContext)(st.A);
        return (0, re.jsx)(ka, {
          title: n,
          onClose: i,
          open: s,
          children: (0, re.jsx)(ia.A, {
            "aria-label": "customized table",
            children: (0, re.jsxs)(ca.A, {
              children: [
                (0, re.jsxs)(Rr, {
                  isDarkMode: d,
                  children: [
                    (0, re.jsx)(Pr, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: d,
                      children: "School Name",
                    }),
                    (0, re.jsx)(Pr, {
                      align: "left",
                      width: 100,
                      isDarkMode: d,
                      children: r || "NA",
                    }),
                  ],
                }),
                (0, re.jsxs)(Rr, {
                  isDarkMode: d,
                  children: [
                    (0, re.jsx)(Pr, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: d,
                      children: "Route Title",
                    }),
                    (0, re.jsx)(Pr, {
                      align: "left",
                      width: 100,
                      isDarkMode: d,
                      children:
                        (null === o || void 0 === o ? void 0 : o.title) || "NA",
                    }),
                  ],
                }),
                (0, re.jsxs)(Rr, {
                  isDarkMode: d,
                  children: [
                    (0, re.jsx)(Pr, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: d,
                      children: "Route Start",
                    }),
                    (0, re.jsx)(Pr, {
                      align: "left",
                      width: 100,
                      isDarkMode: d,
                      children:
                        (null === o || void 0 === o ? void 0 : o.routeStart) ||
                        "NA",
                    }),
                  ],
                }),
                (0, re.jsxs)(Rr, {
                  isDarkMode: d,
                  children: [
                    (0, re.jsx)(Pr, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: d,
                      children: "Route End",
                    }),
                    (0, re.jsx)(Pr, {
                      align: "left",
                      width: 100,
                      isDarkMode: d,
                      children:
                        (null === o || void 0 === o ? void 0 : o.routeEnd) ||
                        "NA",
                    }),
                  ],
                }),
                (0, re.jsxs)(Rr, {
                  isDarkMode: d,
                  children: [
                    (0, re.jsxs)(Pr, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: d,
                      children: ["Vehicle For Route", " "],
                    }),
                    (0, re.jsx)(Pr, {
                      align: "left",
                      width: 100,
                      isDarkMode: d,
                      children:
                        (null === o ||
                        void 0 === o ||
                        null === (t = o.vehicle) ||
                        void 0 === t
                          ? void 0
                          : t.number) || "NA",
                    }),
                  ],
                }),
                (0, re.jsxs)(Rr, {
                  isDarkMode: d,
                  children: [
                    (0, re.jsx)(Pr, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: d,
                      children: "Stops",
                    }),
                    (0, re.jsx)(Pr, {
                      align: "left",
                      width: 100,
                      isDarkMode: d,
                      children:
                        null === (a = o.stops) || void 0 === a
                          ? void 0
                          : a.map((e, t) =>
                              (0, re.jsx)(
                                ia.A,
                                {
                                  "aria-label": "stop details",
                                  children: (0, re.jsxs)(ca.A, {
                                    children: [
                                      (0, re.jsxs)(Rr, {
                                        isDarkMode: d,
                                        children: [
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            sx: { fontWeight: "bold" },
                                            isDarkMode: d,
                                            children: "Stop Name",
                                          }),
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            width: 100,
                                            isDarkMode: d,
                                            children:
                                              (null === e || void 0 === e
                                                ? void 0
                                                : e.name) || "NA",
                                          }),
                                        ],
                                      }),
                                      (0, re.jsxs)(Rr, {
                                        isDarkMode: d,
                                        children: [
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            sx: { fontWeight: "bold" },
                                            isDarkMode: d,
                                            children: "Stop KM",
                                          }),
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            width: 100,
                                            isDarkMode: d,
                                            children:
                                              (null === e || void 0 === e
                                                ? void 0
                                                : e.stopKM) || "NA",
                                          }),
                                        ],
                                      }),
                                      (0, re.jsxs)(Rr, {
                                        isDarkMode: d,
                                        children: [
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            sx: {
                                              fontWeight: "bold",
                                              width: "200px",
                                            },
                                            isDarkMode: d,
                                            children: "Pick Start Time",
                                          }),
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            width: 100,
                                            isDarkMode: d,
                                            children:
                                              (null === e || void 0 === e
                                                ? void 0
                                                : e.pickTime) || "NA",
                                          }),
                                        ],
                                      }),
                                      (0, re.jsxs)(Rr, {
                                        isDarkMode: d,
                                        children: [
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            sx: {
                                              fontWeight: "bold",
                                              width: "200px",
                                            },
                                            isDarkMode: d,
                                            children: "Pick End Time",
                                          }),
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            width: 100,
                                            isDarkMode: d,
                                            children:
                                              (null === e || void 0 === e
                                                ? void 0
                                                : e.pickEndTime) || "NA",
                                          }),
                                        ],
                                      }),
                                      (0, re.jsxs)(Rr, {
                                        isDarkMode: d,
                                        children: [
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            sx: {
                                              fontWeight: "bold",
                                              width: "200px",
                                            },
                                            isDarkMode: d,
                                            children: "Drop Start Time",
                                          }),
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            width: 100,
                                            isDarkMode: d,
                                            children:
                                              (null === e || void 0 === e
                                                ? void 0
                                                : e.dropTime) || "NA",
                                          }),
                                        ],
                                      }),
                                      (0, re.jsxs)(Rr, {
                                        isDarkMode: d,
                                        children: [
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            sx: {
                                              fontWeight: "bold",
                                              width: "200px",
                                            },
                                            isDarkMode: d,
                                            children: "Drop End Time",
                                          }),
                                          (0, re.jsx)(Pr, {
                                            align: "left",
                                            width: 100,
                                            isDarkMode: d,
                                            children:
                                              (null === e || void 0 === e
                                                ? void 0
                                                : e.dropEndTime) || "NA",
                                          }),
                                        ],
                                      }),
                                    ],
                                  }),
                                },
                                t
                              )
                            ),
                    }),
                  ],
                }),
                (0, re.jsxs)(Rr, {
                  isDarkMode: d,
                  children: [
                    (0, re.jsx)(Pr, {
                      align: "left",
                      sx: { fontWeight: "bold" },
                      isDarkMode: d,
                      children: "Note",
                    }),
                    (0, re.jsx)(Pr, {
                      align: "left",
                      width: 100,
                      isDarkMode: d,
                      children:
                        (null === o || void 0 === o ? void 0 : o.note) || "NA",
                    }),
                  ],
                }),
              ],
            }),
          }),
        });
      }
      const Vr = (0, n.Ay)(s.A)((e) => {
        let { theme: t } = e;
        return {
          padding: "20px 8px",
          borderRadius: "10px",
          margin: "10px 0px",
          borderRight: "10px",
          border: "1px solid lightGrey",
          position: "relative",
          backgroundColor: "dark" === t.palette.mode ? "" : "whitesmoke",
        };
      });
      function Br() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)(!1),
          [p, j] = (0, l.useState)({
            open: !1,
            tableData: "",
            action: () => {},
          }),
          g = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.route.list, {
                params: { schoolId: e._id },
              });
              a(
                t.result.map((e) => {
                  var t, a;
                  return {
                    ...e,
                    stopName:
                      null === (t = e.stops) || void 0 === t
                        ? void 0
                        : t.map((e) => e.name),
                    vehicleForRoute:
                      null === (a = e.vehicle) || void 0 === a
                        ? void 0
                        : a.number,
                  };
                })
              );
            } catch (t) {
              console.log(t);
            }
          },
          A = () => {
            d(!1), o(null), g();
          },
          y = (0, et.Wx)({
            initialValues: {
              title: (null === s || void 0 === s ? void 0 : s.title) || "",
              vehicle:
                (null === s || void 0 === s ? void 0 : s.vehicle._id) || "",
              routeStart:
                (null === s || void 0 === s ? void 0 : s.routeStart) || "",
              routeEnd:
                (null === s || void 0 === s ? void 0 : s.routeEnd) || "",
              pickStart:
                (null === s || void 0 === s ? void 0 : s.pickStart) || "",
              pickEnd: (null === s || void 0 === s ? void 0 : s.pickEnd) || "",
              dropStart:
                (null === s || void 0 === s ? void 0 : s.dropStart) || "",
              dropEnd: (null === s || void 0 === s ? void 0 : s.dropEnd) || "",
              stops: (null === s || void 0 === s ? void 0 : s.stops) || [
                {
                  id: 1,
                  name: "",
                  stopKM: "",
                  pickTime: "",
                  pickEndTime: "",
                  dropTime: "",
                  dropEndTime: "",
                },
              ],
              note: (null === s || void 0 === s ? void 0 : s.note) || "",
            },
            onSubmit: async (t) => {
              try {
                const a = { ...t, schoolId: e._id };
                if ((m(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.route.update + "/" + s._id,
                    a
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.route.create, a);
                }
                A();
              } catch (a) {
                console.log(a);
              }
              m(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.vehicle.list);
              i(e.result.map((e) => ({ ...e, label: e.number, value: e._id })));
            } catch (e) {
              console.log(e);
            }
          })(),
            g();
        }, [e]);
        const f = (e, t) => {
          y.setFieldValue(
            "stops",
            y.values.stops.map((a) =>
              a.id === t.id ? { ...a, [e.target.name]: e.target.value } : a
            )
          );
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Manage Route & Trips" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "view", "delete"],
              tableKeys: Wr,
              bodyDataModal: "route",
              bodyData: t,
              onViewClick: (t) => {
                j({ ...p, open: !0, tableData: t, schoolName: e.name }), g();
              },
              onEditClick: (e) => {
                console.log(e, "eee"), d(!0), o(e);
              },
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.yH)(
                    ke.r.route.delete + "/" + e
                  );
                  g();
                } catch (t) {
                  console.log(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Route & Trips",
              onAddClick: () => {
                d(!0);
              },
            }),
            (0, re.jsxs)(pt, {
              open: r,
              formik: y,
              formTitle: s ? "Update Route & Trips" : "Add Route & Trips",
              onClose: A,
              submitButtonTitle: s ? "Update" : "Submit",
              adding: c,
              children: [
                (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: y,
                        name: "title",
                        label: "Title",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: y,
                        name: "vehicle",
                        label: "Vehicle",
                        required: !0,
                        options: n,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: y,
                        name: "routeStart",
                        label: "Route Start",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: y,
                        name: "routeEnd",
                        label: "Route End",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: y,
                        type: "time",
                        name: "pickStart",
                        required: !0,
                        label: "Pick Start",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: y,
                        type: "time",
                        name: "pickEnd",
                        required: !0,
                        label: "Pick End",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: y,
                        type: "time",
                        name: "dropStart",
                        required: !0,
                        label: "Drop Start",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: y,
                        type: "time",
                        name: "dropEnd",
                        required: !0,
                        label: "Drop End",
                      }),
                    }),
                  ],
                }),
                y.values.stops.map(
                  (e, t) => (
                    console.log(e, "gg"),
                    (0, re.jsxs)(
                      Vr,
                      {
                        children: [
                          (0, re.jsx)(h.A, {
                            color: "error",
                            sx: { position: "absolute", right: 0, top: 0 },
                            onClick: () =>
                              ((e) => {
                                let t = [...y.values.stops];
                                t.splice(e, 1), y.setFieldValue("stops", t);
                              })(t),
                            children: (0, re.jsx)(Rt.A, {}),
                          }),
                          (0, re.jsxs)(xe.Ay, {
                            container: !0,
                            spacing: 2,
                            children: [
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 6,
                                item: !0,
                                children: (0, re.jsx)(li, {
                                  value:
                                    null === e || void 0 === e
                                      ? void 0
                                      : e.name,
                                  name: "name",
                                  label: "Name",
                                  required: !0,
                                  onChange: (t) => f(t, e),
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 6,
                                item: !0,
                                children: (0, re.jsx)(li, {
                                  value:
                                    null === e || void 0 === e
                                      ? void 0
                                      : e.stopKM,
                                  name: "stopKM",
                                  label: "Stop KM",
                                  onChange: (t) => f(t, e),
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 6,
                                item: !0,
                                children: (0, re.jsx)(li, {
                                  value:
                                    null === e || void 0 === e
                                      ? void 0
                                      : e.pickTime,
                                  name: "pickTime",
                                  type: "time",
                                  label: "Pick Time",
                                  onChange: (t) => f(t, e),
                                  required: !0,
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 6,
                                item: !0,
                                children: (0, re.jsx)(li, {
                                  value:
                                    null === e || void 0 === e
                                      ? void 0
                                      : e.pickEndTime,
                                  type: "time",
                                  name: "pickEndTime",
                                  label: "Pick End Time",
                                  onChange: (t) => f(t, e),
                                  required: !0,
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 6,
                                item: !0,
                                children: (0, re.jsx)(li, {
                                  value:
                                    null === e || void 0 === e
                                      ? void 0
                                      : e.dropTime,
                                  type: "time",
                                  name: "dropTime",
                                  label: "Drop Time",
                                  onChange: (t) => f(t, e),
                                  required: !0,
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 6,
                                item: !0,
                                children: (0, re.jsx)(li, {
                                  value:
                                    null === e || void 0 === e
                                      ? void 0
                                      : e.dropEndTime,
                                  type: "time",
                                  name: "dropEndTime",
                                  label: "Drop End Time",
                                  onChange: (t) => f(t, e),
                                  required: !0,
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 6,
                                item: !0,
                                children: (0, re.jsx)($e.A, {
                                  variant: "contained",
                                  size: "small",
                                  onClick: () =>
                                    (async (e) => {
                                      console.log(e, "stopId");
                                      let t = y.values.stops.find(
                                        (t) => t._id === e
                                      );
                                      console.log(t, "stopData");
                                      try {
                                        x(!0);
                                        const { data: a } = await (0, Se.yJ)(
                                          ke.r.route.updateStop + "/" + e,
                                          t
                                        );
                                        x(!1);
                                      } catch (a) {
                                        console.log(a), x(!1);
                                      }
                                    })(e._id),
                                  children: "Update",
                                }),
                              }),
                            ],
                          }),
                        ],
                      },
                      t
                    )
                  )
                ),
                (0, re.jsx)($e.A, {
                  variant: "contained",
                  size: "small",
                  onClick: () => {
                    let e = [...y.values.stops];
                    y.setFieldValue("stops", [
                      ...y.values.stops,
                      {
                        id: e.length + 1,
                        name: "",
                        stopKM: "",
                        pickTime: "",
                        pickEndTime: "",
                        dropTime: "",
                        dropEndTime: "",
                      },
                    ]);
                  },
                  children: "Add",
                }),
                (0, re.jsx)(xe.Ay, {
                  container: !0,
                  spacing: 2,
                  children: (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: y,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                }),
              ],
            }),
            (0, re.jsx)(Jr, {
              title: "Trasport Route Information",
              onClose: () => {
                j({ ...p, open: !1 });
              },
              open: p.open,
              tableData: p.tableData,
              schoolName: p.schoolName,
            }),
          ],
        });
      }
      const Or = [
          { name: "Photo", key: "photo", type: "image" },
          { name: "Name", key: "name", path: "basicInfo" },
          { name: "Class", key: "name", path: "className" },
          { name: "Section", key: "name", path: "sectionName" },
          { name: "Roll No", key: "rollNumber", path: "rollNo" },
        ],
        Lr = [
          { name: "Name", key: "name", path: "basicInfo" },
          { name: "Roll No", key: "rollNumber", path: "rollNo" },
          { name: "Stop Name", key: "name", path: "stopName" },
          { name: "Pick Type", key: "pickType", path: "pickType" },
          { name: "Route Start", key: "routeStart", path: "routeStart" },
          { name: "Route End", key: "routeEnd", path: "routeEnd" },
        ],
        Ur = [
          { label: "Pick", value: "Pick" },
          { label: "Drop", value: "Drop" },
          { label: "Both", value: "Both" },
        ],
        Hr = (e) => {
          var t, a;
          let { onUpdate: n = () => {}, data: i = {} } = e;
          const [s, o] = (0, l.useState)(!1),
            [r, d] = (0, l.useState)(!1),
            { selectedSetting: c } = (0, l.useContext)(Ce.A),
            [m, u] = (0, l.useState)([]);
          console.log(m, "mmmmmmmmmmm"),
            (0, l.useEffect)(() => {
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.route.list);
                  u(
                    e.result.map((e) => ({
                      ...e,
                      label: e.title,
                      value: e._id,
                    }))
                  ),
                    console.log(e.result, "vvbvbbbbv vbfv vhvbfvvc");
                } catch (e) {
                  console.log(e);
                }
              })();
            }, [c]);
          const x = () => {
              d(!1);
            },
            h = (0, et.Wx)({
              initialValues: {
                name:
                  (null === i ||
                  void 0 === i ||
                  null === (t = i.basicInfo) ||
                  void 0 === t
                    ? void 0
                    : t.name) || "",
                route: "",
                stop: "",
                type: "",
              },
              onSubmit: async (e) => {
                try {
                  const t = {
                    ...e,
                    schoolId: c._id,
                    routeId: e.route,
                    stopId: e.stop,
                    pickType: e.type,
                  };
                  o(!0),
                    await (0, Se.yJ)(
                      ke.r.student.updateTransportMember + "/" + i._id,
                      t
                    ),
                    n(),
                    x(),
                    o(!1);
                } catch (t) {
                  console.log(t), o(!1);
                }
              },
            });
          return (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(b.A, {
                direction: "row",
                spacing: 1,
                children: (0, re.jsx)($e.A, {
                  size: "small",
                  startIcon: (0, re.jsx)(rs.A, {}),
                  variant: "contained",
                  onClick: () => {
                    d(!0);
                  },
                  children: "Member",
                }),
              }),
              (0, re.jsx)(pt, {
                open: r,
                formik: h,
                formTitle: "Add Member",
                onClose: x,
                submitButtonTitle: "Submit",
                adding: s,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: h,
                        name: "name",
                        label: "Name",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: h,
                        name: "route",
                        label: "Route",
                        required: !0,
                        options: m,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: h,
                        name: "stop",
                        label: "Stop",
                        required: !0,
                        options:
                          (null ===
                            (a = m.find((e) => e._id === h.values.route)) ||
                          void 0 === a
                            ? void 0
                            : a.stops.map((e) => ({
                                label: e.name,
                                value: e._id,
                              }))) || [],
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        name: "type",
                        formik: h,
                        label: "Pick Type",
                        options: Ur,
                      }),
                    }),
                  ],
                }),
              }),
            ],
          });
        };
      function Gr() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          h = async (t) => {
            try {
              if ("all" === t.section) {
                const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        academicYear: t.academicYear,
                        "academicInfo.class": t.class,
                      },
                    },
                  }),
                  l = a.result
                    .filter((e) => {
                      var t;
                      return null === e ||
                        void 0 === e ||
                        null === (t = e.otherInfo) ||
                        void 0 === t
                        ? void 0
                        : t.transportMember;
                    })
                    .map((e) => {
                      var t, a, l;
                      return {
                        ...e,
                        rollNo: e.academicInfo,
                        pickType: e.transportInfo,
                        routeStart:
                          null === e ||
                          void 0 === e ||
                          null === (t = e.transportInfo) ||
                          void 0 === t
                            ? void 0
                            : t.route,
                        routeEnd:
                          null === e ||
                          void 0 === e ||
                          null === (a = e.transportInfo) ||
                          void 0 === a
                            ? void 0
                            : a.route,
                        stopName:
                          null === e ||
                          void 0 === e ||
                          null === (l = e.transportInfo) ||
                          void 0 === l
                            ? void 0
                            : l.stop,
                      };
                    }),
                  n = a.result
                    .filter((e) => {
                      var t;
                      return !(
                        null !== e &&
                        void 0 !== e &&
                        null !== (t = e.otherInfo) &&
                        void 0 !== t &&
                        t.transportMember
                      );
                    })
                    .map((e) => ({
                      ...e,
                      rollNo: e.academicInfo,
                      className: e.academicInfo.class,
                      sectionName: e.academicInfo.section,
                    }));
                i(l), x(n), console.log(n, "kkkkk");
              } else {
                const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        academicYear: t.academicYear,
                        "academicInfo.class": t.class,
                        "academicInfo.section": t.section,
                      },
                    },
                  }),
                  l = a.result
                    .filter((e) => {
                      var t;
                      return null === e ||
                        void 0 === e ||
                        null === (t = e.otherInfo) ||
                        void 0 === t
                        ? void 0
                        : t.transportMember;
                    })
                    .map((e) => {
                      var t, a, l;
                      return {
                        ...e,
                        rollNo: e.academicInfo,
                        pickType: e.transportInfo,
                        routeStart:
                          null === e ||
                          void 0 === e ||
                          null === (t = e.transportInfo) ||
                          void 0 === t
                            ? void 0
                            : t.route,
                        routeEnd:
                          null === e ||
                          void 0 === e ||
                          null === (a = e.transportInfo) ||
                          void 0 === a
                            ? void 0
                            : a.route,
                        stopName:
                          null === e ||
                          void 0 === e ||
                          null === (l = e.transportInfo) ||
                          void 0 === l
                            ? void 0
                            : l.stop,
                      };
                    }),
                  n = a.result
                    .filter((e) => {
                      var t;
                      return !(
                        null !== e &&
                        void 0 !== e &&
                        null !== (t = e.otherInfo) &&
                        void 0 !== t &&
                        t.transportMember
                      );
                    })
                    .map((e) => ({
                      ...e,
                      rollNo: e.academicInfo,
                      className: e.academicInfo.class,
                      sectionName: e.academicInfo.section,
                    }));
                i(l), x(n);
              }
            } catch (a) {
              console.log(a);
            }
          },
          p = (0, et.Wx)({
            initialValues: { academicYear: "", class: "", section: "" },
            onSubmit: h,
            enableReinitialize: !0,
          }),
          j = (0, et.Wx)({
            initialValues: { academicYear: "", class: "", section: "" },
            onSubmit: h,
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (p.values.class || j.values.class) &&
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: p.values.class || j.values.class },
                    },
                  }),
                  a = [
                    { label: "All", value: "all" },
                    ...t.result.map((e) => ({ label: e.name, value: e._id })),
                  ];
                m(a),
                  p.setFieldValue("section", "all"),
                  j.setFieldValue("section", "all");
              } catch (t) {
                console.log(t);
              }
            })();
        }, [j.values.class, p.values.class, e._id]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                var e, t;
                const { data: a } = await (0, Se.Jt)(ke.r.academicYear.list);
                o(
                  a.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                ),
                  p.setFieldValue(
                    "academicYear",
                    null === (e = a.result[0]) || void 0 === e ? void 0 : e._id
                  ),
                  j.setFieldValue(
                    "academicYear",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })(),
              (async () => {
                try {
                  var t, a;
                  const { data: l } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  });
                  d(
                    l.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    p.setFieldValue(
                      "class",
                      null === (t = l.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    ),
                    j.setFieldValue(
                      "class",
                      null === (a = l.result[0]) || void 0 === a
                        ? void 0
                        : a._id
                    );
                } catch (l) {
                  console.log(l);
                }
              })();
          }, [e._id]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Transport Member" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => a(t),
              value: t,
              labels: ["Member List", "Add Member"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: t,
              children: [
                (0, re.jsxs)("form", {
                  onSubmit: p.handleSubmit,
                  children: [
                    " ",
                    (0, re.jsx)(ue.A, {
                      sx: { padding: 2, marginBottom: 2 },
                      children: (0, re.jsxs)(xe.Ay, {
                        rowSpacing: 1,
                        columnSpacing: 2,
                        container: !0,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "academicYear",
                              formik: p,
                              label: "Select Academic Year",
                              options: s,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "class",
                              formik: p,
                              label: "Select Class",
                              options: r,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "section",
                              formik: p,
                              label: "Select Section",
                              options: c,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 12,
                            md: 6,
                            lg: 3,
                            sx: { alignSelf: "center" },
                            children: (0, re.jsx)($e.A, {
                              size: "small",
                              type: "submit",
                              variant: "contained",
                              children: "Find",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["delete"],
                  tableKeys: Lr,
                  bodyData: n,
                  bodyDataModal: "transport member",
                  onDeleteClick: async (e) => {
                    try {
                      await (0, Se.yH)(
                        ke.r.student.removeTransportMember + "/" + e
                      );
                      p.handleSubmit();
                    } catch (t) {
                      console.error(t);
                    }
                  },
                }),
              ],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 1,
              value: t,
              children: [
                (0, re.jsx)("form", {
                  onSubmit: j.handleSubmit,
                  children: (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "academicYear",
                            formik: j,
                            label: "Select Academic Year",
                            options: s,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "class",
                            formik: j,
                            label: "Select Class",
                            options: r,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "section",
                            formik: j,
                            label: "Select Section",
                            options: c,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 6,
                          lg: 3,
                          sx: { alignSelf: "center" },
                          children: (0, re.jsx)($e.A, {
                            size: "small",
                            type: "submit",
                            variant: "contained",
                            children: "Find",
                          }),
                        }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(jt.A, {
                  actions: "custom",
                  tableKeys: Or,
                  bodyData: u,
                  bodyDataModal: "transport member",
                  CustomAction: Hr,
                  onUpdate: j.handleSubmit,
                }),
              ],
            }),
          ],
        });
      }
      const Kr = [
        { name: "Vehicle", key: "vehicle" },
        { name: "Route", key: "route" },
        { name: "Pick Start", key: "pickStart" },
        { name: "Pick End", key: "pickEnd" },
        { name: "Drop Start", key: "dropStart" },
        { name: "Drop End", key: "dropEnd" },
      ];
      function Qr() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(0);
        return (
          (0, l.useEffect)(() => {
            if (t) {
              const e = t.map((e) => parseInt(e.totalSeats));
              let a = 0;
              for (let t = 0; t < e.length; t++) a += e[t];
              i(a);
            }
          }, [t, e]),
          console.log(n, "sumOfSeat"),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.route.list, {
                  params: { schoolId: e._id },
                });
                console.log(t, "herere"),
                  a(
                    t.result.map((e) => {
                      var t, a;
                      return {
                        ...e,
                        route: ""
                          .concat(e.routeStart, " - ")
                          .concat(e.routeEnd),
                        vehicle:
                          null === (t = e.vehicle) || void 0 === t
                            ? void 0
                            : t.number,
                        totalSeats:
                          null === (a = e.vehicle) || void 0 === a
                            ? void 0
                            : a.totalSeats,
                      };
                    })
                  );
              } catch (t) {
                console.log(t);
              }
            })();
          }, [e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Trips" }),
              (0, re.jsxs)(me.A, {
                style: {
                  padding: 10,
                  paddingLeft: "1rem",
                  display: "flex",
                  gap: "20px",
                  borderRadius: 0,
                },
                children: [
                  (0, re.jsxs)(u.A, { children: ["Vehicle: ", t.length] }),
                  (0, re.jsxs)(u.A, { children: ["Total Seats: ", n] }),
                ],
              }),
              (0, re.jsx)(jt.A, {
                actions: [],
                tableKeys: Kr,
                bodyDataModal: "trips",
                bodyData: t,
              }),
            ],
          })
        );
      }
      const Zr = [
          { name: "Date", key: "date", isDate: !0 },
          { name: "Departure Time", key: "departureTime" },
          {
            name: "Reading At Departure",
            key: "reading",
            path: "readingAtDepartureReading",
          },
          { name: "Arrival Time", key: "arrivalTime" },
          {
            name: "Reading At Arrival",
            key: "reading",
            path: "readingAtArrival",
          },
          { name: "Total KM Run", key: "totalDistanceTravelled" },
        ],
        $r = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            padding: "20px 8px",
            borderRadius: "10px",
            margin: "10px 0px",
            borderRight: "10px",
            border: "1px solid lightGrey",
            backgroundColor: "dark" === t.palette.mode ? "" : "whitesmoke",
          };
        }),
        Xr = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ];
      function ed() {
        var e, t, a, n, i, s;
        const { selectedSetting: o } = (0, l.useContext)(Ce.A),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(null),
          [u, x] = (0, l.useState)(!1),
          [h, p] = (0, l.useState)(!1),
          [j, g] = (0, l.useState)([]),
          [A, y] = (0, l.useState)([]),
          [f, v] = (0, l.useState)([]),
          [b, S] = (0, l.useState)([]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var e;
              const { data: t } = await (0, Se.Jt)(ke.r.vehicle.list, {
                params: { schoolId: o._id },
              });
              v(t.result.map((e) => ({ ...e, label: e.number, value: e._id }))),
                D.setFieldValue(
                  "vehicle",
                  null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                );
            } catch (t) {
              console.log(t);
            }
          })();
        }, [o]);
        const k = () => {
            x(!1), m(null);
          },
          C = (0, et.Wx)({
            initialValues: {
              route: (null === c || void 0 === c ? void 0 : c.route._id) || "",
              vehicle:
                (null === c || void 0 === c ? void 0 : c.vehicle._id) || "",
              departureTime:
                (null === c || void 0 === c ? void 0 : c.departureTime) || "",
              readingAtDeparture:
                (null === c ||
                void 0 === c ||
                null === (e = c.readingAtDeparture) ||
                void 0 === e
                  ? void 0
                  : e.reading) || "",
              arrivalTime:
                (null === c || void 0 === c ? void 0 : c.arrivalTime) || "",
              readingAtArrival:
                (null === c ||
                void 0 === c ||
                null === (t = c.readingAtArrival) ||
                void 0 === t
                  ? void 0
                  : t.reading) || "",
              distance:
                (null === c ||
                void 0 === c ||
                null === (a = c.spareUse) ||
                void 0 === a
                  ? void 0
                  : a.distance) || "",
              date: (null === c || void 0 === c ? void 0 : c.date) || null,
              reason:
                (null === c ||
                void 0 === c ||
                null === (n = c.spareUse) ||
                void 0 === n
                  ? void 0
                  : n.reason) || "",
              totalDistanceTravelled:
                (null === c || void 0 === c
                  ? void 0
                  : c.totalDistanceTravelled) || 0,
              tripCompleted:
                (null === c || void 0 === c ? void 0 : c.tripCompleted) || !1,
            },
            onSubmit: async (e) => {
              try {
                p(!0);
                const t = new FormData(),
                  a = new FormData();
                if (
                  (t.append("schoolId", o._id),
                  t.append("route", e.route),
                  t.append("vehicle", e.vehicle),
                  t.append("date", Be()(e.date).format("YYYY-MM-DD")),
                  t.append("departureTime", e.departureTime),
                  t.append("readingAtDeparture", e.readingAtDeparture),
                  t.append("totalDistanceTravelled", e.totalDistanceTravelled),
                  j.forEach((e) => t.append("departureImage", e)),
                  a.append("arrivalTime", e.arrivalTime),
                  a.append("readingAtArrival", e.readingAtArrival),
                  a.append(
                    "spareUse",
                    JSON.stringify({ distance: e.distance, reason: e.reason })
                  ),
                  A.forEach((e) => a.append("arrivalImage", e)),
                  c)
                ) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.vehicleLog.update + "/" + c._id,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.vehicleLog.create,
                    t,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                }
                k();
              } catch (t) {
                console.log(t);
              }
              p(!1);
            },
            enableReinitialize: !0,
          }),
          D = (0, et.Wx)({
            initialValues: {
              vehicle: "",
              route: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: async (e) => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.vehicleLog.list, {
                  params: {
                    schoolId: o._id,
                    search: {
                      vehicle: e.vehicle,
                      route: e.route,
                      fromDate: Be()(e.fromDate).format("YYYY/MM/DD"),
                      toDate: Be()(e.toDate).format("YYYY/MM/DD"),
                    },
                  },
                });
                d(
                  t.result.map((e) => ({
                    ...e,
                    readingAtDepartureReading:
                      null === e || void 0 === e
                        ? void 0
                        : e.readingAtDeparture,
                    readingAtArrival:
                      null === e || void 0 === e ? void 0 : e.readingAtArrival,
                  }))
                ),
                  console.log(t.result, "kkkkkkk");
              } catch (t) {
                console.log(t);
              }
            },
          }),
          w = (e, t) => {
            const { files: a } = e.target;
            let l = [];
            if (a.length > 0) {
              for (let e = 0; e < a.length; e++) {
                const t = a[e];
                l.push(t);
              }
              "departureImage" === t ? g(l) : y(l);
            } else console.log("No files selected");
          },
          I = (e, t) => {
            g(j.filter((t) => t.name != e)), y(A.filter((t) => t.name != e));
          };
        (0, l.useEffect)(() => {
          (D.values.vehicle || C.values.vehicle) &&
            (async () => {
              try {
                var e;
                const { data: t } = await (0, Se.Jt)(ke.r.route.list, {
                  params: {
                    schoolId: o._id,
                    search: { vehicle: D.values.vehicle || C.values.vehicle },
                  },
                });
                S(
                  t.result.map((e) => ({ ...e, label: e.title, value: e._id }))
                ),
                  D.setFieldValue(
                    "route",
                    null === (e = t.result[0]) || void 0 === e ? void 0 : e._id
                  );
              } catch (t) {
                console.log(t);
              }
            })();
        }, [D.values.vehicle, C.values.vehicle, o]),
          (0, l.useEffect)(() => {
            D.values.vehicle && D.values.route && D.handleSubmit();
          }, [D.values.vehicle, D.values.route, o]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Vehicle Log" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)("form", {
                onSubmit: D.handleSubmit,
                children: [
                  " ",
                  (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "vehicle",
                          formik: D,
                          label: "Select Vehicle",
                          options: f,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "route",
                          formik: D,
                          label: "Select Route",
                          options: b,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: D,
                          label: "From Date",
                          name: "fromDate",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 6,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: D,
                          label: "To Date",
                          name: "toDate",
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        md: 12,
                        lg: 12,
                        display: "flex",
                        justifyContent: "flex-end",
                        alignSelf: "center",
                        gap: 1,
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            type: "submit",
                            variant: "contained",
                            children: "Find",
                          }),
                          (0, re.jsx)($e.A, {
                            size: "small",
                            onClick: async () => {
                              try {
                                Dl(
                                  "application/pdf",
                                  (
                                    await (0, Se.Jt)(
                                      ke.r.vehicleLog.downloadPdf,
                                      {
                                        params: {
                                          schoolId: o._id,
                                          search: {
                                            vehicle: D.values.vehicle,
                                            route: D.values.route,
                                            fromDate: Be()(
                                              D.values.fromDate
                                            ).format("YYYY/MM/DD"),
                                            toDate: Be()(
                                              D.values.toDate
                                            ).format("YYYY/MM/DD"),
                                          },
                                        },
                                      }
                                    )
                                  ).data,
                                  "vehiclelog.pdf"
                                );
                              } catch (e) {
                                console.log(e);
                              }
                            },
                            variant: "contained",
                            children: "Print",
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            }),
            (0, re.jsx)(rt, {
              title: "Add Vehicle Log",
              onAddClick: () => {
                x(!0);
              },
            }),
            (0, re.jsxs)(pt, {
              open: u,
              formik: C,
              formTitle: c ? "Update Vehicle Log" : "Add Vehicle log",
              onClose: k,
              submitButtonTitle: c ? "Update" : "Submit",
              adding: h,
              children: [
                (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: C,
                        name: "vehicle",
                        label: "Vehicle",
                        required: !0,
                        options: f,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: C,
                        name: "route",
                        label: "Route",
                        required: !0,
                        options: b,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: C,
                        name: "date",
                        label: "Date",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: C,
                        type: "time",
                        name: "departureTime",
                        label: "Departure Time",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: C,
                        name: "totalDistanceTravelled",
                        label: "Total Distance Travelled",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: C,
                        name: "tripCompleted",
                        label: "Trip Completed",
                        options: Xr,
                      }),
                    }),
                  ],
                }),
                (0, re.jsx)($r, {
                  children: (0, re.jsxs)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        sm: 12,
                        md: 6,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          formik: C,
                          name: "readingAtDeparture",
                          label: "Reading At Departure",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 6,
                        item: !0,
                        children: (0, re.jsx)(Ol.A, {
                          name: "departureImage",
                          label: "Select File",
                          onChange: (e) => w(e, "departureImage"),
                          customOnChange: !0,
                          previousFile:
                            null === c ||
                            void 0 === c ||
                            null === (i = c.readingAtDeparture) ||
                            void 0 === i
                              ? void 0
                              : i.image,
                          selectedFiles: j,
                          onRemove: (e) => I(e),
                          accept: "image/*,.pdf",
                        }),
                      }),
                    ],
                  }),
                }),
                c
                  ? (0, re.jsxs)(re.Fragment, {
                      children: [
                        (0, re.jsxs)(xe.Ay, {
                          container: !0,
                          spacing: 2,
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              sm: 12,
                              md: 6,
                              item: !0,
                              children: (0, re.jsx)(At.A, {
                                formik: C,
                                type: "time",
                                name: "arrivalTime",
                                label: "Arrival Time",
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              sm: 12,
                              md: 6,
                              item: !0,
                              children: (0, re.jsx)(At.A, {
                                formik: C,
                                name: "distance",
                                label: "Distance",
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              sm: 12,
                              md: 6,
                              item: !0,
                              children: (0, re.jsx)(At.A, {
                                formik: C,
                                name: "reason",
                                label: "Reason",
                              }),
                            }),
                          ],
                        }),
                        (0, re.jsx)($r, {
                          children: (0, re.jsxs)(xe.Ay, {
                            container: !0,
                            spacing: 2,
                            children: [
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                sm: 12,
                                md: 6,
                                item: !0,
                                children: (0, re.jsx)(At.A, {
                                  formik: C,
                                  name: "readingAtArrival",
                                  label: "Reading At Arrivale",
                                }),
                              }),
                              (0, re.jsx)(xe.Ay, {
                                xs: 12,
                                md: 6,
                                lg: 6,
                                item: !0,
                                children: (0, re.jsx)(Ol.A, {
                                  name: "arrivalImage",
                                  label: "Select File",
                                  onChange: (e) => w(e, "arrivalImage"),
                                  customOnChange: !0,
                                  selectedFiles: A,
                                  previousFile:
                                    null === c ||
                                    void 0 === c ||
                                    null === (s = c.readingAtArrival) ||
                                    void 0 === s
                                      ? void 0
                                      : s.image,
                                  onRemove: (e) => I(e),
                                  accept: "image/*,.pdf",
                                }),
                              }),
                            ],
                          }),
                        }),
                      ],
                    })
                  : null,
              ],
            }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: Zr,
              bodyDataModal: "vehicle log",
              bodyData: r,
              onEditClick: (e) => {
                m(e), x(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.vehicleLog.delete + "/" + e);
                  D.handleSubmit();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
          ],
        });
      }
      const td = [
        { name: "Name", key: "name" },
        { name: "Phone Number", key: "contactNumber" },
        { name: "Email", key: "email" },
      ];
      function ad() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          c = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.firm.list, {
                params: { schoolId: e._id },
              });
              a(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          c();
        }, [e]);
        const m = () => {
            i(!1), o(null);
          },
          u = (0, et.Wx)({
            initialValues: {
              name: (null === s || void 0 === s ? void 0 : s.name) || "",
              contactNumber:
                (null === s || void 0 === s ? void 0 : s.contactNumber) || "",
              email: (null === s || void 0 === s ? void 0 : s.email) || "",
              GSTNumber:
                (null === s || void 0 === s ? void 0 : s.GSTNumber) || "",
              website: (null === s || void 0 === s ? void 0 : s.website) || "",
              address: (null === s || void 0 === s ? void 0 : s.address) || "",
              city: (null === s || void 0 === s ? void 0 : s.city) || "",
              state: (null === s || void 0 === s ? void 0 : s.state) || "",
              zipCode: (null === s || void 0 === s ? void 0 : s.zipCode) || "",
            },
            onSubmit: async (t) => {
              try {
                const a = { ...t, schoolId: e._id };
                if ((d(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.firm.update + "/" + s._id,
                    a
                  );
                  c();
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.firm.create, a);
                  c();
                }
                m();
              } catch (a) {
                console.log(a);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)($e.A, {
              variant: "contained",
              onClick: () => {
                i(!0);
              },
              startIcon: (0, re.jsx)(rs.A, {}),
              sx: { mt: 1, mb: 2 },
              children: "Add",
            }),
            (0, re.jsx)(jt.A, {
              tableKeys: td,
              bodyData: t,
              bodyDataModal: "firm",
              actions: ["edit", "delete"],
              onEditClick: (e) => {
                o(e), i(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.firm.delete + "/" + e);
                  c();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(pt, {
              open: n,
              formik: u,
              formTitle: s ? "Update Firm" : "Add Firm",
              onClose: m,
              submitButtonTitle: s ? "Update" : "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "name",
                      label: "Name",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "contactNumber",
                      label: "Contact Number",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "email",
                      label: "Email",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "GSTNumber",
                      label: "GST Number",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "website",
                      label: "Website",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "address",
                      label: "Address",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "city",
                      label: "City",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "state",
                      label: "State",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: u,
                      name: "zipCode",
                      label: "Zip Code",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const ld = [
        { name: "Date", key: "date", isDate: !0 },
        { name: "Firm", key: "name", path: "firmName" },
        { name: "Bill No", key: "billNo" },
        { name: "Amount", key: "amount" },
        { name: "Km", key: "kiloMeter" },
      ];
      function nd() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)([]),
          j = () => {
            i(!1), o(null);
          },
          g = (0, et.Wx)({
            initialValues: {
              vehicle: "",
              firm: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: async (t) => {
              try {
                const { data: l } = await (0, Se.Jt)(
                  ke.r.maintenanceFuel.list,
                  {
                    params: {
                      schoolId: e._id,
                      search: {
                        vehicle: t.vehicle,
                        firm: t.firm,
                        fromDate: Be()(t.fromDate).format("YYYY/MM/DD"),
                        toDate: Be()(t.toDate).format("YYYY/MM/DD"),
                      },
                    },
                  }
                );
                console.log(l.result, "firm"),
                  a(l.result.map((e) => ({ ...e, firmName: e.firm })));
              } catch (l) {
                console.log(l);
              }
            },
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var t;
              const { data: a } = await (0, Se.Jt)(ke.r.vehicle.list, {
                params: { schoolId: e._id },
              });
              x(a.result.map((e) => ({ ...e, label: e.number, value: e._id }))),
                g.setFieldValue(
                  "vehicle",
                  null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                );
            } catch (a) {
              console.log(a);
            }
          })(),
            (async () => {
              try {
                var t;
                const { data: a } = await (0, Se.Jt)(ke.r.firm.list, {
                  params: { schoolId: e._id },
                });
                p(a.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  g.setFieldValue(
                    "firm",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })();
        }, [e]);
        const A = (0, et.Wx)({
          initialValues: {
            vehicle:
              (null === s || void 0 === s ? void 0 : s.vehicle._id) || "",
            firm: (null === s || void 0 === s ? void 0 : s.firm._id) || "",
            date: (null === s || void 0 === s ? void 0 : s.date) || "",
            billNo: (null === s || void 0 === s ? void 0 : s.billNo) || "",
            fuelQuantity:
              (null === s || void 0 === s ? void 0 : s.fuelQuantity) || "",
            rate: (null === s || void 0 === s ? void 0 : s.rate) || "",
            amount: (null === s || void 0 === s ? void 0 : s.amount) || "",
            kiloMeter:
              (null === s || void 0 === s ? void 0 : s.kiloMeter) || "",
          },
          onSubmit: async (t) => {
            try {
              d(!0);
              const a = new FormData();
              if (
                (a.append("schoolId", e._id),
                a.append("vehicle", t.vehicle),
                a.append("firm", t.firm),
                a.append("date", Be()(t.date).format("YYYY-MM-DD")),
                a.append("billNo", t.billNo),
                a.append("fuelQuantity", t.fuelQuantity),
                a.append("rate", t.rate),
                a.append("amount", t.amount),
                a.append("kiloMeter", t.kiloMeter),
                c.forEach((e) => a.append("file", e)),
                s)
              ) {
                const { data: e } = await (0, Se.yJ)(
                  ke.r.maintenanceFuel.update + "/" + s._id,
                  a,
                  { headers: { "Content-Type": "multipart/form-data" } }
                );
              } else {
                const { data: e } = await (0, Se.bE)(
                  ke.r.maintenanceFuel.create,
                  a,
                  { headers: { "Content-Type": "multipart/form-data" } }
                );
              }
              j();
            } catch (a) {
              console.log(a);
            }
            d(!1);
          },
          enableReinitialize: !0,
        });
        (0, l.useEffect)(() => {
          g.values.vehicle && g.values.firm && g.handleSubmit();
        }, [g.values.vehicle, g.values.firm, e]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsx)("form", {
                onSubmit: g.handleSubmit,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "vehicle",
                        formik: g,
                        label: "Select Vehicle",
                        options: u,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "firm",
                        formik: g,
                        label: "Select Firm",
                        options: h,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: g,
                        label: "From Date",
                        name: "fromDate",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: g,
                        label: "To Date",
                        name: "toDate",
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      md: 12,
                      lg: 12,
                      display: "flex",
                      justifyContent: "flex-end",
                      alignSelf: "center",
                      gap: 1,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          type: "submit",
                          variant: "contained",
                          children: "Find",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          children: "Print",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
            (0, re.jsx)($e.A, {
              variant: "contained",
              onClick: () => {
                i(!0);
              },
              startIcon: (0, re.jsx)(rs.A, {}),
              sx: { mt: 1, mb: 2 },
              children: "Add",
            }),
            (0, re.jsx)(jt.A, {
              tableKeys: ld,
              bodyData: t,
              bodyDataModal: "fuel",
              actions: ["edit", "delete"],
              onEditClick: (e) => {
                o(e), i(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.maintenanceFuel.delete + "/" + e);
                  g.handleSubmit();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(pt, {
              open: n,
              formik: A,
              formTitle: s ? "Update Fuel" : "Add Fuel",
              onClose: j,
              submitButtonTitle: s ? "Update" : "Submit",
              adding: r,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: A,
                      name: "vehicle",
                      label: "Vehicle",
                      required: !0,
                      options: u,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      formik: A,
                      name: "firm",
                      label: "Firm",
                      required: !0,
                      options: h,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: A,
                      name: "date",
                      label: "Date",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: A,
                      name: "billNo",
                      label: "Bill No",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: A,
                      name: "fuelQuantity",
                      label: "Fuel Quantity",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: A,
                      name: "rate",
                      label: "Rate",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: A,
                      name: "amount",
                      label: "Amount",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: A,
                      name: "kiloMeter",
                      label: "Kilo Meter",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(Ol.A, {
                      name: "receipt",
                      label: "Select File",
                      onChange: (e) =>
                        ((e, t) => {
                          const { files: a } = e.target;
                          let l = [];
                          if (a.length > 0) {
                            for (let e = 0; e < a.length; e++) {
                              const t = a[e];
                              l.push(t);
                            }
                            m(l);
                          } else console.log("No files selected");
                        })(e),
                      previousFile:
                        null === s || void 0 === s ? void 0 : s.receipt,
                      customOnChange: !0,
                      selectedFiles: c,
                      onRemove: (e) =>
                        ((e, t) => {
                          m(c.filter((t) => t.name != e));
                        })(e),
                    }),
                  }),
                  s && null !== s && void 0 !== s && s.receipt
                    ? (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 6,
                        item: !0,
                        children: (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          onClick: () => {
                            const e =
                              null === s || void 0 === s ? void 0 : s.receipt;
                            e && window.open(e, "_blank");
                          },
                          children: "Download File",
                        }),
                      })
                    : null,
                ],
              }),
            }),
          ],
        });
      }
      const id = [
        { name: "Date", key: "date", isDate: !0 },
        { name: "Particulars", key: "particulars" },
        { name: "Amount", key: "amount" },
      ];
      function sd() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          h = () => {
            i(!1), o(null);
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var t;
              const { data: a } = await (0, Se.Jt)(ke.r.vehicle.list, {
                params: { schoolId: e._id },
              });
              m(a.result.map((e) => ({ ...e, label: e.number, value: e._id }))),
                p.setFieldValue(
                  "vehicle",
                  null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                );
            } catch (a) {
              console.log(a);
            }
          })(),
            (async () => {
              try {
                var t;
                const { data: a } = await (0, Se.Jt)(ke.r.firm.list, {
                  params: { schoolId: e._id },
                });
                x(a.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  p.setFieldValue(
                    "firm",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })();
        }, [e]);
        const p = (0, et.Wx)({
            initialValues: {
              vehicle: "",
              firm: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: async (t) => {
              try {
                const { data: l } = await (0, Se.Jt)(
                  ke.r.maintenanceRepair.list,
                  {
                    params: {
                      schoolId: e._id,
                      search: {
                        vehicle: t.vehicle,
                        firm: t.firm,
                        fromDate: Be()(t.fromDate).format("YYYY/MM/DD"),
                        toDate: Be()(t.toDate).format("YYYY/MM/DD"),
                      },
                    },
                  }
                );
                a(l.result);
              } catch (l) {
                console.log(l);
              }
            },
          }),
          j = (0, et.Wx)({
            initialValues: {
              vehicle:
                (null === s || void 0 === s ? void 0 : s.vehicle._id) || "",
              firm: (null === s || void 0 === s ? void 0 : s.firm._id) || "",
              date: (null === s || void 0 === s ? void 0 : s.date) || "",
              particulars: null === s || void 0 === s ? void 0 : s.particulars,
              amount: null === s || void 0 === s ? void 0 : s.amount,
            },
            onSubmit: async (t) => {
              try {
                const a = {
                  ...t,
                  schoolId: e._id,
                  date: Be()(t.date).format("YYYY/MM/DD"),
                };
                if ((console.log(a, "kkkkkk"), d(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.maintenanceRepair.update + "/" + s._id,
                    a
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.maintenanceRepair.create,
                    a
                  );
                }
                h();
              } catch (a) {
                console.log(a);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (
          (0, l.useEffect)(() => {
            p.values.vehicle && p.values.firm && p.handleSubmit();
          }, [p.values.vehicle, p.values.firm, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsx)("form", {
                  onSubmit: p.handleSubmit,
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "vehicle",
                          formik: p,
                          label: "Select Vehicle",
                          options: c,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "firm",
                          formik: p,
                          label: "Select Firm",
                          options: u,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: p,
                          label: "From Date",
                          name: "fromDate",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: p,
                          label: "To Date",
                          name: "toDate",
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        md: 12,
                        lg: 12,
                        display: "flex",
                        justifyContent: "flex-end",
                        alignSelf: "center",
                        gap: 1,
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            type: "submit",
                            variant: "contained",
                            children: "Find",
                          }),
                          (0, re.jsx)($e.A, {
                            size: "small",
                            variant: "contained",
                            children: "Print",
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
              (0, re.jsx)($e.A, {
                variant: "contained",
                onClick: () => {
                  i(!0);
                },
                startIcon: (0, re.jsx)(rs.A, {}),
                sx: { mt: 1, mb: 2 },
                children: "Add",
              }),
              (0, re.jsx)(jt.A, {
                actions: ["edit", "delete"],
                bodyData: t,
                tableKeys: id,
                bodyDataModal: "Repair Maintenance",
                onEditClick: (e) => {
                  o(e), i(!0);
                },
                onDeleteClick: async (e) => {
                  try {
                    await (0, Se.yH)(ke.r.maintenanceRepair.delete + "/" + e);
                    p.handleSubmit();
                  } catch (t) {
                    console.error(t);
                  }
                },
              }),
              (0, re.jsx)(pt, {
                open: n,
                formik: j,
                formTitle: s
                  ? "Update Repair Maintenance"
                  : "Add Repair Maintenance",
                onClose: h,
                submitButtonTitle: s ? "Update" : "Submit",
                adding: r,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "vehicle",
                        formik: j,
                        label: "Select Vehicle",
                        options: c,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "firm",
                        formik: j,
                        label: "Select Firm",
                        options: u,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: j,
                        name: "date",
                        label: "Date",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "particulars",
                        label: "Particulars",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "amount",
                        label: "Amount",
                        required: !0,
                      }),
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      const od = [
        { name: "Date", key: "date", isDate: !0 },
        { name: "Firm", key: "name", path: "firmName" },
        { name: "Km Reading", key: "kmReading" },
        { name: "Km Run", key: "kmRun" },
        { name: "Tyre", key: "tyre" },
        { name: "Amount", key: "amount" },
      ];
      function rd() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          h = () => {
            i(!1), o(null);
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var t;
              const { data: a } = await (0, Se.Jt)(ke.r.vehicle.list, {
                params: { schoolId: e._id },
              });
              m(a.result.map((e) => ({ ...e, label: e.number, value: e._id }))),
                p.setFieldValue(
                  "vehicle",
                  null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                );
            } catch (a) {
              console.log(a);
            }
          })(),
            (async () => {
              try {
                var t;
                const { data: a } = await (0, Se.Jt)(ke.r.firm.list, {
                  params: { schoolId: e._id },
                });
                x(a.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  p.setFieldValue(
                    "firm",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })();
        }, [e]);
        const p = (0, et.Wx)({
            initialValues: {
              vehicle: "",
              firm: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: async (t) => {
              try {
                const { data: l } = await (0, Se.Jt)(
                  ke.r.maintenanceTyre.list,
                  {
                    params: {
                      schoolId: e._id,
                      search: {
                        vehicle: t.vehicle,
                        firm: t.firm,
                        fromDate: Be()(t.fromDate).format("YYYY/MM/DD"),
                        toDate: Be()(t.toDate).format("YYYY/MM/DD"),
                      },
                    },
                  }
                );
                a(l.result.map((e) => ({ ...e, firmName: e.firm })));
              } catch (l) {
                console.log(l);
              }
            },
          }),
          j = (0, et.Wx)({
            initialValues: {
              vehicle:
                (null === s || void 0 === s ? void 0 : s.vehicle._id) || "",
              firm: (null === s || void 0 === s ? void 0 : s.firm._id) || "",
              kmReading:
                (null === s || void 0 === s ? void 0 : s.kmReading) || "",
              kmRun: (null === s || void 0 === s ? void 0 : s.kmRun) || "",
              tyre: (null === s || void 0 === s ? void 0 : s.tyre) || "",
              date: (null === s || void 0 === s ? void 0 : s.date) || null,
              amount: (null === s || void 0 === s ? void 0 : s.amount) || "",
              rate: (null === s || void 0 === s ? void 0 : s.rate) || "",
              tyreNo: (null === s || void 0 === s ? void 0 : s.tyreNo) || "",
            },
            onSubmit: async (t) => {
              try {
                const a = {
                  ...t,
                  schoolId: e._id,
                  date: Be()(t.date).format("YYYY/MM/DD"),
                };
                if ((d(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.maintenanceTyre.update + "/" + s._id,
                    a
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.maintenanceTyre.create,
                    a
                  );
                }
                h();
              } catch (a) {
                console.log(a);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (
          (0, l.useEffect)(() => {
            p.values.vehicle && p.values.firm && p.handleSubmit();
          }, [p.values.vehicle, p.values.firm, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsx)("form", {
                  onSubmit: p.handleSubmit,
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "vehicle",
                          formik: p,
                          label: "Select Vehicle",
                          options: c,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "firm",
                          formik: p,
                          label: "Select Firm",
                          options: u,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: p,
                          label: "From Date",
                          name: "fromDate",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: p,
                          label: "To Date",
                          name: "toDate",
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        md: 12,
                        lg: 12,
                        display: "flex",
                        justifyContent: "flex-end",
                        alignSelf: "center",
                        gap: 1,
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            type: "submit",
                            variant: "contained",
                            children: "Find",
                          }),
                          (0, re.jsx)($e.A, {
                            size: "small",
                            variant: "contained",
                            children: "Print",
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
              (0, re.jsx)($e.A, {
                variant: "contained",
                onClick: () => {
                  i(!0);
                },
                startIcon: (0, re.jsx)(rs.A, {}),
                sx: { mt: 1, mb: 2 },
                children: "Add",
              }),
              (0, re.jsx)(jt.A, {
                actions: ["edit", "delete"],
                tableKeys: od,
                bodyData: t,
                bodyDataModal: "tyre/resole",
                onEditClick: (e) => {
                  o(e), i(!0);
                },
                onDeleteClick: async (e) => {
                  try {
                    await (0, Se.yH)(ke.r.maintenanceTyre.delete + "/" + e);
                    p.handleSubmit();
                  } catch (t) {
                    console.error(t);
                  }
                },
              }),
              (0, re.jsx)(pt, {
                open: n,
                formik: j,
                formTitle: s
                  ? "Update Vehicle Tyre/Resole"
                  : "Add  Vehicle Tyre/Resole",
                onClose: h,
                submitButtonTitle: s ? "Update" : "Submit",
                adding: r,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "vehicle",
                        formik: j,
                        label: "Select Vehicle",
                        options: c,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "firm",
                        formik: j,
                        label: "Select Firm",
                        options: u,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: j,
                        name: "date",
                        label: "Date",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "kmReading",
                        label: "Km Reading",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "kmRun",
                        label: "Km Run",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "tyre",
                        label: "Tyre",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "amount",
                        label: "Amount",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "rate",
                        label: "Rate",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: j,
                        name: "tyreNo",
                        label: "Tyre No",
                        required: !0,
                      }),
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      const dd = [
        { name: "Date", key: "date", isDate: !0 },
        { name: "Amount", key: "amount" },
      ];
      function cd() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)([]),
          u = () => {
            i(!1), o(null);
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              var t;
              const { data: a } = await (0, Se.Jt)(ke.r.vehicle.list, {
                params: { schoolId: e._id },
              });
              m(a.result.map((e) => ({ ...e, label: e.number, value: e._id }))),
                x.setFieldValue(
                  "vehicle",
                  null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                );
            } catch (a) {
              console.log(a);
            }
          })();
        }, [e]);
        const x = (0, et.Wx)({
            initialValues: {
              vehicle: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: async (t) => {
              try {
                const { data: l } = await (0, Se.Jt)(
                  ke.r.maintenanceGreecing.list,
                  {
                    params: {
                      schoolId: e._id,
                      search: {
                        vehicle: t.vehicle,
                        fromDate: Be()(t.fromDate).format("YYYY/MM/DD"),
                        toDate: Be()(t.toDate).format("YYYY/MM/DD"),
                      },
                    },
                  }
                );
                a(l.result), console.log(l.result, "kkkkkkk");
              } catch (l) {
                console.log(l);
              }
            },
          }),
          h = (0, et.Wx)({
            initialValues: {
              vehicle:
                (null === s || void 0 === s ? void 0 : s.vehicle._id) || "",
              date: (null === s || void 0 === s ? void 0 : s.date) || null,
              amount: null === s || void 0 === s ? void 0 : s.amount,
            },
            onSubmit: async (t) => {
              try {
                const a = {
                  ...t,
                  schoolId: e._id,
                  date: Be()(t.date).format("YYYY/MM/DD"),
                };
                if ((d(!0), s)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.maintenanceGreecing.update + "/" + s._id,
                    a
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.maintenanceGreecing.create,
                    a
                  );
                }
                u();
              } catch (a) {
                console.log(a);
              }
              d(!1);
            },
            enableReinitialize: !0,
          });
        return (
          (0, l.useEffect)(() => {
            x.values.vehicle && x.handleSubmit();
          }, [x.values.vehicle, e]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsx)("form", {
                  onSubmit: x.handleSubmit,
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "vehicle",
                          formik: x,
                          label: "Select Vehicle",
                          options: c,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: x,
                          label: "From Date",
                          name: "fromDate",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(qt.A, {
                          formik: x,
                          label: "To Date",
                          name: "toDate",
                        }),
                      }),
                      (0, re.jsxs)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        md: 12,
                        lg: 12,
                        display: "flex",
                        justifyContent: "flex-end",
                        alignSelf: "center",
                        gap: 1,
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            type: "submit",
                            variant: "contained",
                            children: "Find",
                          }),
                          (0, re.jsx)($e.A, {
                            size: "small",
                            variant: "contained",
                            children: "Print",
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
              (0, re.jsx)($e.A, {
                variant: "contained",
                onClick: () => {
                  i(!0);
                },
                startIcon: (0, re.jsx)(rs.A, {}),
                sx: { mt: 1, mb: 2 },
                children: "Add",
              }),
              (0, re.jsx)(jt.A, {
                actions: ["edit", "delete"],
                bodyData: t,
                tableKeys: dd,
                bodyDataModal: "greecing",
                onEditClick: (e) => {
                  o(e), i(!0);
                },
                onDeleteClick: async (e) => {
                  try {
                    await (0, Se.yH)(ke.r.maintenanceGreecing.delete + "/" + e);
                    x.handleSubmit();
                  } catch (t) {
                    console.error(t);
                  }
                },
              }),
              (0, re.jsx)(pt, {
                open: n,
                formik: h,
                formTitle: s ? "Update Greecing" : "Add Greecing",
                onClose: u,
                submitButtonTitle: s ? "Update" : "Submit",
                adding: r,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        formik: h,
                        name: "vehicle",
                        label: "Vehicle",
                        required: !0,
                        options: c,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: h,
                        name: "date",
                        label: "Date",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: h,
                        name: "amount",
                        label: "Amount",
                        required: !0,
                      }),
                    }),
                  ],
                }),
              }),
            ],
          })
        );
      }
      function md() {
        const [e, t] = (0, l.useState)(0);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Vehicle Maintenance:" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, a) => t(a),
              value: e,
              labels: [
                "Firm",
                "Vehicle Fuel",
                "Repair Maintenance",
                "New Tyre/Resole",
                "Greecing",
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 0,
              value: e,
              children: (0, re.jsx)(ad, {}),
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: e,
              children: (0, re.jsx)(nd, {}),
            }),
            (0, re.jsx)(Ct.A, {
              index: 2,
              value: e,
              children: (0, re.jsx)(sd, {}),
            }),
            (0, re.jsx)(Ct.A, {
              index: 3,
              value: e,
              children: (0, re.jsx)(rd, {}),
            }),
            (0, re.jsx)(Ct.A, {
              index: 4,
              value: e,
              children: (0, re.jsx)(cd, {}),
            }),
          ],
        });
      }
      const ud = [
          { name: "Grade Id", key: "gradeCode" },
          { name: "Grade", key: "grade" },
          { name: "From", key: "from" },
          { name: "To", key: "to" },
          { name: "Active", key: "active" },
        ],
        xd = [
          { label: "Active", value: !0 },
          { label: "Inactive", value: !1 },
        ];
      function hd() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          { isDarkMode: t } = (0, l.useContext)(st.A),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)(null),
          [o, r] = (0, l.useState)(!1),
          [d, c] = (0, l.useState)(!1),
          m = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.salaryGrade.list, {
                params: { schoolId: e._id },
              });
              n(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          m();
        }, [e]);
        const x = () => {
            r(!1), s(null);
          },
          h = (0, et.Wx)({
            initialValues: {
              grade: (null === i || void 0 === i ? void 0 : i.grade) || "",
              active: (null === i || void 0 === i ? void 0 : i.active) || !0,
              from: (null === i || void 0 === i ? void 0 : i.from) || "",
              to: (null === i || void 0 === i ? void 0 : i.to) || "",
              breakups: (null === i || void 0 === i ? void 0 : i.breakups) || [
                { id: 1, name: "", percentage: "" },
              ],
              deduction: (null === i || void 0 === i
                ? void 0
                : i.deduction) || [{ id: 1, name: "", percentage: "" }],
            },
            onSubmit: async (t) => {
              try {
                const a = { ...t, schoolId: e._id };
                if ((c(!0), i)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.salaryGrade.update + "/" + i._id,
                    a
                  );
                  m();
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.salaryGrade.create,
                    a
                  );
                  m();
                }
                x();
              } catch (a) {
                console.log(a);
              }
              c(!1);
            },
            enableReinitialize: !0,
          }),
          p = (e, t, a) => {
            h.setFieldValue(
              a,
              h.values[a].map((a) =>
                a.id === t.id ? { ...a, [e.target.name]: e.target.value } : a
              )
            );
          },
          j = (e) => {
            const t = [...h.values[e]],
              a = { id: t.length + 1, name: "", percentage: "" };
            h.setFieldValue(e, [...t, a]);
          },
          g = (e, t) => {
            const a = [...h.values[t]];
            a.splice(e, 1), h.setFieldValue(t, a);
          };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Salary Grade" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "delete"],
              tableKeys: ud,
              bodyDataModal: "salary grade",
              bodyData: a,
              onEditClick: (e) => {
                s(e), r(!0);
              },
              onDeleteClick: async (e) => {
                try {
                  await (0, Se.yH)(ke.r.salaryGrade.delete + "/" + e);
                  m();
                } catch (t) {
                  console.error(t);
                }
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Salary grade",
              onAddClick: () => {
                r(!0);
              },
            }),
            (0, re.jsxs)(pt, {
              open: o,
              formik: h,
              formTitle: i ? "Update Salary Grade" : "Add Salary Grade",
              onClose: x,
              submitButtonTitle: i ? "Update" : "Submit",
              adding: d,
              children: [
                (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 0,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: h,
                        name: "grade",
                        label: "Grade",
                        required: !0,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: h,
                        name: "from",
                        label: "From",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        formik: h,
                        name: "to",
                        label: "To",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 6,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        name: "active",
                        formik: h,
                        label: "Status",
                        options: xd,
                      }),
                    }),
                  ],
                }),
                h.values.breakups.map((e, a) =>
                  (0, re.jsxs)(re.Fragment, {
                    children: [
                      (0, re.jsx)(u.A, {
                        fontWeight: "bold",
                        mt: 1,
                        children: "Breakups:",
                      }),
                      (0, re.jsxs)(
                        xe.Ay,
                        {
                          container: !0,
                          gap: 1,
                          sx: {
                            backgroundColor: t ? "transparent" : "#F0F8FF",
                            borderRadius: "5px",
                            padding: "20px 15px 30px 15px",
                            border: "1px solid lightgrey",
                            my: 1.5,
                          },
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              sm: 4,
                              md: 4,
                              item: !0,
                              children: (0, re.jsx)(li, {
                                value:
                                  null === e || void 0 === e ? void 0 : e.name,
                                name: "name",
                                label: "Name",
                                required: !0,
                                onChange: (t) => p(t, e, "breakups"),
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              sm: 4,
                              md: 4,
                              item: !0,
                              children: (0, re.jsx)(li, {
                                value:
                                  null === e || void 0 === e
                                    ? void 0
                                    : e.percentage,
                                name: "percentage",
                                label: "Percentage",
                                required: !0,
                                onChange: (t) => p(t, e, "breakups"),
                              }),
                            }),
                            (0, re.jsxs)(xe.Ay, {
                              xs: 12,
                              sm: 3,
                              md: 3,
                              item: !0,
                              sx: {
                                fontSize: 16,
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "flex-end",
                              },
                              children: [
                                (0, re.jsx)($e.A, {
                                  onClick: () => j("breakups"),
                                  children: (0, re.jsx)(ot.A, {}),
                                }),
                                (0, re.jsx)($e.A, {
                                  color: "error",
                                  onClick: () => g(a, "breakups"),
                                  children: (0, re.jsx)(bs.A, {
                                    color: "error",
                                  }),
                                }),
                              ],
                            }),
                          ],
                        },
                        a
                      ),
                    ],
                  })
                ),
                h.values.deduction.map((e, a) =>
                  (0, re.jsxs)(re.Fragment, {
                    children: [
                      (0, re.jsx)(u.A, {
                        fontWeight: "bold",
                        mt: 1,
                        children: "Deduction:",
                      }),
                      (0, re.jsxs)(
                        xe.Ay,
                        {
                          container: !0,
                          gap: 1,
                          sx: {
                            backgroundColor: t ? "transparent" : "#F0F8FF",
                            borderRadius: "5px",
                            padding: "20px 15px 30px 15px",
                            border: "1px solid lightgrey",
                            my: 1.5,
                          },
                          children: [
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              sm: 4,
                              md: 4,
                              item: !0,
                              children: (0, re.jsx)(li, {
                                value:
                                  null === e || void 0 === e ? void 0 : e.name,
                                name: "name",
                                label: "Name",
                                required: !0,
                                onChange: (t) => p(t, e, "deduction"),
                              }),
                            }),
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              sm: 4,
                              md: 4,
                              item: !0,
                              children: (0, re.jsx)(li, {
                                value:
                                  null === e || void 0 === e
                                    ? void 0
                                    : e.percentage,
                                name: "percentage",
                                label: "Percentage",
                                required: !0,
                                onChange: (t) => p(t, e, "deduction"),
                              }),
                            }),
                            (0, re.jsxs)(xe.Ay, {
                              xs: 12,
                              sm: 3,
                              md: 3,
                              item: !0,
                              sx: {
                                fontSize: 16,
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "flex-end",
                              },
                              children: [
                                (0, re.jsx)($e.A, {
                                  onClick: () => j("deduction"),
                                  children: (0, re.jsx)(ot.A, {}),
                                }),
                                (0, re.jsx)($e.A, {
                                  color: "error",
                                  onClick: () => g(a, "deduction"),
                                  children: (0, re.jsx)(bs.A, {
                                    color: "error",
                                  }),
                                }),
                              ],
                            }),
                          ],
                        },
                        a
                      ),
                    ],
                  })
                ),
              ],
            }),
          ],
        });
      }
      const pd = [
        { name: "Month", key: "month" },
        { name: "Year", key: "year" },
      ];
      function jd() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)(!1),
          [u, x] = (0, l.useState)([]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.salaryGrade.list, {
                params: { schoolId: e._id },
              });
              let a = [];
              for (let e of t.result) {
                let t = e.deduction.map((e) => ({
                  ...e,
                  label: e.name,
                  value: e.name,
                }));
                a = [...a, ...t];
              }
              x(a);
            } catch (t) {
              console.log(t);
            }
          })();
        }, [e]);
        const h = (0, et.Wx)({
            initialValues: { month: new Date(), year: new Date() },
            onSubmit: async (t) => {
              d(!0);
              try {
                const a = Be()(t.month).format("MMMM"),
                  { data: l } = await (0, Se.Jt)(
                    ke.r.paymentHistory.downloadPdf,
                    {
                      params: { month: a, year: t.year, schoolId: e._id },
                      responseType: "blob",
                    }
                  );
                Dl("application/pdf", l, "Salary_Slip_".concat(a)), j();
              } catch (a) {
                console.log(a);
              }
              d(!1);
            },
          }),
          p = (0, et.Wx)({
            initialValues: { type: new Date(), date: new Date() },
            onSubmit: async (t) => {
              t.date;
              const a = t.type;
              m(!0);
              try {
                const l = Be()(t.month).format("MMMM"),
                  { data: n } = await (0, Se.Jt)(
                    ke.r.paymentHistory.downloadDeductionPdf,
                    {
                      params: { month: l, deduction: a, schoolId: e._id },
                      responseType: "blob",
                    }
                  );
                Dl("application/pdf", n, "Deductions-".concat(l));
              } catch (l) {
                console.log(l);
              }
              m(!1);
            },
          }),
          j = async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.paymentHistory.list, {
                params: { schoolId: e._id },
              });
              o(t.result);
            } catch (t) {
              console.log(t);
            }
          };
        (0, l.useEffect)(() => {
          1 === t && j();
        }, [t]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Employee" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => a(t),
              value: t,
              labels: ["Salary Sheet", "History", "Salary Deduction"],
            }),
            (0, re.jsx)(Ct.A, {
              index: 0,
              value: t,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: h,
                        label: "Month",
                        name: "month",
                        openTo: "month",
                        inputFormat: "MMM",
                        views: ["month"],
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: h,
                        label: "Year",
                        name: "year",
                        openTo: "year",
                        inputFormat: "YYYY",
                        views: ["year"],
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center" },
                      children: (0, re.jsx)(ht.A, {
                        loading: r,
                        onClick: h.handleSubmit,
                        size: "small",
                        variant: "contained",
                        children: "Process",
                      }),
                    }),
                  ],
                }),
              }),
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: t,
              children: (0, re.jsx)(jt.A, {
                actions: ["download"],
                tableKeys: pd,
                bodyData: s,
                bodyDataModal: "history",
                onDownloadClick: (e) => {
                  window.open(e.data);
                },
              }),
            }),
            (0, re.jsx)(Ct.A, {
              index: 2,
              value: t,
              children: (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "type",
                        formik: p,
                        label: "Select Deduction Type",
                        options: u,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      sm: 6,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(qt.A, {
                        formik: p,
                        label: "Date",
                        openTo: "month",
                        inputFormat: "MMM/YYYY",
                        views: ["month", "year"],
                        name: "date",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      style: { alignSelf: "center" },
                      item: !0,
                      children: (0, re.jsx)(ht.A, {
                        onClick: p.handleSubmit,
                        loading: c,
                        size: "small",
                        variant: "contained",
                        children: "Find",
                      }),
                    }),
                  ],
                }),
              }),
            }),
          ],
        });
      }
      const gd = [
        { name: "Group By Data", key: "groupByData", isDate: !0 },
        { name: "Issue Total", key: "totalIssues" },
        { name: "Return Total", key: "totalReturns" },
      ];
      var Ad = a(28994),
        yd = a(60163),
        fd = a(4240),
        vd = a(17869);
      const bd = [
          { name: "Issue", value: 400 },
          { name: "Return", value: 300 },
          { name: "Remain", value: 300 },
        ],
        Sd = ["#FFBB28", "#00C49F", "#32CD32"],
        kd = [
          { label: "Daily", value: "daily" },
          { label: "Weekly", value: "weekly" },
          { label: "Monthly", value: "monthly" },
          { label: "Class", value: "class" },
        ],
        Cd = (0, n.Ay)(xe.Ay)(() => ({
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        })),
        Dd = (0, n.Ay)(s.A)(() => ({
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          gap: "10px",
        }));
      function wd() {
        const [e, t] = (0, l.useState)(0),
          [a, n] = (0, l.useState)([]),
          { selectedSetting: i } = (0, l.useContext)(Ce.A),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          m = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              groupByData: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: async (e) => {
              try {
                const { data: t } = await (0, Se.Jt)(
                  ke.r.report.groupedLibraryData,
                  {
                    params: {
                      schoolId: i._id,
                      groupByData: e.groupByData,
                      fromDate: Be()(e.fromDate).format("YYYY/MM/DD"),
                      toDate: Be()(e.toDate).format("YYYY/MM/DD"),
                    },
                  }
                );
                n(t.result),
                  console.log(t.result, "data999999999999999999=======");
              } catch (t) {}
            },
          }),
          x = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              fromDate: Be()(new Date()),
              toDate: Be()(new Date()),
            },
            onSubmit: console.log("nnnn"),
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                r(
                  e.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                ),
                  c(
                    e.result.map((e) => ({
                      ...e,
                      label: "".concat(e.from, "-").concat(e.to),
                      value: e._id,
                    }))
                  ),
                  m.setFieldValue("academicYear", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })();
          }, [i]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Library Report" }),
              (0, re.jsx)(kt.A, {
                onChange: (e, a) => t(a),
                value: e,
                labels: ["Tabular Report", "Grapical Report"],
              }),
              (0, re.jsxs)(Ct.A, {
                index: 0,
                value: e,
                children: [
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, marginBottom: 2 },
                    children: (0, re.jsx)("form", {
                      onSubmit: m.handleSubmit,
                      children: (0, re.jsxs)(xe.Ay, {
                        rowSpacing: 1,
                        columnSpacing: 2,
                        container: !0,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "academicYear",
                              formik: m,
                              label: "Select Academic Year",
                              options: o,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "groupByData",
                              formik: m,
                              label: "Select Group By Data",
                              options: kd,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 6,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              formik: m,
                              label: "From Date",
                              name: "fromDate",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            sm: 6,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              formik: m,
                              label: "To Date",
                              name: "toDate",
                            }),
                          }),
                          (0, re.jsxs)(xe.Ay, {
                            xs: 12,
                            md: 12,
                            lg: 12,
                            display: "flex",
                            justifyContent: "flex-end",
                            alignSelf: "center",
                            gap: 1,
                            item: !0,
                            children: [
                              (0, re.jsx)($e.A, {
                                type: "submit",
                                size: "small",
                                variant: "contained",
                                children: "Find",
                              }),
                              (0, re.jsx)($e.A, {
                                size: "small",
                                variant: "contained",
                                onClick: async () => {
                                  try {
                                    Dl(
                                      "application/pdf",
                                      (
                                        await (0, Se.Jt)(
                                          ke.r.report
                                            .downloadGroupedLibraryData,
                                          {
                                            params: {
                                              schoolId: i._id,
                                              academicYear:
                                                m.values.academicYear,
                                              groupByData: m.values.groupByData,
                                              fromDate: Be()(
                                                m.values.fromDate
                                              ).format("YYYY/MM/DD"),
                                              toDate: Be()(
                                                m.values.toDate
                                              ).format("YYYY/MM/DD"),
                                            },
                                            responseType: "blob",
                                          }
                                        )
                                      ).data,
                                      "libraryReport.pdf"
                                    );
                                  } catch (e) {
                                    console.log(e);
                                  }
                                },
                                children: "Print",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                  }),
                  (0, re.jsx)(jt.A, {
                    tableKeys: gd,
                    bodyData: a,
                    bodyDataModal: "library report",
                    actions: [],
                  }),
                ],
              }),
              (0, re.jsxs)(Ct.A, {
                index: 1,
                value: e,
                children: [
                  (0, re.jsx)(ue.A, {
                    sx: { padding: 2, mb: 2 },
                    children: (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "academicYear",
                            formik: x,
                            label: "Select Academic Year",
                            options: d,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            formik: x,
                            label: "From Date",
                            name: "fromDate",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          sm: 6,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            formik: x,
                            label: "To Date",
                            name: "toDate",
                          }),
                        }),
                        (0, re.jsxs)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          display: "flex",
                          alignSelf: "center",
                          gap: 1,
                          item: !0,
                          children: [
                            (0, re.jsx)($e.A, {
                              size: "small",
                              variant: "contained",
                              children: "Find",
                            }),
                            (0, re.jsx)($e.A, {
                              size: "small",
                              variant: "contained",
                              children: "Print",
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(Cd, {
                    container: !0,
                    children: (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      sm: 12,
                      md: 6,
                      lg: 4,
                      children: (0, re.jsxs)(ue.A, {
                        sx: { padding: 2, mt: 2 },
                        children: [
                          (0, re.jsx)("img", {
                            src: i.logo,
                            height: 60,
                            width: 60,
                            style: { display: "block", margin: "auto" },
                          }),
                          (0, re.jsx)(u.A, {
                            fontSize: 18,
                            textAlign: "center",
                            children: i.name,
                          }),
                          (0, re.jsx)(u.A, {
                            gutterBottom: !0,
                            fontSize: 12,
                            textAlign: "center",
                            children: i.address,
                          }),
                          (0, re.jsxs)(Dd, {
                            children: [
                              " ",
                              (0, re.jsx)(Ad.A, {
                                sx: { color: Oe.A.darkPalette.primary.main },
                              }),
                              (0, re.jsx)(u.A, {
                                textAlign: "center",
                                color: "error",
                                children: "Libary Report",
                              }),
                            ],
                          }),
                        ],
                      }),
                    }),
                  }),
                  (0, re.jsx)(s.A, {
                    display: "flex",
                    justifyContent: "center",
                    mt: 2,
                    children: (0, re.jsxs)(yd.r, {
                      width: 1e3,
                      height: 380,
                      children: [
                        (0, re.jsx)(fe.s, {
                          wrapperStyle: { textAlign: "center" },
                          formatter: (e) => e,
                        }),
                        (0, re.jsx)(fd.F, {
                          dataKey: "value",
                          isAnimationActive: !1,
                          data: bd,
                          outerRadius: 150,
                          label: !0,
                          children: bd.map((e, t) =>
                            (0, re.jsx)(vd.f, { fill: Sd[t % Sd.length] }, t)
                          ),
                        }),
                        (0, re.jsx)(ye.m, {}),
                      ],
                    }),
                  }),
                ],
              }),
            ],
          })
        );
      }
      function Id() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(null),
          [u, x] = (0, l.useState)(!1),
          h = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              class: "",
              section: "",
              student: "",
            },
            onSubmit: async (t) => {
              try {
                x(!0);
                const { data: a } = await (0, Se.Jt)(
                  ke.r.report.getStudentAttendanceReport,
                  {
                    params: {
                      schoolId: e._id,
                      academicYearId: t.academicYear,
                      studentId: t.student,
                    },
                  }
                );
                m(a.result), x(!1);
              } catch (a) {
                console.log(a), x(!1);
              }
            },
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              d(
                e.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                h.setFieldValue("academicYear", e.result[0]._id);
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                a(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  h.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e]),
          (0, l.useEffect)(() => {
            h.values.class &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: h.values.class },
                    },
                  });
                  i(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    h.setFieldValue("section", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [h.values.class, e]),
          (0, l.useEffect)(() => {
            h.values.academicYear &&
              h.values.class &&
              h.values.section &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        academicYear: h.values.academicYear,
                        "academicInfo.class": h.values.class,
                        "academicInfo.section": h.values.section,
                      },
                    },
                  });
                  o(
                    a.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    h.setFieldValue(
                      "student",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [h.values.academicYear, h.values.class, h.values.section, e]);
        const p = [];
        for (let l = 1; l <= 31; l++)
          p.push(
            (0, re.jsx)(
              ra.A,
              { sx: { color: "white", display: "inline" }, children: l },
              l
            )
          );
        const j = (e, t, a) => {
          const l = e["".concat(t, "-").concat(String(a).padStart(2, "0"))];
          return "present" === l ? "P" : "absent" === l ? "A" : "-";
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Student Yearly Attendance" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: h,
                      label: "Select Academic Year",
                      options: r,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: h,
                      label: "Select Class",
                      options: t,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: h,
                      label: "Select Section",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "student",
                      formik: h,
                      label: "Select Student",
                      options: s,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    item: !0,
                    display: "flex",
                    justifyContent: "flex-end",
                    children: (0, re.jsx)(ht.A, {
                      loading: u,
                      onClick: h.handleSubmit,
                      size: "small",
                      variant: "contained",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsxs)(ia.A, {
              children: [
                (0, re.jsx)(sa.A, {
                  sx: {
                    backgroundColor: (e) =>
                      "dark" === e.palette.mode
                        ? e.palette.primary.dark
                        : e.palette.primary.light,
                  },
                  children: (0, re.jsxs)(oa.A, {
                    children: [
                      (0, re.jsx)(ra.A, { align: "center", children: "Month" }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Working Days",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Present Days",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Absent Days",
                      }),
                      p.map((e) =>
                        (0, re.jsx)(
                          ra.A,
                          { align: "center", children: e.key },
                          e.key
                        )
                      ),
                    ],
                  }),
                }),
                (0, re.jsx)(ca.A, {
                  children:
                    c &&
                    Object.keys(c).map((e) =>
                      (0, re.jsxs)(
                        oa.A,
                        {
                          children: [
                            (0, re.jsx)(ra.A, { align: "center", children: e }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: c[e].totalWorkingDays,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: c[e].totalPresentDays,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: c[e].totalAbsentDays,
                            }),
                            p.map((t) =>
                              (0, re.jsx)(
                                ra.A,
                                {
                                  align: "center",
                                  children: j(c[e].attendance, e, t.key),
                                },
                                t.key
                              )
                            ),
                          ],
                        },
                        e
                      )
                    ),
                }),
              ],
            }),
          ],
        });
      }
      function Nd() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)(null),
          [r, d] = (0, l.useState)(!1),
          c = (0, et.Wx)({
            initialValues: { academicYear: "", employee: "" },
            onSubmit: async (t) => {
              try {
                d(!0);
                const { data: a } = await (0, Se.Jt)(
                  ke.r.report.getEmployeeAttendanceReport,
                  {
                    params: {
                      schoolId: e._id,
                      academicYearId: t.academicYear,
                      employeeId: t.employee,
                    },
                  }
                );
                o(a.result), d(!1);
              } catch (a) {
                console.log(a), d(!1);
              }
            },
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              c.setFieldValue("academicYear", e.result[0]._id),
                a(
                  e.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                );
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                var t;
                const { data: a } = await (0, Se.Jt)(ke.r.employee.list, {
                  params: { schoolId: e._id },
                });
                i(
                  a.result.map((e) => ({
                    ...e,
                    label: e.basicInfo.name,
                    value: e._id,
                  }))
                ),
                  c.setFieldValue(
                    "employee",
                    null === (t = a.result[0]) || void 0 === t ? void 0 : t._id
                  );
              } catch (a) {
                console.log(a);
              }
            })();
        }, [e._id]);
        const m = [];
        for (let l = 1; l <= 31; l++)
          m.push(
            (0, re.jsx)(
              ra.A,
              { sx: { color: "white", display: "inline" }, children: l },
              l
            )
          );
        const u = (e, t, a) => {
          const l = e["".concat(t, "-").concat(String(a).padStart(2, "0"))];
          return "present" === l
            ? "P"
            : "absent" === l
            ? "A"
            : "late" === l
            ? "L"
            : "-";
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Employee Yearly Attendance" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: c,
                      label: "Select Academic Year",
                      options: t,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "employee",
                      formik: c,
                      label: "Select Employee",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    alignSelf: "center",
                    children: (0, re.jsx)(ht.A, {
                      loading: r,
                      onClick: c.handleSubmit,
                      size: "small",
                      variant: "contained",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsxs)(ia.A, {
              children: [
                (0, re.jsx)(sa.A, {
                  sx: {
                    backgroundColor: (e) =>
                      "dark" === e.palette.mode
                        ? e.palette.primary.dark
                        : e.palette.primary.light,
                  },
                  children: (0, re.jsxs)(oa.A, {
                    children: [
                      (0, re.jsx)(ra.A, { align: "center", children: "Month" }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Working Days",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Present Days",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Absent Days",
                      }),
                      m.map((e) =>
                        (0, re.jsx)(
                          ra.A,
                          { align: "center", children: e.key },
                          e.key
                        )
                      ),
                    ],
                  }),
                }),
                (0, re.jsx)(ca.A, {
                  children:
                    s &&
                    Object.keys(s).map((e) =>
                      (0, re.jsxs)(
                        oa.A,
                        {
                          children: [
                            (0, re.jsx)(ra.A, { align: "center", children: e }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: s[e].totalWorkingDays,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: s[e].totalPresentDays,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: s[e].totalAbsentDays,
                            }),
                            m.map((t) =>
                              (0, re.jsx)(
                                ra.A,
                                {
                                  align: "center",
                                  children: u(s[e].attendance, e, t.key),
                                },
                                t.key
                              )
                            ),
                          ],
                        },
                        e
                      )
                    ),
                }),
              ],
            }),
          ],
        });
      }
      const _d = [
        { name: "Student", key: "studentName" },
        { name: "Section", key: "sectionName" },
        { name: "Activity", key: "activityName" },
        { name: "Activity Date", key: "activityDate", isDate: !0 },
      ];
      function Td() {
        const [e, t] = (0, l.useState)([]),
          { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          c = (0, et.Wx)({
            initialValues: { academicYear: "", class: "", student: "" },
            onSubmit: async (e) => {
              try {
                const { data: l } = await (0, Se.Jt)(
                  ke.r.report.getStudentActivityReport,
                  {
                    params: {
                      schoolId: a._id,
                      academicYearId: e.academicYear,
                      studentId: e.student,
                    },
                  }
                );
                t(l.result);
              } catch (l) {}
            },
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                d(
                  e.result.map((e) => ({
                    ...e,
                    label: "".concat(e.from, "-").concat(e.to),
                    value: e._id,
                  }))
                ),
                  c.setFieldValue("academicYear", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: a._id },
                  });
                  i(
                    e.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    c.setFieldValue("class", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [a]),
          (0, l.useEffect)(() => {
            c.values.academicYear &&
              c.values.class &&
              (async () => {
                try {
                  var e;
                  const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: a._id,
                      search: {
                        academicYear: c.values.academicYear,
                        "academicInfo.class": c.values.class,
                      },
                    },
                  });
                  o(
                    t.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    c.setFieldValue(
                      "student",
                      null === (e = t.result[0]) || void 0 === e
                        ? void 0
                        : e._id
                    );
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [c.values.academicYear, c.values.class, a]),
          (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Student Activity Report" }),
              (0, re.jsx)(ue.A, {
                sx: { padding: 2, marginBottom: 2 },
                children: (0, re.jsxs)("form", {
                  onSubmit: c.handleSubmit,
                  children: [
                    " ",
                    (0, re.jsxs)(xe.Ay, {
                      rowSpacing: 1,
                      columnSpacing: 2,
                      container: !0,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "academicYear",
                            formik: c,
                            label: "Select Academic Year",
                            options: r,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "class",
                            formik: c,
                            label: "Select Class",
                            options: n,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "student",
                            formik: c,
                            label: "Select Student",
                            options: s,
                          }),
                        }),
                        (0, re.jsxs)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          display: "flex",
                          gap: 1,
                          alignSelf: "center",
                          children: [
                            (0, re.jsx)($e.A, {
                              size: "small",
                              variant: "contained",
                              type: "submit",
                              children: "Find",
                            }),
                            (0, re.jsx)($e.A, {
                              size: "small",
                              variant: "contained",
                              onClick: async () => {
                                try {
                                  Dl(
                                    "application/pdf",
                                    (
                                      await (0, Se.Jt)(
                                        ke.r.report.getStudentActivityReportPdf,
                                        {
                                          params: {
                                            schoolId: a._id,
                                            academicYearId:
                                              c.values.academicYear,
                                            studentId: c.values.student,
                                          },
                                          responseType: "blob",
                                        }
                                      )
                                    ).data,
                                    "studentActivityReport.pdf"
                                  );
                                } catch (e) {
                                  console.log(e);
                                }
                              },
                              children: "Print",
                            }),
                          ],
                        }),
                      ],
                    }),
                  ],
                }),
              }),
              (0, re.jsx)(jt.A, {
                actions: [],
                tableKeys: _d,
                bodyDataModal: "student activity report",
                bodyData: e,
              }),
            ],
          })
        );
      }
      function Md() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(""),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)(!1),
          h = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              class: "",
              section: "",
              month: Be()(new Date()),
            },
            onSubmit: async (t) => {
              try {
                x(!0);
                const { data: t } = await (0, Se.Jt)(
                  ke.r.report.getAllStudentsAttendanceReportForParticularMonth,
                  {
                    params: {
                      schoolId: e._id,
                      month: new Date(h.values.month).getMonth() + 1,
                      year: new Date(h.values.month).getFullYear(),
                      academicYearId: h.values.academicYear,
                      classId: h.values.class,
                      sectionId: h.values.section,
                    },
                  }
                );
                o(t.result), d(Be()(h.values.month).format("YYYY-MM")), x(!1);
              } catch (a) {
                console.log(a), x(!1);
              }
            },
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              m(
                e.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                h.setFieldValue("academicYear", e.result[0]._id);
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                a(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  h.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e]),
          (0, l.useEffect)(() => {
            h.values.class &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: h.values.class },
                    },
                  });
                  i(
                    t.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    h.setFieldValue("section", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [h.values.class, e]);
        const p = [];
        for (let l = 1; l <= 31; l++)
          p.push(
            (0, re.jsx)(
              ra.A,
              { sx: { color: "white", display: "inline" }, children: l },
              l
            )
          );
        const j = (e, t, a) => {
          const l = e["".concat(t, "-").concat(String(a).padStart(2, "0"))];
          return "present" === l ? "P" : "absent" === l ? "A" : "-";
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Student Attendance Report" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: h,
                      options: c,
                      label: "Select Academic Year",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: h,
                      label: "Select Class",
                      options: t,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: h,
                      label: "Select Section",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: h,
                      label: "Month",
                      name: "month",
                      openTo: "month",
                      inputFormat: "MMM",
                      views: ["month"],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    item: !0,
                    display: "flex",
                    justifyContent: "flex-end",
                    children: (0, re.jsx)(ht.A, {
                      loading: u,
                      onClick: h.handleSubmit,
                      size: "small",
                      variant: "contained",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsxs)(ia.A, {
              children: [
                (0, re.jsx)(sa.A, {
                  sx: {
                    backgroundColor: (e) =>
                      "dark" === e.palette.mode
                        ? e.palette.primary.dark
                        : e.palette.primary.light,
                  },
                  children: (0, re.jsxs)(oa.A, {
                    children: [
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Student Name",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Working Days",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Present Days",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Absent Days",
                      }),
                      p.map((e) =>
                        (0, re.jsx)(
                          ra.A,
                          { align: "center", children: e.key },
                          e.key
                        )
                      ),
                    ],
                  }),
                }),
                (0, re.jsx)(ca.A, {
                  children: s.map((e) =>
                    (0, re.jsxs)(
                      oa.A,
                      {
                        children: [
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: e.studentName,
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: e.totalWorkingDays,
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: e.totalPresentDays,
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: e.totalAbsentDays,
                          }),
                          p.map((t) =>
                            (0, re.jsx)(
                              ra.A,
                              {
                                align: "center",
                                children: j(e.attendance, r, t.key),
                              },
                              t.key
                            )
                          ),
                        ],
                      },
                      e.studentId
                    )
                  ),
                }),
              ],
            }),
          ],
        });
      }
      function Fd() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(!1),
          [s, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)(""),
          c = (0, et.Wx)({
            initialValues: { academicYear: "", month: Be()(new Date()) },
            onSubmit: async (t) => {
              try {
                i(!0);
                const { data: t } = await (0, Se.Jt)(
                  ke.r.report.getAllEmployeesAttendanceReportForParticularMonth,
                  {
                    params: {
                      schoolId: e._id,
                      month: new Date(c.values.month).getMonth() + 1,
                      year: new Date(c.values.month).getFullYear(),
                      academicYearId: c.values.academicYear,
                    },
                  }
                );
                a(t.result), d(Be()(c.values.month).format("YYYY-MM")), i(!1);
              } catch (l) {
                console.log(l), i(!1);
              }
            },
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              o(
                e.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                c.setFieldValue("academicYear", e.result[0]._id);
            } catch (e) {
              console.log(e);
            }
          })();
        }, [e]);
        const m = [];
        for (let l = 1; l <= 31; l++)
          m.push(
            (0, re.jsx)(
              ra.A,
              { sx: { color: "white", display: "inline" }, children: l },
              l
            )
          );
        const u = (e, t, a) => {
          const l = e["".concat(t, "-").concat(String(a).padStart(2, "0"))];
          return "present" === l
            ? "P"
            : "absent" === l
            ? "A"
            : "late" === l
            ? "L"
            : "-";
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Employee Attendance" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: c,
                      label: "Select Academic Year",
                      options: s,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      formik: c,
                      label: "Month",
                      name: "month",
                      openTo: "month",
                      inputFormat: "MMM",
                      views: ["month"],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    alignSelf: "center",
                    children: (0, re.jsx)(ht.A, {
                      loading: n,
                      onClick: c.handleSubmit,
                      size: "small",
                      variant: "contained",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsxs)(ia.A, {
              children: [
                (0, re.jsx)(sa.A, {
                  sx: {
                    backgroundColor: (e) =>
                      "dark" === e.palette.mode
                        ? e.palette.primary.dark
                        : e.palette.primary.light,
                  },
                  children: (0, re.jsxs)(oa.A, {
                    children: [
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Employee Name",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Working Days",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Present Days",
                      }),
                      (0, re.jsx)(ra.A, {
                        align: "center",
                        children: "Absent Days",
                      }),
                      m.map((e) =>
                        (0, re.jsx)(
                          ra.A,
                          { align: "center", children: e.key },
                          e.key
                        )
                      ),
                    ],
                  }),
                }),
                (0, re.jsx)(ca.A, {
                  children: t.map((e) =>
                    (0, re.jsxs)(
                      oa.A,
                      {
                        children: [
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: e.employeeName,
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: e.totalWorkingDays,
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: e.totalPresentDays,
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            children: e.totalAbsentDays,
                          }),
                          m.map((t) =>
                            (0, re.jsx)(
                              ra.A,
                              {
                                align: "center",
                                children: u(e.attendance, r, t.key),
                              },
                              t.key
                            )
                          ),
                        ],
                      },
                      e.employeeId
                    )
                  ),
                }),
              ],
            }),
          ],
        });
      }
      const zd = [
          { name: "Name", key: "name" },
          { name: "Phone", key: "phone" },
          { name: "To Meet", key: "toMeetUserName" },
          { name: "ReasonToMeet", key: "reasonToMeet" },
          { name: "CheckIn", key: "checkIn" },
          { name: "Check Out", key: "checkOut" },
        ],
        Ed = (0, n.Ay)(oa.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            "&:nth-of-type(odd)": {
              backgroundColor:
                "dark" === t.palette.mode ? "rgb(81 81 81)" : "#F0F8FF",
            },
          };
        }),
        qd = (0, n.Ay)(ra.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            border: "1px solid gray",
            ["&.".concat(va.A.head)]: {
              backgroundColor: a ? "transparent" : "blue",
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        });
      function Yd(e) {
        var t, a, n, i;
        let {
          open: s = !0,
          title: o = "",
          tableData: r,
          onClose: d = () => {},
        } = e;
        const { isDarkMode: c } = (0, l.useContext)(st.A);
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(ct.A, {
            onClose: d,
            "aria-labelledby": "customized-dialog-title",
            open: s,
            children: [
              (0, re.jsx)(mt.A, {
                sx: {
                  m: 0,
                  p: 2,
                  backgroundColor: c ? "#333" : "#fff",
                  color: c ? "#fff" : "#000",
                },
                id: "customized-dialog-title",
                children: o,
              }),
              (0, re.jsx)(h.A, {
                "aria-label": "close",
                onClick: d,
                sx: {
                  position: "absolute",
                  right: 8,
                  top: 8,
                  color: c ? "#fff" : "#000",
                },
                children: (0, re.jsx)(Sa.A, {}),
              }),
              (0, re.jsx)(ut.A, {
                sx: {
                  backgroundColor: c ? "#333" : "#fff",
                  color: c ? "#fff" : "#000",
                },
                children: (0, re.jsx)(ia.A, {
                  "aria-label": "customized table",
                  children: (0, re.jsxs)(ca.A, {
                    children: [
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "School Name",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            children:
                              (null === r ||
                              void 0 === r ||
                              null === (t = r.school) ||
                              void 0 === t
                                ? void 0
                                : t.name) || "NA",
                          }),
                        ],
                      }),
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "Name",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            children:
                              (null === r || void 0 === r ? void 0 : r.name) ||
                              "NA",
                          }),
                        ],
                      }),
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "Phone",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            children:
                              (null === r || void 0 === r ? void 0 : r.phone) ||
                              "NA",
                          }),
                        ],
                      }),
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "Coming From",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            children:
                              (null === r || void 0 === r
                                ? void 0
                                : r.comingForm) || "NA",
                          }),
                        ],
                      }),
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "User Type",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            children:
                              (null === r ||
                              void 0 === r ||
                              null === (a = r.toMeetUserType) ||
                              void 0 === a
                                ? void 0
                                : a.name) || "NA",
                          }),
                        ],
                      }),
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "To Meet",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            children:
                              (null === r || void 0 === r
                                ? void 0
                                : r.toMeetUserName) || "NA",
                          }),
                        ],
                      }),
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "Reason To Meet",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            isDarkMode: c,
                            children:
                              (null === r ||
                              void 0 === r ||
                              null === (n = r.reasonToMeet) ||
                              void 0 === n
                                ? void 0
                                : n.charAt(0).toUpperCase()) +
                              (null === r ||
                              void 0 === r ||
                              null === (i = r.reasonToMeet) ||
                              void 0 === i
                                ? void 0
                                : i.slice(1)),
                          }),
                        ],
                      }),
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "Check In",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            children:
                              (null === r || void 0 === r
                                ? void 0
                                : r.checkIn) || "NA",
                          }),
                        ],
                      }),
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "Check Out",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            children:
                              (null === r || void 0 === r
                                ? void 0
                                : r.checkOut) || "NA",
                          }),
                        ],
                      }),
                      (0, re.jsxs)(Ed, {
                        isDarkMode: c,
                        children: [
                          (0, re.jsx)(qd, {
                            align: "left",
                            sx: { fontWeight: "bold" },
                            isDarkMode: c,
                            children: "Note",
                          }),
                          (0, re.jsx)(qd, {
                            align: "left",
                            width: 100,
                            children:
                              (null === r || void 0 === r ? void 0 : r.note) ||
                              "NA",
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
              }),
            ],
          }),
        });
      }
      const Wd = [
        { label: "Vendor", value: "vendor" },
        { label: "Relative", value: "relative" },
        { label: "Friend", value: "friend" },
        { label: "Guardian", value: "guardian" },
        { label: "Family", value: "family" },
        { label: "Interview", value: "interview" },
        { label: "Meeting", value: "meeting" },
        { label: "Other", value: "other" },
      ];
      function Rd() {
        var e, t, a;
        const { selectedSetting: n } = (0, l.useContext)(Ce.A),
          [i, s] = (0, l.useState)([]),
          [o, r] = (0, l.useState)(null),
          [d, c] = (0, l.useState)(!1),
          [m, u] = (0, l.useState)(!1),
          [x, h] = (0, l.useState)([]),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)([]),
          [y, f] = (0, l.useState)([]),
          [v, b] = (0, l.useState)([]),
          [S, k] = (0, l.useState)({
            open: !1,
            tableData: "",
            action: () => {},
          }),
          C = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.visitorInfo.list);
              s(
                e.result.map((e) => ({
                  ...e,
                  toMeetUserName: e.toMeetUser.basicInfo.name,
                  checkIn: new Date(e.checkIn).toLocaleString(),
                  checkOut: e.checkOut
                    ? new Date(e.checkOut).toLocaleString()
                    : "",
                }))
              );
            } catch (e) {
              console.error(e);
            }
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: n._id },
              });
              j(e.result.map((e) => ({ label: e.name, value: e._id }))),
                w.setFieldValue("class", e.result[0]._id);
            } catch (e) {
              console.log(e);
            }
          })(),
            C();
        }, [n]);
        const D = () => {
            r(null), u(!1), w.resetForm();
          },
          w = (0, et.Wx)({
            initialValues: {
              name: (null === o || void 0 === o ? void 0 : o.name) || "",
              phone: (null === o || void 0 === o ? void 0 : o.phone) || "",
              comingForm:
                (null === o || void 0 === o ? void 0 : o.comingForm) || "",
              toMeetUserType:
                (null === o || void 0 === o ? void 0 : o.toMeetUserType._id) ||
                "",
              toMeetUser:
                (null === o ||
                void 0 === o ||
                null === (e = o.toMeetUser) ||
                void 0 === e
                  ? void 0
                  : e._id) || "",
              reasonToMeet:
                (null === o || void 0 === o ? void 0 : o.reasonToMeet) || "",
              note: (null === o || void 0 === o ? void 0 : o.note) || "",
              checkOut:
                (null === o || void 0 === o ? void 0 : o.checkOut) || null,
              class:
                (null === o ||
                void 0 === o ||
                null === (t = o.class) ||
                void 0 === t
                  ? void 0
                  : t._id) || "",
              section:
                (null === o ||
                void 0 === o ||
                null === (a = o.section) ||
                void 0 === a
                  ? void 0
                  : a._id) || "",
              roleName:
                (null === o || void 0 === o ? void 0 : o.roleName) || "",
            },
            onSubmit: async (e) => {
              try {
                const t = { ...e, schoolId: n._id };
                if ((c(!0), o)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.visitorInfo.updateCheckout + "/" + o._id,
                    t
                  );
                  C();
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.visitorInfo.create,
                    t
                  );
                }
                C(), D();
              } catch (t) {
                console.log(t);
              }
              c(!1);
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.role.list);
              h(e.result.map((e) => ({ ...e, label: e.name, value: e._id })));
            } catch (e) {
              console.error(e);
            }
          })();
        }, []),
          (0, l.useEffect)(() => {
            w.values.class &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: n._id,
                      search: { class: w.values.class },
                    },
                  });
                  A(e.result.map((e) => ({ label: e.name, value: e._id }))),
                    w.setFieldValue("section", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [w.values.class]),
          (0, l.useEffect)(() => {
            if (w.values.toMeetUserType) {
              var e;
              let t =
                null ===
                  (e = x.find((e) => e._id === w.values.toMeetUserType)) ||
                void 0 === e
                  ? void 0
                  : e.name;
              w.setFieldValue("roleName", t),
                (async () => {
                  try {
                    const { data: e } = await (0, Se.Jt)(ke.r.employee.list, {
                      params: {
                        schoolId: n._id,
                        search: { role: w.values.toMeetUserType },
                      },
                    });
                    b(
                      e.result.map((e) => ({
                        ...e,
                        label: e.basicInfo.name,
                        value: e._id,
                      }))
                    );
                  } catch (e) {
                    console.log(e);
                  }
                })();
            }
          }, [w.values.toMeetUserType]),
          (0, l.useEffect)(() => {
            if ((w.values.toMeetUserType, w.values.class, w.values.section)) {
              var e;
              let t =
                null ===
                  (e = x.find((e) => e._id === w.values.toMeetUserType)) ||
                void 0 === e
                  ? void 0
                  : e.name;
              w.setFieldValue("roleName", t),
                (async () => {
                  try {
                    const { data: e } = await (0, Se.Jt)(ke.r.student.list, {
                      params: {
                        schoolId: n._id,
                        search: {
                          "academicInfo.class": w.values.class,
                          "academicInfo.section": w.values.section,
                        },
                      },
                    });
                    f(
                      e.result.map((e) => ({
                        ...e,
                        label: e.basicInfo.name,
                        value: e._id,
                      }))
                    );
                  } catch (e) {
                    console.log(e);
                  }
                })();
            }
          }, [w.values.toMeetUserType, w.values.class, w.values.section]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Visitor Info" }),
            (0, re.jsx)(xe.Ay, {
              container: !0,
              mb: 1,
              children: (0, re.jsxs)(xe.Ay, {
                xs: 12,
                md: 12,
                lg: 12,
                item: !0,
                display: "flex",
                justifyContent: "flex-start",
                gap: 1,
                children: [
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    children: "Excel",
                  }),
                  (0, re.jsx)($e.A, {
                    size: "small",
                    variant: "contained",
                    children: "Print",
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["view", "edit"],
              tableKeys: zd,
              bodyDataModal: "visitor info",
              bodyData: i,
              onEditClick: (e) => {
                r(e), u(!0);
              },
              onViewClick: (e) => {
                k({ ...S, open: !0, tableData: e });
              },
            }),
            (0, re.jsx)(Yd, {
              title: "Visitor Information",
              open: null === S || void 0 === S ? void 0 : S.open,
              tableData: null === S || void 0 === S ? void 0 : S.tableData,
              onClose: (e) => {
                k({ ...S, open: !1 });
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add visitor info",
              onAddClick: () => {
                u(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: m,
              formik: w,
              formTitle: o ? "Update Visitor Info" : "Add Visitor Info",
              onClose: D,
              submitButtonTitle: o ? "Check Out" : "Submit",
              adding: d,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: w,
                      name: "name",
                      label: "Name",
                      required: !0,
                      disabled: null != o,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: w,
                      name: "phone",
                      label: "Phone",
                      required: !0,
                      disabled: null != o,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: w,
                      name: "comingForm",
                      label: "Coming Form",
                      required: !0,
                      disabled: null != o,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "toMeetUserType",
                      formik: w,
                      label: "Select To Meet User Type",
                      options: x,
                      disabled: null != o,
                    }),
                  }),
                  "STUDENT" === w.values.roleName &&
                    (0, re.jsxs)(re.Fragment, {
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 6,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            name: "class",
                            formik: w,
                            label: "Select Class",
                            options: p,
                            disabled: null != o,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 6,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            name: "section",
                            formik: w,
                            label: "Select Section",
                            options: g,
                            disabled: null != o,
                          }),
                        }),
                      ],
                    }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "toMeetUser",
                      formik: w,
                      label: "Select To Meet User",
                      options: "STUDENT" === w.values.roleName ? y : v,
                      disabled: null != o,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      name: "reasonToMeet",
                      formik: w,
                      label: "Select Reason To Meet",
                      options: Wd,
                      disabled: null != o,
                    }),
                  }),
                  null != o &&
                    (0, re.jsxs)(re.Fragment, {
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 6,
                          item: !0,
                          children: (0, re.jsx)(Mt.A, {
                            value:
                              null === o || void 0 === o
                                ? void 0
                                : o.checkIn.toLocaleString(),
                            fullWidth: !0,
                            label: "Check In",
                            name: "checkIn",
                            disabled: null != o,
                            sx: {
                              mt: 2,
                              borderWidth: 1,
                              borderRadius: (e) => e.shape.borderRadius,
                            },
                            InputProps: {
                              style: {
                                borderWidth: 1,
                                height: "42px",
                                borderRadius: (e) => e.shape.borderRadius,
                              },
                            },
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 6,
                          item: !0,
                          children: (0, re.jsx)(Mt.A, {
                            value:
                              null === o || void 0 === o ? void 0 : o.checkOut,
                            fullWidth: !0,
                            label: "Check Out",
                            name: "checkOut",
                            disabled: null != o,
                            InputLabelProps: { shrink: !0 },
                            sx: {
                              mt: 2,
                              borderWidth: 1,
                              borderRadius: (e) => e.shape.borderRadius,
                            },
                            InputProps: {
                              style: {
                                borderWidth: 1,
                                height: "42px",
                                borderRadius: (e) => e.shape.borderRadius,
                              },
                            },
                          }),
                        }),
                      ],
                    }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: w,
                      name: "note",
                      label: "Note",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Pd = [
          { name: "Name", key: "name" },
          { name: "Class", key: "class" },
          { name: "Section", key: "section" },
          { name: "Check Out", key: "checkOut" },
          { name: "Parent Name", key: "parentName" },
          { name: "Relation", key: "relation" },
          { name: "Visitor Contact Number", key: "visitorContactNumber" },
        ],
        Jd = [
          { label: "Father", value: "Father" },
          { label: "Mother", value: "Mother" },
          { label: "Sister", value: "Sister" },
          { label: "Brother", value: "Brother" },
          { label: "Uncle", value: "Uncle" },
          { label: "Other Relative", value: "Other Relative" },
        ];
      function Vd() {
        var e;
        const { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)(!1),
          [o, r] = (0, l.useState)(null),
          [d, c] = (0, l.useState)(!1),
          [m, u] = (0, l.useState)(!1),
          [x, h] = (0, l.useState)(!1),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)([]),
          [y, f] = (0, l.useState)([]),
          [v, b] = (0, l.useState)([]),
          S = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.studentCheckout.list, {
                params: { schoolId: t._id },
              });
              n(e.result);
            } catch (e) {
              console.log(e);
            }
          },
          k = () => {
            s(!1), r(null);
          },
          C = async () => {
            try {
              var e;
              const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                params: { schoolId: t._id, search: { class: D.values.class } },
              });
              D.setFieldValue(
                "section",
                null === (e = a.result[0]) || void 0 === e ? void 0 : e._id
              ),
                b(a.result.map((e) => ({ ...e, label: e.name, value: e._id })));
            } catch (a) {
              console.log(a);
            }
          },
          D = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              class: "",
              section: "",
              student: "",
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          D.values.class && C();
        }, [D.values.class]),
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
                D.setFieldValue("academicYear", e.result[0]._id),
                  j(
                    e.result.map((e) => ({
                      ...e,
                      label: "".concat(e.from, "-").concat(e.to),
                      value: e._id,
                    }))
                  );
              } catch (e) {
                console.log(e);
              }
            })(),
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: t._id },
                  });
                  f(
                    e.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    D.setFieldValue("class", e.result[0]._id);
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [t._id]),
          (0, l.useEffect)(() => {
            D.values.academicYear &&
              D.values.class &&
              D.values.section &&
              t &&
              (async () => {
                try {
                  var e;
                  const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: t._id,
                      search: {
                        academicYear: D.values.academicYear,
                        "academicInfo.class": D.values.class,
                        "academicInfo.section": D.values.section,
                      },
                    },
                  });
                  A(
                    a.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    D.setFieldValue(
                      "student",
                      null === (e = a.result[0]) || void 0 === e
                        ? void 0
                        : e._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [D.values.academicYear, D.values.class, D.values.section, t]),
          (0, l.useEffect)(() => {
            D.values.class && C();
          }, [D.values.class]),
          (0, l.useEffect)(() => {
            D.values.academicYear && S();
          }, [D.values.academicYear]);
        const w = (0, et.Wx)({
          initialValues: {
            student:
              (null === (e = g.find((e) => e._id === D.values.student)) ||
              void 0 === e
                ? void 0
                : e.basicInfo.name) || "",
            relationship: "",
            reason: "",
            visitorName: "",
            visitorContactNumber: "",
          },
          onSubmit: async (e) => {
            try {
              const a = { ...e, schoolId: t._id, student: D.values.student };
              c(!0);
              const { data: l } = await (0, Se.yJ)(
                ke.r.studentCheckout.update,
                a
              );
              S(), k();
            } catch (a) {
              console.log(a);
            }
            c(!1);
          },
          enableReinitialize: !0,
        });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Student Checkout" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsx)("form", {
                onSubmit: D.handleSubmit,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "academicYear",
                        formik: D,
                        label: "Select Academic Year",
                        options: p,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: D,
                        label: "Select Class",
                        options: y,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: D,
                        label: "Select Section",
                        options: v,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "student",
                        formik: D,
                        label: "Select Student",
                        options: g,
                      }),
                    }),
                    (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      display: "flex",
                      justifyContent: "flex-end",
                      gap: 1,
                      children: [
                        (0, re.jsx)($e.A, {
                          size: "small",
                          variant: "contained",
                          type: "submit",
                          children: "Find",
                        }),
                        (0, re.jsx)(ht.A, {
                          size: "small",
                          loading: m,
                          onClick: async () => {
                            try {
                              u(!0);
                              Dl(
                                "application/pdf",
                                (
                                  await (0, Se.Jt)(
                                    ke.r.studentCheckout.downloadPdf,
                                    {
                                      params: { schoolId: t._id },
                                      responseType: "blob",
                                    }
                                  )
                                ).data,
                                "student_checkout.pdf"
                              ),
                                u(!1);
                            } catch (e) {
                              console.log(e), u(!1);
                            }
                          },
                          variant: "contained",
                          children: "Print",
                        }),
                        (0, re.jsx)($e.A, {
                          size: "small",
                          onClick: async () => {
                            try {
                              Dl(
                                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                (
                                  await (0, Se.Jt)(
                                    ke.r.studentCheckout.donwloadExcel,
                                    {
                                      params: { schoolId: t._id },
                                      responseType: "blob",
                                    }
                                  )
                                ).data,
                                "student_checkout.xlsx"
                              );
                            } catch (e) {
                              console.log(e);
                            }
                          },
                          variant: "contained",
                          children: "Excel",
                        }),
                      ],
                    }),
                  ],
                }),
              }),
            }),
            (0, re.jsx)(rt, {
              title: "Student Checkout",
              onAddClick: () => {
                s(!0);
              },
              disabled: !D.values.student,
            }),
            (0, re.jsx)(pt, {
              open: i,
              formik: w,
              formTitle: o ? "Update Student Checkout" : "Add Student Checkout",
              onClose: k,
              submitButtonTitle: o ? "Update" : "Submit",
              adding: d,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: w,
                      name: "student",
                      label: "Student Name",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      name: "relationship",
                      formik: w,
                      label: "Relation With Student",
                      options: Jd,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      name: "reason",
                      formik: w,
                      label: "Enter Reason",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      name: "visitorName",
                      formik: w,
                      label: "Enter Visitor Name",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      name: "visitorContactNumber",
                      formik: w,
                      label: "Enter Visitor Phone",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    sm: 12,
                    md: 12,
                    lg: 12,
                    sx: {
                      display: "flex",
                      justifyContent: "flex-end",
                      alignItems: "center",
                      mt: 2,
                    },
                    children: (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      sx: { color: "#fff" },
                      children: "Send OTP",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      name: "otp",
                      formik: w,
                      label: "Enter Otp",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["view"],
              tableKeys: Pd,
              bodyDataModal: "student checkout",
              bodyData: a,
            }),
          ],
        });
      }
      const Bd = [
        { name: "Subject", key: "subject" },
        { name: "Description", key: "description" },
        { name: "Status", key: "status" },
      ];
      function Od() {
        const [e, t] = (0, l.useState)([]),
          [a, n] = (0, l.useState)(!1),
          [i, s] = (0, l.useState)(!1),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)(null),
          m = (0, et.Wx)({
            initialValues: {
              title: (null === d || void 0 === d ? void 0 : d.title) || "",
              examType:
                (null === d || void 0 === d ? void 0 : d.examType) || "",
              marksAssignmentAllowed:
                (null === d || void 0 === d
                  ? void 0
                  : d.marksAssignmentAllowed) || !1,
              note: (null === d || void 0 === d ? void 0 : d.note) || "",
              isPublic:
                (null === d || void 0 === d ? void 0 : d.isPublic) || !1,
            },
            onSubmit: console.log("lll"),
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Tickets" }),
            (0, re.jsx)(jt.A, {
              actions: [],
              bodyDataModal: "Tickets",
              bodyData: e,
              tableKeys: Bd,
            }),
            (0, re.jsx)(rt, {
              title: "Add Tickets",
              onAddClick: () => {
                n(!0);
              },
            }),
            (0, re.jsx)(pt, {
              open: a,
              formik: m,
              formTitle: d ? "Update Report Problem" : "Add Report Problem",
              onClose: () => {
                n(!1), c(null);
              },
              submitButtonTitle: d ? "Update" : "Submit",
              adding: i,
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 0,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: m,
                      name: "title",
                      label: "Subject",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      formik: m,
                      name: "description",
                      label: "Description",
                      required: !0,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    sm: 6,
                    md: 6,
                    item: !0,
                    children: (0, re.jsx)(Ol.A, {
                      name: "receipt",
                      label: "Select Files",
                      onChange: (e) =>
                        ((e, t) => {
                          const { files: a } = e.target;
                          let l = [];
                          if (a.length > 0) {
                            for (let e = 0; e < a.length; e++) {
                              const t = a[e];
                              l.push(t);
                            }
                            r(l);
                          } else console.log("No files selected");
                        })(e),
                      customOnChange: !0,
                      selectedFiles: o,
                      onRemove: (e) =>
                        ((e, t) => {
                          r(o.filter((t) => t.name != e));
                        })(e),
                      multi: !0,
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Ld = [
          { name: "Class Name", key: "className" },
          { name: "Parent Name", key: "parentName" },
          { name: "Student Name", key: "studentName" },
          { name: "Feedback", key: "feedback" },
        ],
        Ud = (0, n.Ay)(s.A)({
          display: "flex",
          justifyContent: "flex-end",
          alignItems: "center",
          marginBottom: "20px",
        }),
        Hd = (e) => {
          let { onUpdate: t = () => {}, data: a = {} } = e;
          const [n, i] = (0, l.useState)(!1),
            s = async (e) => {
              try {
                i(!0),
                  await (0, Se.yJ)(ke.r.guardianFeedback.update + "/" + a._id, {
                    status: e,
                  }),
                  i(!1),
                  t();
              } catch (l) {
                console.log(l), i(!1);
              }
            };
          return (0, re.jsx)(re.Fragment, {
            children: (0, re.jsxs)(b.A, {
              direction: "row",
              spacing: 2,
              children: [
                ["pending", "approved"].includes(a.status) &&
                  (0, re.jsx)(ht.A, {
                    loading: n,
                    onClick: () => s("rejected"),
                    disableElevation: !0,
                    size: "small",
                    color: "error",
                    variant: "contained",
                    children: "Reject",
                  }),
                ["pending", "rejected"].includes(a.status) &&
                  (0, re.jsx)(ht.A, {
                    loading: n,
                    onClick: () => s("approved"),
                    disableElevation: !0,
                    size: "small",
                    color: "success",
                    variant: "contained",
                    children: "Approve",
                  }),
              ],
            }),
          });
        };
      function Gd() {
        var e;
        const { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)([]),
          [i, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)("pending"),
          [c, m] = (0, l.useState)({
            open: !1,
            contents: "",
            action: () => {},
          }),
          x = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.guardianFeedback.list, {
                params: { schoolId: t._id },
              });
              n(e.result), o(e.result.filter((e) => e.status === r));
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          x();
        }, [t._id]),
          (0, l.useEffect)(() => {
            o(a.filter((e) => e.status === r));
          }, [r]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Guardian Feedback" }),
            (0, re.jsx)(Ud, {
              children: (0, re.jsx)(ba.A, {
                variant: "outlined",
                "aria-label": "outlined button group",
                children: ["pending", "approved", "rejected"].map((e) =>
                  (0, re.jsxs)(
                    $e.A,
                    {
                      variant: "outlined",
                      sx: {
                        background:
                          r === e ? Oe.A.lightPalette.primary.main : "",
                        ":hover": {
                          background:
                            r === e ? Oe.A.darkPalette.primary.main : "",
                        },
                        color:
                          r === e
                            ? "#fff"
                            : (e) =>
                                "dark" === e.palette.mode ? "#fff" : "#18488",
                      },
                      onClick: () => {
                        d(e);
                      },
                      children: [
                        e,
                        ":",
                        a.filter((t) => t.status === e).length,
                      ],
                    },
                    e
                  )
                ),
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["custom", "delete", "view"],
              bodyDataModal: "feedback",
              bodyData: i,
              tableKeys: Ld,
              onDeleteClick: async (e) => {
                try {
                  const { data: t } = await (0, Se.Jt)(
                    ke.r.guardianFeedback.delete + "/" + e
                  );
                  x();
                } catch (t) {
                  console.log(t);
                }
              },
              CustomAction: Hd,
              onUpdate: x,
              onViewClick: (e) => {
                m({ ...c, open: !0, contents: e });
              },
            }),
            (0, re.jsx)(ka, {
              title: "Guardian Feedback",
              open: null === c || void 0 === c ? void 0 : c.open,
              tableData: null === c || void 0 === c ? void 0 : c.contents,
              onClose: (e) => {
                m({ ...c, open: !1 });
              },
              children: (0, re.jsx)(s.A, {
                sx: { minWidth: 300, p: 1 },
                children: (0, re.jsx)(u.A, {
                  id: "modal-modal-description",
                  sx: { wordBreak: "break-word" },
                  children:
                    null === c ||
                    void 0 === c ||
                    null === (e = c.contents) ||
                    void 0 === e
                      ? void 0
                      : e.feedback,
                }),
              }),
            }),
          ],
        });
      }
      const Kd = [
        { name: "Roll No", key: "rollNo" },
        { name: "Name", key: "name" },
        { name: "Photo", key: "image" },
        { name: "File", key: "file" },
      ];
      function Qd() {
        const [e, t] = (0, l.useState)([]),
          a = (0, et.Wx)({
            initialValues: {
              academicYear: "",
              class: "",
              section: "",
              student: "",
            },
            onSubmit: console.log("nnnn"),
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Student Bulk Photo" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "academicYear",
                      formik: a,
                      label: "Select Academic Year",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: a,
                      label: "Select Class",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "sectiion",
                      formik: a,
                      label: "Select Section",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    lg: 12,
                    display: "flex",
                    justifyContent: "flex-end",
                    children: (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      children: "Find",
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsx)(jt.A, {
              actions: ["edit"],
              tableKeys: Kd,
              bodyDataModal: "student bulk photo",
              bodyData: e,
            }),
          ],
        });
      }
      const Zd = (0, n.Ay)(xe.Ay)(() => ({
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        })),
        $d = (0, n.Ay)(s.A)(() => ({
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          gap: "10px",
        })),
        Xd = [
          { label: "Gender", value: "gender" },
          { label: "Vehicle", value: "vehicle" },
          { label: "Library", value: "library" },
          { label: "Hostel", value: "hostel" },
          { label: "Class", value: "class" },
        ],
        ec = (e) =>
          e.map((e) => ({
            name: null === e || void 0 === e ? void 0 : e.className,
            male: null === e || void 0 === e ? void 0 : e.maleCount,
            female: null === e || void 0 === e ? void 0 : e.femaleCount,
            total: null === e || void 0 === e ? void 0 : e.totalCount,
          })),
        tc = (e) =>
          e.map((e) => ({
            name: "gender",
            male: null === e || void 0 === e ? void 0 : e.maleCount,
            female: null === e || void 0 === e ? void 0 : e.femaleCount,
            total: null === e || void 0 === e ? void 0 : e.totalCount,
          })),
        ac = (e) =>
          e.map((e) => ({
            name: "library",
            male: null === e || void 0 === e ? void 0 : e.maleCount,
            female: null === e || void 0 === e ? void 0 : e.femaleCount,
            total: null === e || void 0 === e ? void 0 : e.totalCount,
          })),
        lc = (e) =>
          e.map((e) => ({
            name: null === e || void 0 === e ? void 0 : e.vehicleNumber,
            male: null === e || void 0 === e ? void 0 : e.maleCount,
            female: null === e || void 0 === e ? void 0 : e.femaleCount,
            total: null === e || void 0 === e ? void 0 : e.totalCount,
          })),
        nc = (e) =>
          e.map((e) => ({
            name: null === e || void 0 === e ? void 0 : e.hostelName,
            male: null === e || void 0 === e ? void 0 : e.maleCount,
            female: null === e || void 0 === e ? void 0 : e.femaleCount,
            total: null === e || void 0 === e ? void 0 : e.totalCount,
          }));
      function ic() {
        const e = (0, l.useRef)(),
          { selectedSetting: t } = (0, l.useContext)(Ce.A),
          [a, n] = (0, l.useState)(0),
          [i, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [x, h] = (0, l.useState)([]),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)([]),
          [y, f] = (0, l.useState)([]),
          [v, b] = (0, l.useState)(""),
          [S, k] = (0, l.useState)(""),
          [C, D] = l.useState(0),
          [w, I] = l.useState(10),
          N = ec(c),
          _ = tc(x),
          T = ac(p),
          M = lc(g),
          F = nc(y),
          [z, E] = (0, l.useState)(!1),
          [q, Y] = (0, l.useState)(!1);
        let W = 0,
          R = 0;
        const P = (0, Jt.useReactToPrint)({ content: () => e.current }),
          J = (0, et.Wx)({
            initialValues: { academicYear: "", groupByData: "" },
            onSubmit: async (e) => {
              try {
                E(!0);
                const { data: a } = await (0, Se.Jt)(
                  ke.r.report.getStudentReport,
                  {
                    params: {
                      schoolId: t._id,
                      groupBy: e.groupByData,
                      academicYearId: e.academicYear,
                    },
                  }
                );
                o(a.result), b(e.groupByData), E(!1);
              } catch (a) {
                console.log(a), E(!1);
              }
            },
          }),
          V = (0, et.Wx)({
            initialValues: { academicYear: "", groupByData: "" },
            onSubmit: async (e) => {
              try {
                Y(!0);
                const { data: a } = await (0, Se.Jt)(
                  ke.r.report.getStudentReport,
                  {
                    params: {
                      schoolId: t._id,
                      groupBy: e.groupByData,
                      academicYearId: e.academicYear,
                    },
                  }
                );
                k(e.groupByData),
                  "class" === e.groupByData && m(a.result),
                  "gender" === e.groupByData && h(a.result),
                  "library" === e.groupByData && j(a.result),
                  "vehicle" === e.groupByData && A(a.result),
                  "hostel" === e.groupByData && f(a.result),
                  Y(!1);
              } catch (a) {
                console.log(a), Y(!1);
              }
            },
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              d(
                e.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                J.setFieldValue("academicYear", e.result[0]._id),
                V.setFieldValue("academicYear", e.result[0]._id);
            } catch (e) {
              console.log(e);
            }
          })();
        }, [t]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Student Report" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => n(t),
              value: a,
              labels: ["Tabular Report", "Grapical Report"],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: a,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)("form", {
                    onSubmit: J.handleSubmit,
                    children: [
                      " ",
                      (0, re.jsxs)(xe.Ay, {
                        rowSpacing: 1,
                        columnSpacing: 2,
                        container: !0,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "academicYear",
                              formik: J,
                              label: "Select Academic Year",
                              options: r,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "groupByData",
                              formik: J,
                              label: "Select Group By Data",
                              options: Xd,
                            }),
                          }),
                          (0, re.jsxs)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            alignSelf: "center",
                            display: "flex",
                            gap: 1,
                            item: !0,
                            children: [
                              (0, re.jsx)(ht.A, {
                                loading: z,
                                size: "small",
                                variant: "contained",
                                type: "submit",
                                children: "Find",
                              }),
                              (0, re.jsx)($e.A, {
                                size: "small",
                                variant: "contained",
                                onClick: async () => {
                                  try {
                                    Dl(
                                      "application/pdf",
                                      (
                                        await (0, Se.Jt)(
                                          ke.r.report.downloadStudentReport,
                                          {
                                            params: {
                                              schoolId: t._id,
                                              groupBy: J.values.groupByData,
                                              academicYearId:
                                                J.values.academicYear,
                                            },
                                            responseType: "blob",
                                          }
                                        )
                                      ).data,
                                      "studentReport.pdf"
                                    );
                                  } catch (e) {
                                    console.log(e);
                                  }
                                },
                                children: "Print",
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
                (0, re.jsxs)(na.A, {
                  component: ue.A,
                  children: [
                    "class" === v &&
                      (0, re.jsxs)(ia.A, {
                        size: "small",
                        children: [
                          (0, re.jsx)(sa.A, {
                            sx: {
                              backgroundColor: (e) =>
                                "dark" === e.palette.mode
                                  ? e.palette.primary.dark
                                  : e.palette.primary.light,
                            },
                            children: (0, re.jsxs)(oa.A, {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "SL",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Class",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Male",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Female",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Total",
                                }),
                              ],
                            }),
                          }),
                          (0, re.jsxs)(ca.A, {
                            children: [
                              i.map(
                                (e, t) => (
                                  (W += e.maleCount),
                                  (R += e.femaleCount),
                                  (0, re.jsxs)(
                                    oa.A,
                                    {
                                      children: [
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: t + 1,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.className,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.maleCount,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.femaleCount,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.totalCount,
                                        }),
                                      ],
                                    },
                                    t
                                  )
                                )
                              ),
                              (0, re.jsxs)(oa.A, {
                                children: [
                                  (0, re.jsx)(ra.A, {
                                    align: "start",
                                    colSpan: 2,
                                    sx: { fontWeight: "bold" },
                                    children: "Total:",
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "center",
                                    sx: { fontWeight: "bold" },
                                    children: W,
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "center",
                                    sx: { fontWeight: "bold" },
                                    children: R,
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "center",
                                    sx: { fontWeight: "bold" },
                                    children: W + R,
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                    "gender" === v &&
                      (0, re.jsxs)(ia.A, {
                        size: "small",
                        children: [
                          (0, re.jsx)(sa.A, {
                            sx: {
                              backgroundColor: (e) =>
                                "dark" === e.palette.mode
                                  ? e.palette.primary.dark
                                  : e.palette.primary.light,
                            },
                            children: (0, re.jsxs)(oa.A, {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "SL",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Male",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Female",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Total",
                                }),
                              ],
                            }),
                          }),
                          (0, re.jsx)(ca.A, {
                            children: i.map((e, t) =>
                              (0, re.jsxs)(
                                oa.A,
                                {
                                  children: [
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: t + 1,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: e.maleCount,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: e.femaleCount,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: e.totalCount,
                                    }),
                                  ],
                                },
                                t
                              )
                            ),
                          }),
                        ],
                      }),
                    "vehicle" === v &&
                      (0, re.jsxs)(ia.A, {
                        size: "small",
                        children: [
                          (0, re.jsx)(sa.A, {
                            sx: {
                              backgroundColor: (e) =>
                                "dark" === e.palette.mode
                                  ? e.palette.primary.dark
                                  : e.palette.primary.light,
                            },
                            children: (0, re.jsxs)(oa.A, {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "SL",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Vehicle Number",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Male",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Female",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Total",
                                }),
                              ],
                            }),
                          }),
                          (0, re.jsxs)(ca.A, {
                            children: [
                              i.map(
                                (e, t) => (
                                  (W += e.maleCount),
                                  (R += e.femaleCount),
                                  (0, re.jsxs)(
                                    oa.A,
                                    {
                                      children: [
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: t + 1,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.vehicleNumber,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.maleCount,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.femaleCount,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.totalCount,
                                        }),
                                      ],
                                    },
                                    t
                                  )
                                )
                              ),
                              (0, re.jsxs)(oa.A, {
                                children: [
                                  (0, re.jsx)(ra.A, {
                                    sx: { fontWeight: "bold" },
                                    align: "start",
                                    colSpan: 2,
                                    children: "Total:",
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "center",
                                    sx: { fontWeight: "bold" },
                                    children: W,
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "center",
                                    sx: { fontWeight: "bold" },
                                    children: R,
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "center",
                                    sx: { fontWeight: "bold" },
                                    children: W + R,
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                    "library" === v &&
                      (0, re.jsxs)(ia.A, {
                        size: "small",
                        children: [
                          (0, re.jsx)(sa.A, {
                            sx: {
                              backgroundColor: (e) =>
                                "dark" === e.palette.mode
                                  ? e.palette.primary.dark
                                  : e.palette.primary.light,
                            },
                            children: (0, re.jsxs)(oa.A, {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "SL",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Male",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Female",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Total",
                                }),
                              ],
                            }),
                          }),
                          (0, re.jsx)(ca.A, {
                            children: i.map((e, t) =>
                              (0, re.jsxs)(
                                oa.A,
                                {
                                  children: [
                                    (0, re.jsxs)(ra.A, {
                                      align: "center",
                                      children: [" ", t + 1],
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: e.maleCount,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: e.femaleCount,
                                    }),
                                    (0, re.jsx)(ra.A, {
                                      align: "center",
                                      children: e.totalCount,
                                    }),
                                  ],
                                },
                                t
                              )
                            ),
                          }),
                        ],
                      }),
                    "hostel" === v &&
                      (0, re.jsxs)(ia.A, {
                        size: "small",
                        children: [
                          (0, re.jsx)(sa.A, {
                            sx: {
                              backgroundColor: (e) =>
                                "dark" === e.palette.mode
                                  ? e.palette.primary.dark
                                  : e.palette.primary.light,
                            },
                            children: (0, re.jsxs)(oa.A, {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "SL",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Hostel Name",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Male",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Female",
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: "Total",
                                }),
                              ],
                            }),
                          }),
                          (0, re.jsxs)(ca.A, {
                            children: [
                              i.map(
                                (e, t) => (
                                  (W += e.maleCount),
                                  (R += e.femaleCount),
                                  (0, re.jsxs)(
                                    oa.A,
                                    {
                                      children: [
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: t + 1,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.hostelName,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.maleCount,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.femaleCount,
                                        }),
                                        (0, re.jsx)(ra.A, {
                                          align: "center",
                                          children: e.totalCount,
                                        }),
                                      ],
                                    },
                                    t
                                  )
                                )
                              ),
                              (0, re.jsxs)(oa.A, {
                                children: [
                                  (0, re.jsx)(ra.A, {
                                    align: "start",
                                    colSpan: 2,
                                    sx: { fontWeight: "bold" },
                                    children: "Total:",
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "center",
                                    sx: { fontWeight: "bold" },
                                    children: W,
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "center",
                                    sx: { fontWeight: "bold" },
                                    children: R,
                                  }),
                                  (0, re.jsx)(ra.A, {
                                    align: "center",
                                    sx: { fontWeight: "bold" },
                                    children: W + R,
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                  ],
                }),
                (0, re.jsx)(Ua.A, {
                  size: "small",
                  component: "div",
                  count: i && i.length ? i.length : 0,
                  page: C,
                  onPageChange: (e, t) => {
                    D(t);
                  },
                  rowsPerPage: w,
                  onRowsPerPageChange: (e) => {
                    I(+e.target.value), D(0);
                  },
                }),
              ],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 1,
              value: a,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)("form", {
                    onSubmit: V.handleSubmit,
                    children: [
                      " ",
                      (0, re.jsxs)(xe.Ay, {
                        rowSpacing: 1,
                        columnSpacing: 2,
                        container: !0,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "academicYear",
                              formik: V,
                              label: "Select Academic Year",
                              options: r,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "groupByData",
                              formik: V,
                              label: "Select Group By Data",
                              options: Xd,
                            }),
                          }),
                          (0, re.jsxs)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            alignSelf: "center",
                            display: "flex",
                            gap: 1,
                            item: !0,
                            children: [
                              (0, re.jsx)(ht.A, {
                                loading: q,
                                size: "small",
                                variant: "contained",
                                type: "submit",
                                children: "Find",
                              }),
                              (0, re.jsx)(Vt(), {
                                trigger: () =>
                                  (0, re.jsx)($e.A, {
                                    size: "small",
                                    variant: "contained",
                                    onClick: P,
                                    children: "Print",
                                  }),
                                content: () => e.current,
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                }),
                (0, re.jsxs)(s.A, {
                  ref: e,
                  children: [
                    (0, re.jsx)(Zd, {
                      container: !0,
                      children: (0, re.jsx)(xe.Ay, {
                        item: !0,
                        xs: 12,
                        sm: 12,
                        md: 6,
                        lg: 4,
                        children: (0, re.jsxs)(ue.A, {
                          sx: { padding: 2, mt: 2 },
                          children: [
                            (0, re.jsx)("img", {
                              src: t.logo,
                              height: 60,
                              width: 60,
                              style: { display: "block", margin: "auto" },
                            }),
                            (0, re.jsx)(u.A, {
                              fontSize: 18,
                              textAlign: "center",
                              children: t.name,
                            }),
                            (0, re.jsx)(u.A, {
                              gutterBottom: !0,
                              fontSize: 12,
                              textAlign: "center",
                              children: t.address,
                            }),
                            (0, re.jsxs)($d, {
                              children: [
                                " ",
                                (0, re.jsx)(Ad.A, {
                                  sx: { color: Oe.A.darkPalette.primary.main },
                                }),
                                (0, re.jsx)(u.A, {
                                  textAlign: "center",
                                  color: "error",
                                  children: "Student Report",
                                }),
                              ],
                            }),
                          ],
                        }),
                      }),
                    }),
                    "class" === S &&
                      (0, re.jsx)(s.A, {
                        display: "flex",
                        justifyContent: "center",
                        mt: 3,
                        children: (0, re.jsx)(he.u, {
                          width: 700,
                          height: 300,
                          children: (0, re.jsxs)(pe.E, {
                            data: N,
                            children: [
                              (0, re.jsx)(je.d, { strokeDasharray: "3 3" }),
                              (0, re.jsx)(ge.W, { dataKey: "name" }),
                              (0, re.jsx)(Ae.h, {}),
                              (0, re.jsx)(ye.m, {}),
                              (0, re.jsx)(fe.s, {
                                wrapperStyle: { textAlign: "center" },
                                formatter: (e) => e,
                                layout: "horizontal",
                                align: "center",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "male",
                                fill: "#8884d8",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "female",
                                fill: "#82ca9d",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "total",
                                fill: "#ff7f50",
                              }),
                            ],
                          }),
                        }),
                      }),
                    "gender" === S &&
                      (0, re.jsx)(s.A, {
                        display: "flex",
                        justifyContent: "center",
                        mt: 3,
                        children: (0, re.jsx)(he.u, {
                          width: 700,
                          height: 300,
                          children: (0, re.jsxs)(pe.E, {
                            data: _,
                            children: [
                              (0, re.jsx)(je.d, { strokeDasharray: "3 3" }),
                              (0, re.jsx)(ge.W, { dataKey: "name" }),
                              (0, re.jsx)(Ae.h, {}),
                              (0, re.jsx)(ye.m, {}),
                              (0, re.jsx)(fe.s, {
                                wrapperStyle: { textAlign: "center" },
                                formatter: (e) => e,
                                layout: "horizontal",
                                align: "center",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "male",
                                fill: "#8884d8",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "female",
                                fill: "#82ca9d",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "total",
                                fill: "#ff7f50",
                              }),
                            ],
                          }),
                        }),
                      }),
                    "vehicle" === S &&
                      (0, re.jsx)(s.A, {
                        display: "flex",
                        justifyContent: "center",
                        mt: 3,
                        children: (0, re.jsx)(he.u, {
                          width: 700,
                          height: 300,
                          children: (0, re.jsxs)(pe.E, {
                            data: M,
                            children: [
                              (0, re.jsx)(je.d, { strokeDasharray: "3 3" }),
                              (0, re.jsx)(ge.W, { dataKey: "name" }),
                              (0, re.jsx)(Ae.h, {}),
                              (0, re.jsx)(ye.m, {}),
                              (0, re.jsx)(fe.s, {
                                wrapperStyle: { textAlign: "center" },
                                formatter: (e) => e,
                                layout: "horizontal",
                                align: "center",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "male",
                                fill: "#8884d8",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "female",
                                fill: "#82ca9d",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "total",
                                fill: "#ff7f50",
                              }),
                            ],
                          }),
                        }),
                      }),
                    "hostel" === S &&
                      (0, re.jsx)(s.A, {
                        display: "flex",
                        justifyContent: "center",
                        mt: 3,
                        children: (0, re.jsx)(he.u, {
                          width: 700,
                          height: 300,
                          children: (0, re.jsxs)(pe.E, {
                            data: F,
                            children: [
                              (0, re.jsx)(je.d, { strokeDasharray: "3 3" }),
                              (0, re.jsx)(ge.W, { dataKey: "name" }),
                              (0, re.jsx)(Ae.h, {}),
                              (0, re.jsx)(ye.m, {}),
                              (0, re.jsx)(fe.s, {
                                wrapperStyle: { textAlign: "center" },
                                formatter: (e) => e,
                                layout: "horizontal",
                                align: "center",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "male",
                                fill: "#8884d8",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "female",
                                fill: "#82ca9d",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "total",
                                fill: "#ff7f50",
                              }),
                            ],
                          }),
                        }),
                      }),
                    "library" === S &&
                      (0, re.jsx)(s.A, {
                        display: "flex",
                        justifyContent: "center",
                        mt: 3,
                        children: (0, re.jsx)(he.u, {
                          width: 700,
                          height: 300,
                          children: (0, re.jsxs)(pe.E, {
                            data: T,
                            children: [
                              (0, re.jsx)(je.d, { strokeDasharray: "3 3" }),
                              (0, re.jsx)(ge.W, { dataKey: "name" }),
                              (0, re.jsx)(Ae.h, {}),
                              (0, re.jsx)(ye.m, {}),
                              (0, re.jsx)(fe.s, {
                                wrapperStyle: { textAlign: "center" },
                                formatter: (e) => e,
                                layout: "horizontal",
                                align: "center",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "male",
                                fill: "#8884d8",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "female",
                                fill: "#82ca9d",
                              }),
                              (0, re.jsx)(ve.y, {
                                dataKey: "total",
                                fill: "#ff7f50",
                              }),
                            ],
                          }),
                        }),
                      }),
                  ],
                }),
              ],
            }),
          ],
        });
      }
      const sc = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "flex-end",
            gap: t.spacing(2),
            position: "fixed",
            bottom: 0,
            right: 0,
            left: 0,
            background: "whitesmoke",
            padding: t.spacing(2),
            zIndex: 1e3,
          };
        }),
        oc = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            border: "1px solid",
            borderColor: "lightgray",
            marginBottom: "20px",
            borderRadius: t.shape.borderRadius,
            overflow: "hidden",
          };
        }),
        rc = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            textAlign: "start",
            fontSize: "14px",
            padding: "5px 10px",
            borderBottom: "1px solid",
            borderBottomColor: "lightgray",
            fontWeight: "bold",
            color: "white",
            background: t.palette.secondary.main,
          };
        }),
        dc = (0, n.Ay)(s.A)({
          background: "#ececec",
          width: "100px",
          height: "100px",
          borderRadius: "50%",
          overflow: "hidden",
          backgroundPosition: "center",
        }),
        cc = (0, n.Ay)(s.A)({
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          marginBottom: "15px",
          padding: "15px 0px",
        }),
        mc = [
          { label: "Male", value: "male" },
          { label: "Female", value: "female" },
        ],
        uc = [
          { label: "A+", value: "a" },
          { label: "A-", value: "a-" },
          { label: "B+", value: "b+" },
          { label: "B-", value: "b-" },
          { label: "O+", value: "o+" },
          { label: "O-", value: "o-" },
          { label: "AB+", value: "ab+" },
          { label: "AB-", value: "ab-" },
        ],
        xc = [
          { label: "Active", value: !0 },
          { label: "Inactive", value: !1 },
        ],
        hc = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ],
        pc = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ],
        jc = [
          { label: "Monthly", value: "monthly" },
          { label: "Hourly", value: "hourly" },
        ];
      function gc() {
        var e, t, a, n;
        const { selectedSetting: i } = (0, l.useContext)(Ce.A),
          { id: o } = (0, _.g)(),
          r = (0, _.Zp)(),
          [d, c] = (0, l.useState)(null),
          [m, u] = (0, l.useState)(!1),
          [x, h] = (0, l.useState)([]),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)([]),
          [y, f] = (0, l.useState)([]),
          [v, S] = (0, l.useState)([]);
        console.log(d, "dataToEdit");
        const [k, C] = (0, l.useState)([]);
        (0, l.useEffect)(() => {
          o &&
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(
                  ke.r.employee.getEmpById + "/" + o
                );
                c(e.result);
              } catch (e) {
                console.log(e);
              }
            })();
        }, [o, i]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.designation.list);
              h(e.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.department.list);
                j(e.result.map((e) => ({ label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.role.list);
                A(e.result.map((e) => ({ label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.salaryGrade.list, {
                  params: { schoolId: i._id },
                });
                C(e.result.map((e) => ({ label: e.grade, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })();
        }, [i._id]);
        const D = (0, et.Wx)({
            initialValues: {
              name:
                (null === d || void 0 === d ? void 0 : d.basicInfo.name) || "",
              empId:
                (null === d || void 0 === d ? void 0 : d.basicInfo.empId) || "",
              responsibility:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.responsibility) || "",
              designation:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.designation._id) || "",
              contactNumber:
                (null === d || void 0 === d ? void 0 : d.contactNumber) || "",
              secMobileNo:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.secMobileNo) || "",
              gender:
                (null === d || void 0 === d ? void 0 : d.basicInfo.gender) ||
                "",
              bloodGroup:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.bloodGroup) || "",
              religion:
                (null === d || void 0 === d ? void 0 : d.basicInfo.religion) ||
                "",
              presentAddress:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.presentAddress) || "",
              permanentAddress:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.permanentAddress) || "",
              dob:
                null !== d &&
                void 0 !== d &&
                null !== (e = d.basicInfo) &&
                void 0 !== e &&
                e.dob
                  ? Be()(d.basicInfo.dob).format("YYYY/MM/DD")
                  : null,
              fatherName:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.fatherName) || "",
              spouseName:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.spouseName) || "",
              aadharNo:
                (null === d || void 0 === d ? void 0 : d.basicInfo.aadharNo) ||
                "",
              fatherOccupation:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.fatherOccupation) || "",
              spouseOccupation:
                (null === d || void 0 === d
                  ? void 0
                  : d.basicInfo.spouseOccupation) || "",
              qualification:
                (null === d || void 0 === d
                  ? void 0
                  : d.academicInfo.qualification) || "",
              workExperience:
                (null === d || void 0 === d
                  ? void 0
                  : d.academicInfo.workExperience) || "",
              salaryGrade:
                (null === d ||
                void 0 === d ||
                null === (t = d.academicInfo.salaryGrade) ||
                void 0 === t
                  ? void 0
                  : t._id) || "",
              email:
                (null === d || void 0 === d ? void 0 : d.academicInfo.email) ||
                "",
              salaryType:
                (null === d || void 0 === d
                  ? void 0
                  : d.academicInfo.salaryType) || "",
              role: (null === d || void 0 === d ? void 0 : d.role._id) || "",
              department:
                (null === d || void 0 === d
                  ? void 0
                  : d.academicInfo.department._id) || "",
              joiningDate:
                null !== d &&
                void 0 !== d &&
                null !== (a = d.academicInfo) &&
                void 0 !== a &&
                a.joiningDate
                  ? Be()(d.academicInfo.joiningDate).format("YYYY/MM/DD")
                  : null,
              libraryMember:
                (null === d || void 0 === d ? void 0 : d.libraryMember) || !1,
              username:
                (null === d || void 0 === d ? void 0 : d.username) || "",
              password:
                (null === d || void 0 === d ? void 0 : d.otherInfo.password) ||
                "",
              public:
                (null === d || void 0 === d ? void 0 : d.otherInfo.public) ||
                !1,
              showDetailsForWeb:
                (null === d || void 0 === d
                  ? void 0
                  : d.otherInfo.showDetailsForWeb) || !1,
              active: (null === d || void 0 === d ? void 0 : d.active) || !0,
            },
            onSubmit: async (e) => {
              try {
                const t = {
                  basicInfo: {
                    name: e.name,
                    empId: e.empId,
                    designation: e.designation,
                    secMobileNo: e.secMobileNo,
                    gender: e.gender,
                    religion: e.religion,
                    presentAddress: e.presentAddress,
                    permanentAddress: e.permanentAddress,
                    dob: e.dob,
                    fatherName: e.fatherName,
                    spouseName: e.spouseName,
                    aadharNo: e.aadharNo,
                    fatherOccupation: e.fatherOccupation,
                    spouseOccupation: e.spouseOccupation,
                    responsibility: e.responsibility,
                  },
                  academicInfo: {
                    workExperience: e.workExperience,
                    salaryGrade: e.salaryGrade,
                    email: e.email,
                    salaryType: e.salaryType,
                    department: e.department,
                    joiningDate: e.joiningDate,
                  },
                  otherInfo: {
                    public: e.public || !1,
                    showDetailsForWeb: e.showDetailsForWeb || !1,
                  },
                  contactNumber: e.contactNumber,
                  role: e.role,
                  username: e.username,
                  password: e.password,
                  active: e.active,
                  photo: e.photo,
                  libraryMember: e.libraryMember,
                  schoolId: i._id,
                };
                u(!0);
                const a = new FormData();
                if (
                  (a.append("body", JSON.stringify(t)),
                  y.forEach((e) => a.append("employeePhoto", e)),
                  v.forEach((e) => a.append("resume", e)),
                  d)
                ) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.employee.update + "/" + d._id,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.employee.create,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                }
                r("/sch/human-resource/employee");
              } catch (t) {
                console.log(t);
              }
              u(!1);
            },
            enableReinitialize: !0,
          }),
          w = (e, t) => {
            const { files: a } = e.target;
            let l = [];
            if (a.length > 0) {
              for (let e = 0; e < a.length; e++) {
                const t = a[e];
                l.push(t);
              }
              "resume" === t ? S(l) : f(l);
            } else console.log("No files selected");
          },
          I = (e, t) => {
            f(y.filter((t) => t.name != e)), S(v.filter((t) => t.name != e));
          };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Add Employee", showTextField: !1 }),
            (0, re.jsxs)(cc, {
              children: [
                (0, re.jsx)(dc, {
                  children: (0, re.jsx)("img", {
                    src:
                      y.length > 0
                        ? URL.createObjectURL(y[0])
                        : null !== d && void 0 !== d && d.photo
                        ? null === d || void 0 === d
                          ? void 0
                          : d.photo
                        : Zs,
                    style: {
                      width: "100px",
                      height: "100px",
                      objectFit: "contain",
                    },
                    alt: "photo",
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  container: !0,
                  spacing: 2,
                  display: "flex",
                  justifyContent: "center",
                  children: (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Ol.A, {
                      name: "employeePhoto",
                      multi: !1,
                      label: "Select Photo",
                      onChange: (e) => w(e, "employeePhoto"),
                      previousFile:
                        null === d || void 0 === d ? void 0 : d.photo,
                      customOnChange: !0,
                      selectedFiles: y,
                      onRemove: (e) => I(e),
                      accept: "image/jpeg, image/png",
                    }),
                  }),
                }),
              ],
            }),
            (0, re.jsxs)("form", {
              onSubmit: D.handleSubmit,
              children: [
                (0, re.jsxs)(oc, {
                  children: [
                    (0, re.jsx)(rc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Basic Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "name",
                              formik: D,
                              label: "Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "empId",
                              formik: D,
                              label: "Employee Id",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "responsibility",
                              formik: D,
                              label: "Responsibility",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "designation",
                              formik: D,
                              label: "Designation",
                              options: x,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "contactNumber",
                              formik: D,
                              label: "Contact Number",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "secMobileNo",
                              formik: D,
                              label: "Secondary Contact Number",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "gender",
                              formik: D,
                              label: "Select Gender",
                              options: mc,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "bloodGroup",
                              formik: D,
                              label: "Select Blood Group",
                              options: uc,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "religion",
                              formik: D,
                              label: "Religon",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              required: !0,
                              formik: D,
                              label: "Date of Birth",
                              name: "dob",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "presentAddress",
                              formik: D,
                              label: "Present Address",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "permanentAddress",
                              formik: D,
                              label: "Permanent Address",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "fatherName",
                              formik: D,
                              label: "Father Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "spouseName",
                              formik: D,
                              label: "Spouse Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "aadharNo",
                              formik: D,
                              label: "Aadhar No.",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "fatherOccupation",
                              formik: D,
                              label: "Father Occupation",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "spouseOccupation",
                              formik: D,
                              label: "Spouse Occupation",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(oc, {
                  children: [
                    (0, re.jsx)(rc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Academic Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "qualification",
                              formik: D,
                              label: "Qualification              ",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "workExperience",
                              formik: D,
                              label: "Work Experience",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "salaryGrade",
                              formik: D,
                              label: "Select Salary Grade",
                              options: k,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "email",
                              formik: D,
                              label: "Email",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "salaryType",
                              formik: D,
                              label: "Select Salary Type",
                              options: jc,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "role",
                              formik: D,
                              label: "Select Role",
                              options: g,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "department",
                              formik: D,
                              label: "Select Department",
                              options: p,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              required: !0,
                              name: "joiningDate",
                              formik: D,
                              label: "Joining Date",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Ol.A, {
                              multi: !1,
                              name: "resume",
                              label: "Upload Resume",
                              onChange: (e) => w(e, "resume"),
                              customOnChange: !0,
                              selectedFiles: v,
                              previousFile:
                                null === d ||
                                void 0 === d ||
                                null === (n = d.academicInfo) ||
                                void 0 === n
                                  ? void 0
                                  : n.resume,
                              onRemove: (e) => I(e),
                              accept: "image/*,.pdf",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(oc, {
                  children: [
                    (0, re.jsx)(rc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Log In Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "username",
                              formik: D,
                              label: "User Name",
                            }),
                          }),
                          !d &&
                            (0, re.jsx)(xe.Ay, {
                              xs: 12,
                              md: 6,
                              lg: 3,
                              item: !0,
                              children: (0, re.jsx)(At.A, {
                                required: !0,
                                name: "password",
                                formik: D,
                                label: "Password",
                              }),
                            }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(oc, {
                  children: [
                    (0, re.jsx)(rc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Other Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "libraryMember",
                              formik: D,
                              label: "Library Member",
                              options: pc,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "public",
                              formik: D,
                              label: "View On Web",
                              options: hc,
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(oc, {
                  sx: { marginBottom: "60px" },
                  children: [
                    (0, re.jsx)(rc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Profile Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsx)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            name: "active",
                            formik: D,
                            label: "Status",
                            options: xc,
                          }),
                        }),
                      }),
                    }),
                  ],
                }),
                (0, re.jsx)(xe.Ay, {
                  container: !0,
                  children: (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    children: (0, re.jsx)(sc, {
                      children: (0, re.jsxs)(b.A, {
                        spacing: 2,
                        direction: "row",
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            color: "error",
                            variant: "contained",
                            onClick: () => r(-1),
                            children: "Cancel",
                          }),
                          (0, re.jsx)(ht.A, {
                            loading: m,
                            type: "submit",
                            size: "small",
                            variant: "contained",
                            children: "Submit",
                          }),
                        ],
                      }),
                    }),
                  }),
                }),
              ],
            }),
          ],
        });
      }
      const Ac = [
        { name: "School Name", key: "name" },
        { name: "Logo", type: "image", key: "logo" },
      ];
      function yc() {
        const [e, t] = (0, l.useState)(),
          { setSettings: a, settings: n } = (0, l.useContext)(Ce.A),
          i = (0, _.Zp)(),
          s = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.school.list);
              a(e.result.filter((e) => e.active)), t(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          s();
        }, []);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Manage Institute" }),
            (0, re.jsx)(jt.A, {
              actions: ["edit", "switch"],
              bodyDataModal: "manage institute",
              bodyData: e,
              tableKeys: Ac,
              toggleStatus: "active",
              onToggleSwitch: async (e) => {
                try {
                  const { data: t } = await (0, Se.yJ)(
                    ke.r.school.toggleActiveStatus + "/" + e._id
                  );
                  s();
                } catch (t) {
                  console.log(t);
                }
              },
              onEditClick: (e) => {
                i("/sch/manage-institute/edit-institute/".concat(e._id));
              },
            }),
            (0, re.jsx)(rt, {
              title: "Add Institute",
              onAddClick: (e) => {
                i("/sch/manage-institute/add-institute");
              },
            }),
          ],
        });
      }
      var fc = a(70877),
        vc = a(21732);
      function bc(e) {
        let {
          dataToEdit: t,
          title: a,
          onUpdate: n = () => {},
          styles: o = {},
        } = e;
        const [r, d] = (0, l.useState)(!1),
          [c, m] = (0, l.useState)(!1),
          [p, j] = (0, l.useState)([]),
          g = (0, i.A)();
        let A = (0, dt.A)(g.breakpoints.down("sm"));
        const y = () => d(!1);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)($e.A, {
              fullWidth: !0,
              onClick: () => d(!0),
              size: "small",
              variant: "contained",
              sx: { mt: 2 },
              children: a,
            }),
            (0, re.jsxs)(ct.A, {
              fullScreen: A,
              open: r,
              onClose: y,
              PaperProps: { sx: { width: "100%", maxWidth: 650, ...o } },
              children: [
                (0, re.jsx)(mt.A, { children: "Add/Update Banner images" }),
                (0, re.jsx)(x.A, {}),
                (0, re.jsx)(ut.A, {
                  sx: { padding: "10px" },
                  children: (0, re.jsxs)(s.A, {
                    sx: { margin: "20px 0" },
                    children: [
                      (0, re.jsxs)(s.A, {
                        sx: {
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "space-between",
                        },
                        children: [
                          (0, re.jsx)(u.A, {
                            sx: { fontWeight: "bold" },
                            children: "Add Files",
                          }),
                          (0, re.jsx)(Mt.A, {
                            name: "images",
                            label: "Select files",
                            fullWidth: !0,
                            onChange: (e) => {
                              const t = e.target.files;
                              if (t.length > 0) {
                                let e = [];
                                for (let a = 0; a < t.length; a++) {
                                  const l = t[a];
                                  e.push(l);
                                }
                                j([...e]);
                              } else console.log("No files selected");
                            },
                            sx: {
                              borderWidth: 1,
                              borderRadius: g.shape.borderRadius,
                              maxWidth: "300px",
                            },
                            variant: "outlined",
                            InputLabelProps: { shrink: !0 },
                            inputProps: { type: "file", multiple: !0 },
                            InputProps: {
                              style: {
                                borderWidth: 1,
                                height: "40px",
                                borderRadius: g.shape.borderRadius,
                              },
                            },
                          }),
                        ],
                      }),
                      p.map((e, t) =>
                        (0, re.jsxs)(
                          s.A,
                          {
                            sx: {
                              display: "flex",
                              alignItems: "center",
                              justifyContent: "space-between",
                              padding: "10px",
                              background: "#5fa5f661",
                              borderRadius: "5px",
                              marginTop: "5px",
                            },
                            children: [
                              (0, re.jsx)(u.A, { children: e.name }),
                              (0, re.jsx)(h.A, {
                                onClick: (e) =>
                                  ((e) => {
                                    j(p.filter((t, a) => a !== e));
                                  })(t),
                                children: (0, re.jsx)(Sa.A, {
                                  fontSize: "small",
                                }),
                              }),
                            ],
                          },
                          e.name + t.toString()
                        )
                      ),
                    ],
                  }),
                }),
                (0, re.jsxs)(xt.A, {
                  children: [
                    (0, re.jsx)($e.A, {
                      size: "small",
                      color: "error",
                      variant: "contained",
                      onClick: y,
                      children: "Cancel",
                    }),
                    (0, re.jsx)(ht.A, {
                      disabled: !p.length,
                      size: "small",
                      loading: c,
                      variant: "contained",
                      onClick: async (e) => {
                        e.preventDefault();
                        try {
                          m(!0);
                          const e = new FormData();
                          p.forEach((t) => e.append("bannerImages", t)),
                            console.log(p, "imageeeee");
                          const { data: a } = await (0, Se.yJ)(
                            ke.r.school.addFiles + "/" + t._id,
                            e,
                            {
                              headers: {
                                "Content-Type": "multipart/form-data",
                              },
                            }
                          );
                          n(a.result), y(), j([]), m(!1);
                        } catch (a) {
                          m(!1), console.log(a);
                        }
                      },
                      children: "Add",
                    }),
                  ],
                }),
              ],
            }),
          ],
        });
      }
      var Sc = a(48475),
        kc = a.n(Sc),
        Cc = a(22011);
      const Dc = (0, n.Ay)(s.A)({
          background: "#ececec",
          width: "100px",
          height: "100px",
          borderRadius: "50%",
          overflow: "hidden",
          backgroundPosition: "center",
        }),
        wc = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            border: "1px solid",
            borderColor: "lightgray",
            marginBottom: "20px",
            borderRadius: t.shape.borderRadius,
            overflow: "hidden",
          };
        }),
        Ic = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            textAlign: "start",
            fontSize: "14px",
            padding: "5px 10px",
            borderBottom: "1px solid",
            borderBottomColor: "lightgray",
            fontWeight: "bold",
            color: "white",
            background: t.palette.secondary.main,
          };
        }),
        Nc = (0, n.Ay)(s.A)({
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          marginBottom: "15px",
          padding: "15px 0px",
        }),
        _c = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "flex-end",
            gap: t.spacing(2),
            position: "fixed",
            bottom: 0,
            right: 0,
            left: 0,
            background: "whitesmoke",
            padding: t.spacing(2),
            zIndex: 1e3,
          };
        }),
        Tc = [
          { label: "Manual", value: "manual" },
          { label: "Auto ascending name", value: "autoAscendingName" },
          {
            label: "Auto ascending name female",
            value: "autoAscendingNameFemale",
          },
        ],
        Mc = [
          { label: "Class wise", value: "classWise" },
          { label: "Subject wise", value: "subjectWise" },
          { label: "Session wise", value: "sessionWise" },
        ],
        Fc = [
          { label: "Manual", value: "manual" },
          { label: "Auto Ascending No.", value: "autoAscendingNo" },
        ];
      function zc(e) {
        var t;
        let { initialValue: a = null } = e;
        const {
            selectedSetting: n,
            setSelectedSetting: i,
            setSettings: o,
          } = (0, l.useContext)(Ce.A),
          r = (0, _.Zp)(),
          { id: d } = (0, _.g)(),
          [c, m] = (Object.keys(kc()), (0, l.useState)(a)),
          [u, x] = (0, l.useState)(!1),
          [p, j] = (0, l.useState)([]),
          [g, A] = (0, l.useState)([]),
          { isDarkMode: y } = (0, l.useContext)(st.A),
          f = async () => {
            try {
              const { data: e } = await (0, Se.Jt)(
                ke.r.school.details + "/" + d
              );
              m(e.result);
            } catch (e) {
              console.log(e);
            }
          };
        (0, l.useEffect)(() => {
          d && f();
        }, [d]);
        const [v, S] = (0, l.useState)(null),
          k = vc.p.map((e) => ({
            label: "".concat(e.currency, " - ").concat(e.code),
            value: e.code,
          })),
          C = (0, et.Wx)({
            initialValues: {
              name: (null === c || void 0 === c ? void 0 : c.name) || "",
              address: (null === c || void 0 === c ? void 0 : c.address) || "",
              phone: (null === c || void 0 === c ? void 0 : c.phone) || "",
              regDate:
                null !== c && void 0 !== c && c.regDate
                  ? Be()(c.regDate).format("YYYY/MM/DD")
                  : null,
              email: (null === c || void 0 === c ? void 0 : c.email) || "",
              fax: (null === c || void 0 === c ? void 0 : c.fax) || "",
              websiteFooter:
                (null === c || void 0 === c ? void 0 : c.websiteFooter) || "",
              description:
                (null === c || void 0 === c ? void 0 : c.description) || "",
              currency:
                (null === c || void 0 === c ? void 0 : c.currency) || "",
              currencySymbol:
                (null === c || void 0 === c ? void 0 : c.currencySymbol) || "",
              sessionStartMonth:
                c && c.sessionStartMonth ? c.sessionStartMonth : null,
              sessionEndMonth:
                c && c.sessionEndMonth ? c.sessionEndMonth : null,
              rollNumberType:
                (null === c || void 0 === c ? void 0 : c.rollNumberType) || "",
              studentAttendenceType:
                (null === c || void 0 === c
                  ? void 0
                  : c.studentAttendenceType) || "",
              admissionNo:
                (null === c || void 0 === c ? void 0 : c.admissionNo) || "",
              latitude:
                (null === c || void 0 === c ? void 0 : c.latitude) || "",
              longitude:
                (null === c || void 0 === c ? void 0 : c.longitude) || "",
              defaultTimeZone:
                (null === c || void 0 === c ? void 0 : c.defaultTimeZone) || "",
              googleAnalyticsId:
                (null === c || void 0 === c ? void 0 : c.googleAnalyticsId) ||
                "",
              teacherActivityFeedbackEnabled:
                (null === c || void 0 === c
                  ? void 0
                  : c.teacherActivityFeedbackEnabled) || !1,
              facebookUrl:
                (null === c || void 0 === c ? void 0 : c.facebookUrl) || "",
              twitterUrl:
                (null === c || void 0 === c ? void 0 : c.twitterUrl) || "",
              linkedinUrl:
                (null === c || void 0 === c ? void 0 : c.linkedinUrl) || "",
              youtubeUrl:
                (null === c || void 0 === c ? void 0 : c.youtubeUrl) || "",
              instagramUrl:
                (null === c || void 0 === c ? void 0 : c.instagramUrl) || "",
              pinterestUrl:
                (null === c || void 0 === c ? void 0 : c.pinterestUrl) || "",
              location:
                (null === c || void 0 === c ? void 0 : c.location) || "",
              selectedTheme:
                (null === c || void 0 === c ? void 0 : c.selectedTheme) || 1,
            },
            onSubmit: async (e) => {
              try {
                const t = { ...e };
                x(!0);
                const a = new FormData();
                if (
                  (a.append("bodyData", JSON.stringify(t)),
                  p.forEach((e) => a.append("logo", e)),
                  c)
                ) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.school.update + "/" + c._id,
                    a,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.school.create, a, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                }
                C.resetForm(),
                  (async () => {
                    try {
                      var e;
                      const { data: t } = await (0, Se.Jt)(
                        ke.h.school.getSchools
                      );
                      o(t.result),
                        i(
                          null === (e = t.result) || void 0 === e
                            ? void 0
                            : e.find((e) => e._id === n._id)
                        );
                    } catch (t) {
                      console.log(t);
                    }
                  })(),
                  j([]),
                  r(-1);
              } catch (t) {
                console.log(t);
              }
              x(!1);
            },
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Add Institute", showTextField: !1 }),
            (0, re.jsxs)("form", {
              onSubmit: C.handleSubmit,
              children: [
                (0, re.jsxs)(Nc, {
                  children: [
                    (0, re.jsx)(Dc, {
                      children: (0, re.jsx)("img", {
                        src:
                          p.length > 0
                            ? URL.createObjectURL(p[0])
                            : null !== c && void 0 !== c && c.logo
                            ? null === c || void 0 === c
                              ? void 0
                              : c.logo
                            : Zs,
                        style: {
                          width: "100px",
                          height: "100px",
                          objectFit: "contain",
                        },
                        alt: "loogo",
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      container: !0,
                      spacing: 2,
                      display: "flex",
                      justifyContent: "center",
                      children: (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Ol.A, {
                          multi: !1,
                          name: "logo",
                          label: "Select Logo",
                          onChange: (e) =>
                            ((e, t) => {
                              const { files: a } = e.target;
                              let l = [];
                              if (a.length > 0) {
                                for (let e = 0; e < a.length; e++) {
                                  const t = a[e];
                                  l.push(t);
                                }
                                "logo" === t
                                  ? j(l)
                                  : "bannerImages" === t && A(l);
                              } else console.log("No files selected");
                            })(e, "logo"),
                          previousFile:
                            null === c || void 0 === c ? void 0 : c.logo,
                          customOnChange: !0,
                          selectedFiles: p,
                          onRemove: (e) =>
                            ((e, t) => {
                              j(p.filter((t) => t.name != e)),
                                A(g.filter((t) => t.name != e));
                            })(e),
                          accept: "image/jpeg, image/png",
                        }),
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(wc, {
                  style: { position: "relative", zIndex: "1" },
                  children: [
                    (0, re.jsx)(Ic, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Basic Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "name",
                              formik: C,
                              label: "School Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "address",
                              formik: C,
                              label: "Address",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "phone",
                              formik: C,
                              label: "Phone number",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              formik: C,
                              label: "Registration Date",
                              name: "regDate",
                              required: !0,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "email",
                              formik: C,
                              label: "Email",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "fax",
                              formik: C,
                              label: "Fax",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "location",
                              formik: C,
                              label: "Location",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "websiteFooter",
                              formik: C,
                              label: "Website Footer",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 12,
                            lg: 12,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "description",
                              formik: C,
                              label: "Note",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(wc, {
                  sx: { overflow: "visible" },
                  children: [
                    (0, re.jsx)(Ic, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Setting Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "currency",
                              formik: C,
                              label: "Currency",
                              options: k,
                              onChange: (e) => {
                                const t = e.target.value;
                                C.setFieldValue("currency", t),
                                  C.setFieldValue("currencySymbol", kc()[t]);
                              },
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "currencySymbol",
                              formik: C,
                              label: "Currency Symbol",
                              disabled: !0,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              formik: C,
                              label: "Session Start Month",
                              name: "sessionStartMonth",
                              openTo: "month",
                              inputFormat: "MMM",
                              views: ["month"],
                              required: !0,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              formik: C,
                              label: "Session End Month",
                              name: "sessionEndMonth",
                              openTo: "month",
                              inputFormat: "MMM",
                              views: ["month"],
                              required: !0,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "rollNumberType",
                              formik: C,
                              label: "Roll Number",
                              options: Tc,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "studentAttendenceType",
                              formik: C,
                              label: "Attendence Type ",
                              options: Mc,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "admissionNo",
                              formik: C,
                              label: "Admission Number",
                              options: Fc,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "latitude",
                              formik: C,
                              label: "Latitude",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "longitude",
                              formik: C,
                              label: "Longitude",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            mt: 2,
                            children: (0, re.jsx)(fc.Ay, {
                              styles: {
                                control: (e, t) => ({
                                  ...e,
                                  height: "42px",
                                  backgroundColor: y ? "black" : "white",
                                }),
                                menu: (e, t) => ({ ...e, zIndex: 1e3 }),
                                option: (e, t) => ({
                                  ...e,
                                  zIndex: 1e3,
                                  backgroundColor: y ? "black" : "white",
                                  color: y ? "white" : "black",
                                  "&:hover": {
                                    backgroundColor: y ? "lightgray" : "white",
                                    color: y ? "black" : "",
                                  },
                                }),
                              },
                              placeholder: "Default Timezone",
                              name: "defaultTimeZone",
                              value: C.values.defaultTimeZone,
                              onChange: (e) =>
                                C.setFieldValue("defaultTimeZone", e),
                              label: "Time Zone",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "googleAnalyticsId",
                              formik: C,
                              label: "Google Analytics Id",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "teacherActivityFeedbackEnabled",
                              formik: C,
                              label: "Teacher Activity Feedack Enable",
                              options: [
                                { label: "Yes", value: !0 },
                                { label: "No", value: !1 },
                              ],
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(wc, {
                  children: [
                    (0, re.jsx)(Ic, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Social Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "facebookUrl",
                              formik: C,
                              label: "Facebook URL",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "twitterUrl",
                              formik: C,
                              label: "X URL",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "linkedinUrl",
                              formik: C,
                              label: "Linkedin Url",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "youtubeUrl",
                              formik: C,
                              label: "Youtube URL",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "instagramUrl",
                              formik: C,
                              label: "Instagram URL",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "pinterestUrl",
                              formik: C,
                              label: "Pinterest URL",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                c
                  ? (0, re.jsxs)(wc, {
                      children: [
                        (0, re.jsx)(Ic, {
                          id: "modal-modal-title",
                          variant: "h6",
                          component: "h2",
                          children: "Banner Image",
                        }),
                        (0, re.jsx)(xe.Ay, {
                          container: !0,
                          spacing: 2,
                          children: (0, re.jsx)(xe.Ay, {
                            container: !0,
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 12,
                            justifyContent: "flex-end",
                            children: (0, re.jsx)(s.A, {
                              sx: {
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "flex-end",
                                marginRight: "10px",
                              },
                              children: (0, re.jsx)(bc, {
                                dataToEdit: c,
                                title: "Upload Banner",
                                onUpdate: f,
                              }),
                            }),
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          container: !0,
                          spacing: 2,
                          children: (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 12,
                            md: 6,
                            lg: 12,
                            m: 2,
                            gap: 2,
                            sx: { display: "flex", overflowX: "auto" },
                            children:
                              null === c ||
                              void 0 === c ||
                              null === (t = c.bannerImages) ||
                              void 0 === t
                                ? void 0
                                : t.map((e, t) =>
                                    (0, re.jsxs)(
                                      s.A,
                                      {
                                        sx: {
                                          justifyContent: "center",
                                          backgroundSize: "cover",
                                          "&:hover": {
                                            position: "relative",
                                            display: "inline-block",
                                          },
                                        },
                                        children: [
                                          (0, re.jsx)("img", {
                                            src: e,
                                            alt: "image",
                                            style: {
                                              width: "150px",
                                              height: "100px",
                                              borderRadius: "5px",
                                              boxShadow: "0px 0px 2px 0px gray",
                                            },
                                          }),
                                          (0, re.jsx)(h.A, {
                                            color: "error",
                                            "aria-label": "delete",
                                            onClick: () =>
                                              (async (e) => {
                                                try {
                                                  const { data: t } = await (0,
                                                  Se.yJ)(
                                                    ke.r.school.removeFile +
                                                      "/" +
                                                      c._id,
                                                    { file: e }
                                                  );
                                                  f();
                                                } catch (t) {
                                                  console.log(t);
                                                }
                                              })(e),
                                            sx: {
                                              position: "absolute",
                                              top: 0,
                                              right: 0,
                                              borderRadius: "50px",
                                              padding: "2px",
                                              cursor: "pointer",
                                              background: "#DEE0E2",
                                            },
                                            children: (0, re.jsx)(Rt.A, {
                                              color: "error",
                                            }),
                                          }),
                                        ],
                                      },
                                      t
                                    )
                                  ),
                          }),
                        }),
                      ],
                    })
                  : null,
                (0, re.jsxs)(wc, {
                  sx: { marginBottom: "60px" },
                  children: [
                    (0, re.jsx)(Ic, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Select Your Favorite Theme",
                    }),
                    (0, re.jsx)(s.A, {
                      m: 2,
                      children: (0, re.jsx)(Cc.A, {
                        onThemeSelect: (e) => {
                          C.setFieldValue("selectedTheme", e);
                        },
                        webTheme: !0,
                      }),
                    }),
                  ],
                }),
                (0, re.jsx)(xe.Ay, {
                  container: !0,
                  children: (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    children: (0, re.jsx)(_c, {
                      children: (0, re.jsxs)(b.A, {
                        spacing: 2,
                        direction: "row",
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            color: "error",
                            variant: "contained",
                            onClick: () => r(-1),
                            children: "Cancel",
                          }),
                          (0, re.jsx)(ht.A, {
                            loading: u,
                            type: "submit",
                            size: "small",
                            variant: "contained",
                            children: c ? "Update" : "Submit",
                          }),
                        ],
                      }),
                    }),
                  }),
                }),
              ],
            }),
          ],
        });
      }
      var Ec = a(78218);
      const qc = (0, n.Ay)(oa.A)((e) => {
          let { theme: t } = e;
          return { "&:nth-of-type(odd)": { backgroundColor: "#44628561" } };
        }),
        Yc = (0, n.Ay)(ra.A)((e) => {
          let { theme: t } = e;
          return {
            width: 200,
            padding: "13px 5px",
            border: "1px solid gray",
            ["&.".concat(va.A.head)]: {
              backgroundColor: t.palette.common.black,
              color: t.palette.common.white,
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        });
      function Wc(e) {
        let { employee: t } = e;
        const a = (e) => {
          window.open(e, "_blank");
        };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            null !== t && void 0 !== t && t.photo
              ? (0, re.jsx)("img", {
                  src: t.photo,
                  height: 100,
                  width: 100,
                  style: {
                    borderRadius: "50%",
                    display: "block",
                    objectFit: "cover",
                    margin: "0 auto",
                    border: "1x solid lightgray",
                  },
                  alt: "Employee Photo",
                })
              : (0, re.jsx)(k.A, {
                  sx: { height: 75, width: 75 },
                  src: "/broken-image.jpg",
                }),
            (0, re.jsx)(ia.A, {
              "aria-label": "customized table",
              sx: {
                width: 660,
                my: 2,
                display: { xs: "none", sm: "block", md: "block", lg: "block" },
                borderRadius: "5px",
              },
              children: (0, re.jsxs)(ca.A, {
                children: [
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Name",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.name || "NA",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "National Id",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.aadharNo || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Designation",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.designation.name || "NA",
                      }),
                      (0, re.jsxs)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: ["Phone", " "],
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.contactNumber || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Present Address",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.presentAddress || "NA",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Permanent Address",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.permanentAddress || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Gender",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.gender || "NA",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Blood Group",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.bloodGroup.toUpperCase() || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsxs)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: ["Religion", " "],
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.religion || "NA",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Birth Date",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: Be()(t.basicInfo.dob || "NA").format(
                          "DD-MM-YYYY"
                        ),
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Email",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.academicInfo.email || "NA",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Role",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.role.name || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Joining Date",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: Be()(
                          t.academicInfo.joiningDate || "NA"
                        ).format("DD-MM-YYYY"),
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Resume",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "center",
                        children: t.academicInfo.resume
                          ? (0, re.jsx)(h.A, {
                              color: "primary",
                              children: (0, re.jsx)(Ec.A, {
                                onClick: () => a(t.academicInfo.resume),
                              }),
                            })
                          : "NA",
                      }),
                    ],
                  }),
                ],
              }),
            }),
            (0, re.jsx)(ia.A, {
              "aria-label": "customized table",
              sx: {
                width: "100%",
                mx: 2,
                my: 2,
                display: { xs: "visible", sm: "none", md: "none", lg: "none" },
              },
              children: (0, re.jsxs)(ca.A, {
                children: [
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Name",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.name || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "National Id",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.aadharNo || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Designation",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.designation.name || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Phone",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.contactNumber || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsxs)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: ["Present Address", " "],
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.presentAddress || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Permanent Address",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.permanentAddress || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Gender",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.gender || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Blood Group",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.bloodGroup.toUpperCase() || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Birth Date",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: Be()(t.basicInfo.dob || "NA").format(
                          "DD-MM-YYYY"
                        ),
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsxs)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: ["Religion", " "],
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.basicInfo.religion || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Email",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.academicInfo.email || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Role",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: t.role.name || "NA",
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Joining Date",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "left",
                        children: Be()(
                          t.academicInfo.joiningDate || "NA"
                        ).format("DD-MM-YYYY"),
                      }),
                    ],
                  }),
                  (0, re.jsxs)(qc, {
                    children: [
                      (0, re.jsx)(Yc, {
                        align: "left",
                        sx: { fontWeight: "bold" },
                        children: "Resume",
                      }),
                      (0, re.jsx)(Yc, {
                        align: "center",
                        children: t.academicInfo.resume
                          ? (0, re.jsx)(h.A, {
                              color: "primary",
                              children: (0, re.jsx)(Ec.A, {
                                onClick: () => a(t.academicInfo.resume),
                              }),
                            })
                          : "NA",
                      }),
                    ],
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Rc = (0, n.Ay)(s.A)({
          background: "#ececec",
          width: "100px",
          height: "100px",
          borderRadius: "50%",
          overflow: "hidden",
          backgroundPosition: "center",
        }),
        Pc = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            border: "1px solid",
            borderColor: "lightgray",
            marginBottom: "50px",
            borderRadius: t.shape.borderRadius,
            overflow: "hidden",
          };
        }),
        Jc = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            textAlign: "start",
            fontSize: "14px",
            padding: "5px 10px",
            borderBottom: "1px solid",
            borderBottomColor: "lightgray",
            fontWeight: "bold",
            color: "white",
            background: t.palette.secondary.main,
          };
        }),
        Vc = (0, n.Ay)(s.A)({
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          marginBottom: "15px",
          padding: "15px 0px",
        }),
        Bc = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "flex-end",
            gap: t.spacing(2),
            position: "fixed",
            bottom: 0,
            right: 0,
            left: 0,
            background: "whitesmoke",
            padding: t.spacing(2),
            zIndex: 1e3,
          };
        }),
        Oc = [
          { label: "Male", value: "male" },
          { label: "Female", value: "female" },
        ],
        Lc = [
          { label: "A+", value: "a+" },
          { label: "B+", value: "b+" },
          { label: "A-", value: "a-" },
          { label: "B-", value: "b-" },
          { label: "O+", value: "o+" },
          { label: "O-", value: "o-" },
          { label: "AB+", value: "ab+" },
          { label: "AB-", value: "ab-" },
        ];
      function Uc(e) {
        var t, a, n, i, o, r, d, c, m, u, x, h, p, j, g, A, y, f, v, S, k;
        let {
          getEmployees: C = () => {},
          employee: D = "",
          setSelectValue: w = 0,
        } = e;
        (0, _.Zp)();
        const { selectedSetting: I } = (0, l.useContext)(Ce.A),
          [N, T] = (0, l.useState)(null),
          [M, F] = (0, l.useState)(null),
          [z, E] = (0, l.useState)([]),
          [q, Y] = (0, l.useState)(!1),
          [W, R] = (0, l.useState)([]),
          [P, J] = (0, l.useState)([]);
        console.log(D, "usha");
        const V = (e, t) => {
            const { files: a } = e.target;
            let l = [];
            if (a.length > 0) {
              for (let e = 0; e < a.length; e++) {
                const t = a[e];
                l.push(t);
              }
              "photo" === t
                ? (console.log(l, "photo"), R(l))
                : "resume" === t && J(l);
            } else console.log("No files selected");
          },
          B = (e, t) => {
            J(P.filter((t) => t.name != e)), R(W.filter((t) => t.name != e));
          };
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.designation.list);
              E(e.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (e) {
              console.error(e);
            }
          })();
        }, []);
        const O = (0, et.Wx)({
          initialValues: {
            name:
              (null === D ||
              void 0 === D ||
              null === (t = D.basicInfo) ||
              void 0 === t
                ? void 0
                : t.name) || "",
            aadharNo:
              (null === D ||
              void 0 === D ||
              null === (a = D.basicInfo) ||
              void 0 === a
                ? void 0
                : a.aadharNo) || "",
            designation:
              (null === D ||
              void 0 === D ||
              null === (n = D.basicInfo) ||
              void 0 === n ||
              null === (i = n.designation) ||
              void 0 === i
                ? void 0
                : i._id) || "",
            gender:
              (null === D ||
              void 0 === D ||
              null === (o = D.basicInfo) ||
              void 0 === o
                ? void 0
                : o.gender) || "",
            bloodGroup:
              (null === D ||
              void 0 === D ||
              null === (r = D.basicInfo) ||
              void 0 === r
                ? void 0
                : r.bloodGroup) || "",
            religion:
              (null === D ||
              void 0 === D ||
              null === (d = D.basicInfo) ||
              void 0 === d
                ? void 0
                : d.religion) || "",
            dob:
              null !== D &&
              void 0 !== D &&
              null !== (c = D.basicInfo) &&
              void 0 !== c &&
              c.dob
                ? Be()(null === D || void 0 === D ? void 0 : D.dob)
                : null,
            presentAddress:
              (null === D ||
              void 0 === D ||
              null === (m = D.basicInfo) ||
              void 0 === m
                ? void 0
                : m.presentAddress) || "",
            permanentAddress:
              (null === D ||
              void 0 === D ||
              null === (u = D.basicInfo) ||
              void 0 === u
                ? void 0
                : u.permanentAddress) || "",
            email:
              (null === D ||
              void 0 === D ||
              null === (x = D.academicInfo) ||
              void 0 === x
                ? void 0
                : x.email) || "",
            joiningDate:
              null !== D &&
              void 0 !== D &&
              null !== (h = D.academicInfo) &&
              void 0 !== h &&
              h.joiningDate
                ? Be()(
                    null === D ||
                      void 0 === D ||
                      null === (p = D.academicInfo) ||
                      void 0 === p
                      ? void 0
                      : p.joiningDate
                  )
                : null,
            resume:
              (null === D ||
              void 0 === D ||
              null === (j = D.academicInfo) ||
              void 0 === j
                ? void 0
                : j.resume) || "",
            facebookUrl:
              (null === D ||
              void 0 === D ||
              null === (g = D.otherInfo) ||
              void 0 === g
                ? void 0
                : g.facebookUrl) || "",
            twitterUrl:
              (null === D ||
              void 0 === D ||
              null === (A = D.otherInfo) ||
              void 0 === A
                ? void 0
                : A.twitterUrl) || "",
            linkedinUrl:
              (null === D ||
              void 0 === D ||
              null === (y = D.otherInfo) ||
              void 0 === y
                ? void 0
                : y.linkedinUrl) || "",
            youtubeUrl:
              (null === D ||
              void 0 === D ||
              null === (f = D.otherInfo) ||
              void 0 === f
                ? void 0
                : f.youtubeUrl) || "",
            instagramUrl:
              (null === D ||
              void 0 === D ||
              null === (v = D.otherInfo) ||
              void 0 === v
                ? void 0
                : v.instagramUrl) || "",
            pinterestUrl:
              (null === D ||
              void 0 === D ||
              null === (S = D.otherInfo) ||
              void 0 === S
                ? void 0
                : S.pinterestUrl) || "",
            username: (null === D || void 0 === D ? void 0 : D.username) || "",
            contactNumber:
              (null === D || void 0 === D ? void 0 : D.contactNumber) || "",
            photo: (null === D || void 0 === D ? void 0 : D.photo) || "",
          },
          onSubmit: async (e) => {
            try {
              const t = {
                schoolId: I._id,
                basicInfo: {
                  name: e.name,
                  aadharNo: e.aadharNo,
                  designation: e.designation,
                  gender: e.gender,
                  bloodGroup: e.bloodGroup,
                  religion: e.religion,
                  dob: e.dob,
                  presentAddress: e.presentAddress,
                  permanentAddress: e.permanentAddress,
                },
                academicInfo: {
                  email: e.email,
                  username: e.username,
                  joiningDate: e.joiningDate,
                  resume: e.resume,
                },
                otherInfo: {
                  facebookUrl:
                    null === e || void 0 === e ? void 0 : e.facebookUrl,
                  twitterUrl:
                    null === e || void 0 === e ? void 0 : e.twitterUrl,
                  linkedinUrl:
                    null === e || void 0 === e ? void 0 : e.linkedinUrl,
                  googlePlusUrl:
                    null === e || void 0 === e ? void 0 : e.googlePlusUrl,
                  youtubeUrl:
                    null === e || void 0 === e ? void 0 : e.youtubeUrl,
                  instagramUrl:
                    null === e || void 0 === e ? void 0 : e.instagramUrl,
                  pinterestUrl:
                    null === e || void 0 === e ? void 0 : e.pinterestUrl,
                },
                username: e.username,
                photo: e.photo,
                contactNumber: e.contactNumber,
              };
              Y(!0);
              const a = new FormData();
              a.append("body", JSON.stringify(t)),
                W.forEach((e) => a.append("employeePhoto", e)),
                P.forEach((e) => a.append("resume", e));
              const { data: l } = await (0, Se.yJ)(
                ke.r.employee.update + "/" + D._id,
                a,
                { headers: { "Content-Type": "multipart/form-data" } }
              );
              console.log(l, "put"),
                window.localStorage.setItem(
                  "current_ecs_user",
                  JSON.stringify(l.result)
                ),
                C(),
                w(0);
            } catch (t) {
              console.error(t);
            }
            Y(!1);
          },
          enableReinitialize: !1,
        });
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)("form", {
            onSubmit: O.handleSubmit,
            children: [
              (0, re.jsxs)(Vc, {
                children: [
                  (0, re.jsx)(Rc, {
                    children: (0, re.jsx)("img", {
                      src:
                        W.length > 0
                          ? URL.createObjectURL(W[0])
                          : null !== D && void 0 !== D && D.photo
                          ? null === D || void 0 === D
                            ? void 0
                            : D.photo
                          : Zs,
                      style: {
                        width: "100px",
                        height: "100px",
                        display: "block",
                        objectFit: "cover",
                        margin: "0 auto",
                      },
                      alt: "Preview",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    display: "flex",
                    justifyContent: "center",
                    children: (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Ol.A, {
                        multi: !1,
                        name: "photo",
                        label: "Select Profile",
                        onChange: (e) => V(e, "photo"),
                        previousFile:
                          null === D || void 0 === D ? void 0 : D.photo,
                        customOnChange: !0,
                        selectedFiles: W,
                        onRemove: (e) => B(e),
                        accept: "image/jpeg, image/png",
                      }),
                    }),
                  }),
                ],
              }),
              (0, re.jsxs)(Pc, {
                children: [
                  (0, re.jsx)(Jc, {
                    id: "modal-modal-title",
                    variant: "h6",
                    component: "h2",
                    children: "Basic Information",
                  }),
                  (0, re.jsx)(s.A, {
                    sx: { padding: "10px" },
                    children: (0, re.jsxs)(xe.Ay, {
                      container: !0,
                      spacing: 2,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "name",
                            formik: O,
                            label: "Name",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "aadharNo",
                            formik: O,
                            label: "National Id",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "designation",
                            formik: O,
                            label: "Designation",
                            options: z,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "contactNumber",
                            formik: O,
                            label: "Phone No.",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "gender",
                            formik: O,
                            label: "Gender",
                            options: Oc,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            name: "bloodGroup",
                            formik: O,
                            label: "Blood Group",
                            options: Lc,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "religion",
                            formik: O,
                            label: "Religion",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            formik: O,
                            label: "Date of Birth",
                            name: "dob",
                            required: !0,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "presentAddress",
                            formik: O,
                            label: "Present Address",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "permanentAddress",
                            formik: O,
                            label: "Permanent Address",
                          }),
                        }),
                      ],
                    }),
                  }),
                ],
              }),
              (0, re.jsxs)(Pc, {
                children: [
                  (0, re.jsx)(Jc, {
                    id: "modal-modal-title",
                    variant: "h6",
                    component: "h2",
                    children: "Academic Information",
                  }),
                  (0, re.jsx)(s.A, {
                    sx: { padding: "10px" },
                    children: (0, re.jsxs)(xe.Ay, {
                      container: !0,
                      spacing: 2,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "email",
                            formik: O,
                            label: "Email",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "username",
                            formik: O,
                            label: "User Name",
                            required: !0,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(qt.A, {
                            formik: O,
                            label: "Date of Joining",
                            name: "joiningDate",
                            required: !0,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Ol.A, {
                            multi: !1,
                            name: "resume",
                            label: "Select Resume",
                            onChange: (e) => V(e, "resume"),
                            previousFile:
                              null === D ||
                              void 0 === D ||
                              null === (k = D.academicInfo) ||
                              void 0 === k
                                ? void 0
                                : k.resume,
                            customOnChange: !0,
                            selectedFiles: P,
                            onRemove: (e) => B(e),
                            accept: "image/*,.pdf",
                          }),
                        }),
                      ],
                    }),
                  }),
                ],
              }),
              (0, re.jsxs)(Pc, {
                children: [
                  (0, re.jsx)(Jc, {
                    id: "modal-modal-title",
                    variant: "h6",
                    component: "h2",
                    children: "Other Information",
                  }),
                  (0, re.jsx)(s.A, {
                    sx: { padding: "10px" },
                    children: (0, re.jsxs)(xe.Ay, {
                      container: !0,
                      spacing: 2,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "facebookUrl",
                            formik: O,
                            label: "Facebook URL",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "twitterUrl",
                            formik: O,
                            label: "X URL",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "linkedinUrl",
                            formik: O,
                            label: "Linkedin Url",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "youtubeUrl",
                            formik: O,
                            label: "Youtube URL",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "instagramUrl",
                            formik: O,
                            label: "Instagram URL",
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            name: "pinterestUrl",
                            formik: O,
                            label: "Pinterest URL",
                          }),
                        }),
                      ],
                    }),
                  }),
                ],
              }),
              (0, re.jsx)(Bc, {
                children: (0, re.jsxs)(b.A, {
                  spacing: 2,
                  direction: "row",
                  justifyContent: "flex-end",
                  children: [
                    (0, re.jsx)($e.A, {
                      size: "small",
                      color: "error",
                      variant: "contained",
                      onClick: () => w(0),
                      children: "Cancel",
                    }),
                    (0, re.jsx)(ht.A, {
                      loading: q,
                      type: "submit",
                      size: "small",
                      variant: "contained",
                      children: "Update",
                    }),
                  ],
                }),
              }),
            ],
          }),
        });
      }
      function Hc() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)(0),
          [n, i] = (0, l.useState)(!1),
          [o, r] = (0, l.useState)(null),
          d = async () => {
            const e = window.localStorage.getItem(
              process.env.REACT_APP_CURRENT_USER
            );
            r(JSON.parse(e));
          };
        return (
          (0, l.useEffect)(() => {
            d();
          }, []),
          o
            ? (0, re.jsxs)(re.Fragment, {
                children: [
                  (0, re.jsx)(ce.A, { title: "Profile" }),
                  (0, re.jsx)(kt.A, {
                    onChange: (e, t) => a(t),
                    value: t,
                    labels: ["Profile", "Update Profile"],
                  }),
                  (0, re.jsx)(Ct.A, {
                    index: 0,
                    value: t,
                    children: (0, re.jsx)(s.A, {
                      sx: {
                        display: "flex",
                        flexDirection: "column",
                        justifyContent: "center",
                        alignItems: "center",
                        mt: 3,
                      },
                      children: (0, re.jsx)(Wc, { employee: o }),
                    }),
                  }),
                  (0, re.jsx)(Ct.A, {
                    index: 1,
                    value: t,
                    children: (0, re.jsx)(Uc, {
                      employee: o,
                      setSelectValue: a,
                      getEmployees: d,
                    }),
                  }),
                ],
              })
            : null
        );
      }
      const Gc = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "flex-end",
            gap: t.spacing(2),
            position: "fixed",
            bottom: 0,
            right: 0,
            left: 0,
            background: "whitesmoke",
            padding: t.spacing(2),
            zIndex: 1e3,
          };
        }),
        Kc = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            border: "1px solid",
            borderColor: "lightgray",
            marginBottom: "20px",
            borderRadius: t.shape.borderRadius,
            overflow: "hidden",
          };
        }),
        Qc = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            textAlign: "start",
            fontSize: "14px",
            padding: "5px 10px",
            borderBottom: "1px solid",
            borderBottomColor: "lightgray",
            fontWeight: "bold",
            color: "white",
            background: t.palette.secondary.main,
          };
        }),
        Zc = (0, n.Ay)(s.A)({
          background: "#ececec",
          width: "100px",
          height: "100px",
          borderRadius: "50%",
          overflow: "hidden",
          backgroundPosition: "center",
        }),
        $c = (0, n.Ay)(s.A)({
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          marginBottom: "15px",
          padding: "15px 0px",
        }),
        Xc = [
          { label: "Male", value: "male" },
          { label: "Female", value: "female" },
        ],
        em = [
          { label: "A+", value: "a" },
          { label: "A-", value: "a-" },
          { label: "B+", value: "b+" },
          { label: "B-", value: "b-" },
          { label: "O+", value: "o+" },
          { label: "O-", value: "o-" },
          { label: "AB+", value: "ab+" },
          { label: "AB-", value: "ab-" },
        ],
        tm = [
          { label: "Active", value: !0 },
          { label: "Inactive", value: !1 },
        ],
        am = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ],
        lm = [
          { label: "Yes", value: !0 },
          { label: "No", value: !1 },
        ],
        nm = [
          { label: "Monthly", value: "monthly" },
          { label: "Hourly", value: "hourly" },
        ];
      function im() {
        const e = (0, _.zy)(),
          t = e.state && e.state.data,
          { selectedSetting: a } = (0, l.useContext)(Ce.A),
          [n, i] = (0, l.useState)(!1),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          [m, u] = (0, l.useState)([]),
          [x, h] = (0, l.useState)(null),
          p = (0, _.Zp)();
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.designation.list);
              r(e.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.department.list);
                c(e.result.map((e) => ({ label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.role.list);
                u(e.result.map((e) => ({ label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })();
        }, []);
        const j = (0, et.Wx)({
          initialValues: {
            name: t ? t.basicInfo.name : "",
            empId: t ? t.basicInfo.empId : "",
            responsibility: t ? t.basicInfo.responsibility : "",
            designation: t ? t.basicInfo.designation._id : "",
            contactNumber: t ? t.contactNumber : "",
            secMobileNo: t ? t.basicInfo.secMobileNo : "",
            gender: t ? t.basicInfo.gender : "",
            bloodGroup: t ? t.basicInfo.bloodGroup : "",
            religion: t ? t.basicInfo.religion : "",
            presentAddress: t ? t.basicInfo.presentAddress : "",
            permanentAddress: t ? t.basicInfo.permanentAddress : "",
            dob: t ? Be()(t.basicInfo.dob) : Be()(new Date()),
            fatherName: t ? t.basicInfo.fatherName : "",
            spouseName: t ? t.basicInfo.spouseName : "",
            aadharNo: t ? t.basicInfo.aadharNo : "",
            fatherOccupation: t ? t.basicInfo.fatherOccupation : "",
            spouseOccupation: t ? t.basicInfo.spouseOccupation : "",
            qualification: t ? t.academicInfo.qualification : "",
            workExperience: t ? t.academicInfoworkExperience : "",
            salaryGrade: t ? t.academicInfosalaryGrade : "",
            email: t ? t.academicInfo.email : "",
            salaryType: t ? t.academicInfo.salaryType : "",
            role: t ? t.role._id : "",
            department: t ? t.academicInfo.department._id : "",
            joiningDate: t
              ? Be()(t.academicInfo.joiningDate)
              : Be()(new Date()),
            resume: t ? t.resume : "",
            username: t ? t.username : "",
            password: t ? t.password : "",
            public: t ? t.public : "",
            showDetailsForWeb: !!t && t.showDetailsForWeb,
            photo: t ? t.photo : "",
            active: t ? t.active : "",
          },
          onSubmit: async (e) => {
            try {
              i(!0);
              const l = {
                  basicInfo: {
                    name: e.name,
                    empId: e.empId,
                    designation: e.designation,
                    secMobileNo: e.secMobileNo,
                    gender: e.gender,
                    religion: e.religion,
                    presentAddress: e.presentAddress,
                    permanentAddress: e.permanentAddress,
                    dob: Be()(e.dob),
                    fatherName: e.fatherName,
                    spouseName: e.spouseName,
                    aadharNo: e.aadharNo,
                    fatherOccupation: e.fatherOccupation,
                    spouseOccupation: e.spouseOccupation,
                  },
                  academicInfo: {
                    workExperience: e.workExperience,
                    salaryGrade: e.salaryGrade,
                    email: e.email,
                    salaryType: e.salaryType,
                    department: e.department,
                    joiningDate: Be()(e.joiningDate),
                    resume: e.resume,
                  },
                  otherInfo: {
                    public: e.public,
                    showDetailsForWeb: e.showDetailsForWeb || !1,
                  },
                  contactNumber: e.contactNumber,
                  role: e.role,
                  username: e.username,
                  password: e.password,
                  active: e.active,
                  schoolId: a._id,
                },
                { data: n } = await (0, Se.yJ)(
                  ke.r.employee.update + "/" + t._id,
                  l
                );
              console.log(n, "erttfyuygiu"),
                p("/sch/human-resource/employee"),
                i(!1);
            } catch (l) {
              console.log(l);
            }
            i(!1);
          },
        });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Update Employee", showTextField: !1 }),
            (0, re.jsxs)($c, {
              children: [
                (0, re.jsx)(Zc, {
                  children: (0, re.jsx)("img", {
                    src: x || Zs,
                    style: {
                      width: "100px",
                      height: "100px",
                      objectFit: "contain",
                    },
                    alt: "Preview",
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  container: !0,
                  spacing: 2,
                  display: "flex",
                  justifyContent: "center",
                  children: (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      name: "photo",
                      formik: j,
                      label: "Photo",
                      type: "file",
                      onChange: (e) => {
                        const t = e.target.files[0];
                        if (t) {
                          const e = URL.createObjectURL(t);
                          h(e);
                        }
                      },
                    }),
                  }),
                }),
              ],
            }),
            (0, re.jsxs)("form", {
              onSubmit: j.handleSubmit,
              children: [
                (0, re.jsxs)(Kc, {
                  children: [
                    (0, re.jsx)(Qc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Basic Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "name",
                              formik: j,
                              label: "Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "empId",
                              formik: j,
                              label: "Employee Id",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "responsibility",
                              formik: j,
                              label: "Responsibility",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "designation",
                              formik: j,
                              label: "Designation",
                              options: o,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "contactNumber",
                              formik: j,
                              label: "Contact Number",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "secMobileNo",
                              formik: j,
                              label: "Secondary Contact Number",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "gender",
                              formik: j,
                              label: "Select Gender",
                              options: Xc,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "bloodGroup",
                              formik: j,
                              label: "Select Blood Group",
                              options: em,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "religion",
                              formik: j,
                              label: "Religon",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              formik: j,
                              label: "Date of Birth",
                              name: "dob",
                              required: !0,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "presentAddress",
                              formik: j,
                              label: "Present Address",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "permanentAddress",
                              formik: j,
                              label: "Permanent Address",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "fatherName",
                              formik: j,
                              label: "Father Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "spouseName",
                              formik: j,
                              label: "Spouse Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "aadharNo",
                              formik: j,
                              label: "Aadhar No.",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "fatherOccupation",
                              formik: j,
                              label: "Father Occupation",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "spouseOccupation",
                              formik: j,
                              label: "Spouse Occupation",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(Kc, {
                  children: [
                    (0, re.jsx)(Qc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Academic Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "qualification",
                              formik: j,
                              label: "Qualification              ",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "workExperience",
                              formik: j,
                              label: "Work Experience",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "salaryGrade",
                              formik: j,
                              label: "Select Salary Grade",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "email",
                              formik: j,
                              label: "Email",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "salaryType",
                              formik: j,
                              label: "Select Salary Type",
                              options: nm,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "role",
                              formik: j,
                              label: "Select Role",
                              options: m,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "department",
                              formik: j,
                              label: "Select Department",
                              options: d,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              required: !0,
                              name: "joiningDate",
                              formik: j,
                              label: "Joining Date",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "resume",
                              formik: j,
                              label: "Resume",
                              type: "file",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(Kc, {
                  children: [
                    (0, re.jsx)(Qc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Log In Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsx)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(At.A, {
                            required: !0,
                            name: "username",
                            formik: j,
                            label: "User Name",
                          }),
                        }),
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(Kc, {
                  children: [
                    (0, re.jsx)(Qc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Other Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "public",
                              formik: j,
                              label: "View On Web",
                              options: am,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "showDetailsForWeb",
                              formik: j,
                              label: "Show Details For Web",
                              options: lm,
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(Kc, {
                  sx: { marginBottom: "60px" },
                  children: [
                    (0, re.jsx)(Qc, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Profile Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsx)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 3,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            name: "active",
                            formik: j,
                            label: "Status",
                            options: tm,
                          }),
                        }),
                      }),
                    }),
                  ],
                }),
                (0, re.jsx)(xe.Ay, {
                  container: !0,
                  children: (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    children: (0, re.jsx)(Gc, {
                      children: (0, re.jsxs)(b.A, {
                        spacing: 2,
                        direction: "row",
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            color: "error",
                            variant: "contained",
                            onClick: () => p(-1),
                            children: "Cancel",
                          }),
                          (0, re.jsx)(ht.A, {
                            loading: n,
                            type: "submit",
                            size: "small",
                            variant: "contained",
                            children: "Update",
                          }),
                        ],
                      }),
                    }),
                  }),
                }),
              ],
            }),
          ],
        });
      }
      const sm = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            border: "1px solid",
            borderColor: "lightgray",
            marginBottom: "20px",
            borderRadius: t.shape.borderRadius,
            overflow: "hidden",
          };
        }),
        om = (0, n.Ay)(u.A)((e) => {
          let { theme: t } = e;
          return {
            textAlign: "start",
            fontSize: "14px",
            padding: "5px 10px",
            borderBottom: "1px solid",
            borderBottomColor: "lightgray",
            fontWeight: "bold",
            color: "white",
            background: t.palette.secondary.main,
          };
        }),
        rm = (0, n.Ay)(s.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            justifyContent: "flex-end",
            gap: t.spacing(2),
            position: "fixed",
            bottom: 0,
            right: 0,
            left: 0,
            background: "whitesmoke",
            padding: t.spacing(2),
            zIndex: 1e3,
          };
        }),
        dm = [
          { label: "Male", value: "male" },
          { label: "Female", value: "female" },
        ],
        cm = [
          { label: "A+", value: "a+" },
          { label: "B+", value: "b+" },
          { label: "A-", value: "a-" },
          { label: "B-", value: "b-" },
          { label: "O+", value: "o+" },
          { label: "O-", value: "o-" },
          { label: "AB+", value: "ab+" },
          { label: "AB-", value: "ab-" },
        ],
        mm = [
          { label: "Father", value: "Father" },
          { label: "Mother", value: "Mother" },
          { label: "Sister", value: "Sister" },
          { label: "Brother", value: "Brother" },
          { label: "Uncle", value: "Uncle" },
          { label: "Other Relative", value: "Other Relative" },
        ],
        um = [
          { label: "Yes", value: "yes" },
          { label: "No", value: "no" },
        ];
      function xm() {
        var e,
          t,
          a,
          n,
          i,
          o,
          r,
          d,
          c,
          m,
          x,
          h,
          p,
          j,
          g,
          A,
          y,
          f,
          v,
          S,
          k,
          C,
          D,
          w,
          I,
          N,
          T,
          M;
        const { selectedSetting: F } = (0, l.useContext)(Ce.A),
          z = (0, _.Zp)(),
          [E, q] = (0, l.useState)(null),
          [Y, W] = (0, l.useState)(!1),
          [R, P] = (0, l.useState)([]),
          [J, V] = (0, l.useState)([]),
          [B, O] = (0, l.useState)([]),
          [L, U] = (0, l.useState)([]),
          [H, G] = (0, l.useState)([]),
          [K, Q] = (0, l.useState)([]),
          [Z, $] = (0, l.useState)([]),
          [X, ee] = (0, l.useState)(""),
          { id: te } = (0, _.g)();
        (0, l.useEffect)(() => {
          te &&
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(
                  ke.r.student.details + "/" + te
                );
                console.log(e.result, "=========="), q(e.result);
              } catch (e) {
                console.log(e);
              }
            })();
        }, [te, F]);
        const ae = (0, et.Wx)({
          initialValues: {
            academicYear:
              (null === E || void 0 === E ? void 0 : E.academicYear._id) || "",
            name:
              (null === E || void 0 === E ? void 0 : E.basicInfo.name) || "",
            admissionDate:
              null !== E &&
              void 0 !== E &&
              null !== (e = E.basicInfo) &&
              void 0 !== e &&
              e.admissionDate
                ? Be()(E.basicInfo.admissionDate).format("YYYY/MM/DD")
                : null,
            motherTongue:
              (null === E || void 0 === E
                ? void 0
                : E.basicInfo.motherTongue) || "",
            dob:
              null !== E &&
              void 0 !== E &&
              null !== (t = E.basicInfo) &&
              void 0 !== t &&
              t.dob
                ? Be()(E.basicInfo.dob).format("YYYY/MM/DD")
                : null,
            gender:
              (null === E || void 0 === E ? void 0 : E.basicInfo.gender) || "",
            bloodGroup:
              (null === E || void 0 === E ? void 0 : E.basicInfo.bloodGroup) ||
              "",
            cicn:
              (null === E || void 0 === E ? void 0 : E.basicInfo.cicn) || "",
            religion:
              (null === E || void 0 === E ? void 0 : E.basicInfo.religion) ||
              "",
            caste:
              (null === E || void 0 === E ? void 0 : E.basicInfo.caste) || "",
            rte:
              (null === E || void 0 === E ? void 0 : E.basicInfo.rte) || "no",
            aadharNo:
              (null === E || void 0 === E ? void 0 : E.basicInfo.aadharNo) ||
              "",
            satNo:
              (null === E || void 0 === E ? void 0 : E.basicInfo.satNo) || "",
            grNo:
              (null === E || void 0 === E ? void 0 : E.basicInfo.grNo) || "",
            birthPlace:
              (null === E || void 0 === E ? void 0 : E.basicInfo.birthPlace) ||
              "",
            class:
              (null === E ||
              void 0 === E ||
              null === (a = E.academicInfo) ||
              void 0 === a ||
              null === (n = a.class) ||
              void 0 === n
                ? void 0
                : n._id) || "",
            section:
              (null === E ||
              void 0 === E ||
              null === (i = E.academicInfo) ||
              void 0 === i ||
              null === (o = i.section) ||
              void 0 === o
                ? void 0
                : o._id) || "",
            rollNumber:
              (null === E ||
              void 0 === E ||
              null === (r = E.academicInfo) ||
              void 0 === r
                ? void 0
                : r.rollNumber) || "",
            admissionNumber:
              (null === E ||
              void 0 === E ||
              null === (d = E.academicInfo) ||
              void 0 === d
                ? void 0
                : d.admissionNumber) || "",
            contactNumber:
              (null === E || void 0 === E ? void 0 : E.contactNumber) || "",
            guardianName:
              (null === E ||
              void 0 === E ||
              null === (c = E.contactInfo) ||
              void 0 === c
                ? void 0
                : c.guardianName) || "",
            guardianContactNumber:
              (null === E ||
              void 0 === E ||
              null === (m = E.contactInfo) ||
              void 0 === m
                ? void 0
                : m.guardianContactNumber) || "",
            guardianContactNumberSecondary:
              (null === E ||
              void 0 === E ||
              null === (x = E.contactInfo) ||
              void 0 === x
                ? void 0
                : x.guardianContactNumberSecondary) || "",
            guardianRelation:
              (null === E ||
              void 0 === E ||
              null === (h = E.contactInfo) ||
              void 0 === h
                ? void 0
                : h.guardianRelation) || "",
            nationId:
              (null === E ||
              void 0 === E ||
              null === (p = E.contactInfo) ||
              void 0 === p
                ? void 0
                : p.nationId) || "",
            presentAddress:
              (null === E ||
              void 0 === E ||
              null === (j = E.contactInfo) ||
              void 0 === j
                ? void 0
                : j.presentAddress) || "",
            permanentAddress:
              (null === E ||
              void 0 === E ||
              null === (g = E.contactInfo) ||
              void 0 === g
                ? void 0
                : g.permanentAddress) || "",
            prevSchName:
              (null === E ||
              void 0 === E ||
              null === (A = E.prevSchInfo) ||
              void 0 === A
                ? void 0
                : A.name) || "",
            tcNo:
              (null === E ||
              void 0 === E ||
              null === (y = E.prevSchInfo) ||
              void 0 === y
                ? void 0
                : y.tcNo) || "",
            prevClass:
              (null === E ||
              void 0 === E ||
              null === (f = E.prevSchInfo) ||
              void 0 === f
                ? void 0
                : f.prevClass) || "",
            email:
              (null === E ||
              void 0 === E ||
              null === (v = E.otherInfo) ||
              void 0 === v
                ? void 0
                : v.email) || "",
            healthCondition:
              (null === E ||
              void 0 === E ||
              null === (S = E.otherInfo) ||
              void 0 === S
                ? void 0
                : S.healthCondition) || "",
            transportMember:
              (null === E ||
              void 0 === E ||
              null === (k = E.otherInfo) ||
              void 0 === k
                ? void 0
                : k.transportMember) || !1,
            hostelMember:
              (null === E ||
              void 0 === E ||
              null === (C = E.otherInfo) ||
              void 0 === C
                ? void 0
                : C.hostelMember) || !1,
            libraryMember:
              (null === E ||
              void 0 === E ||
              null === (D = E.otherInfo) ||
              void 0 === D
                ? void 0
                : D.libraryMember) || !1,
            busStop:
              (null === E ||
              void 0 === E ||
              null === (w = E.otherInfo) ||
              void 0 === w
                ? void 0
                : w.busStop) || "",
            extraInfo:
              (null === E ||
              void 0 === E ||
              null === (I = E.otherInfo) ||
              void 0 === I
                ? void 0
                : I.extraInfo) || "",
            active: (null === E || void 0 === E ? void 0 : E.active) || !0,
            fatherName:
              (null === E || void 0 === E ? void 0 : E.fatherInfo.name) || "",
            fatherPhone:
              (null === E || void 0 === E
                ? void 0
                : E.fatherInfo.contactNumber) || "",
            fatherEdu:
              (null === E || void 0 === E ? void 0 : E.fatherInfo.education) ||
              "",
            fatherProfession:
              (null === E || void 0 === E ? void 0 : E.fatherInfo.profession) ||
              "",
            fatherDesignation:
              (null === E || void 0 === E
                ? void 0
                : E.fatherInfo.designation) || "",
            motherName:
              (null === E || void 0 === E ? void 0 : E.motherInfo.name) || "",
            motherPhone:
              (null === E || void 0 === E
                ? void 0
                : E.motherInfo.contactNumber) || "",
            motherEdu:
              (null === E || void 0 === E ? void 0 : E.motherInfo.education) ||
              "",
            motherProfession:
              (null === E || void 0 === E ? void 0 : E.motherInfo.profession) ||
              "",
            motherDesignation:
              (null === E || void 0 === E
                ? void 0
                : E.motherInfo.designation) || "",
          },
          onSubmit: async (e) => {
            try {
              const t = {
                  basicInfo: {
                    name: e.name,
                    admissionDate: Be()(e.admissionDate).format("YYYY/MM/DD"),
                    dob: Be()(e.dob).format("YYYY/MM/DD"),
                    gender: e.gender,
                    bloodGroup: e.bloodGroup,
                    religion: e.religion,
                    rte: e.rte,
                    caste: e.caste,
                    motherTongue: e.motherTongue,
                    birthPlace: e.birthPlace,
                    aadharNo: e.aadharNo,
                    cicn: e.cicn,
                    satNo: e.satNo,
                    grNo: e.grNo,
                  },
                  motherInfo: {
                    name: e.motherName,
                    contactNumber: e.motherPhone,
                    education: e.motherEdu,
                    profession: e.motherProfession,
                    designation: e.motherDesignation,
                  },
                  fatherInfo: {
                    name: e.fatherName,
                    contactNumber: e.fatherPhone,
                    education: e.fatherEdu,
                    profession: e.fatherProfession,
                    designation: e.fatherDesignation,
                  },
                  academicInfo: {
                    class: e.class,
                    section: e.section,
                    rollNumber: e.rollNumber,
                    admissionNumber: e.admissionNumber,
                  },
                  otherInfo: {
                    email: e.email,
                    healthCondition: e.healthCondition,
                    hostelMember: e.hostelMember,
                    transportMember: e.transportMember,
                    libraryMember: e.libraryMember,
                    busStop: e.busStop,
                    extraInfo: e.extraInfo,
                  },
                  contactInfo: {
                    guardianName: e.guardianName,
                    guardianContactNumber: e.guardianContactNumber,
                    guardianContactNumberSecondary:
                      e.guardianContactNumberSecondary,
                    guardianRelation: e.guardianRelation,
                    nationId: e.nationId,
                    presentAddress: e.presentAddress,
                    permanentAddress: e.permanentAddress,
                  },
                  prevSchInfo: {
                    name: e.prevSchName,
                    tcNo: e.tcNo,
                    prevClass: e.prevClass,
                  },
                  academicYear: e.academicYear,
                  schoolId: F._id,
                  contactNumber: e.contactNumber,
                  active: e.active,
                },
                a = new FormData();
              if (
                (a.append("body", JSON.stringify(t)),
                R.forEach((e) => a.append("studentPhoto", e)),
                B.forEach((e) => a.append("fatherPhoto", e)),
                J.forEach((e) => a.append("motherPhoto", e)),
                L.forEach((e) => a.append("transferCertificate", e)),
                W(!0),
                E)
              ) {
                const { data: e } = await (0, Se.yJ)(
                  ke.r.student.update + "/" + E._id,
                  a,
                  { headers: { "Content-Type": "multipart/form-data" } }
                );
                z("/sch/student/admit-student");
              } else {
                const { data: e } = await (0, Se.bE)(ke.r.student.create, a, {
                  headers: { "Content-Type": "multipart/form-data" },
                });
                z("/sch/student/admit-student");
              }
            } catch (t) {
              console.log(t);
            }
            W(!1);
          },
          enableReinitialize: !0,
        });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              G(
                e.result.map((e) => ({
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              );
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: F._id },
                });
                Q(e.result.map((e) => ({ label: e.name, value: e._id })));
              } catch (e) {
                console.log(e);
              }
            })();
        }, []),
          (0, l.useEffect)(() => {
            ae.values.class &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: F._id,
                      search: { class: ae.values.class },
                    },
                  });
                  $(e.result.map((e) => ({ label: e.name, value: e._id })));
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [ae.values.class, F]);
        const le = (e, t) => {
            const { files: a } = e.target;
            let l = [];
            if (a.length > 0) {
              for (let e = 0; e < a.length; e++) {
                const t = a[e];
                l.push(t);
              }
              "fatherPhoto" === t
                ? O(l)
                : "motherPhoto" === t
                ? V(l)
                : "transferCertificate" === t
                ? U(l)
                : P(l);
            } else console.log("No files selected");
          },
          ne = (e, t) => {
            P(R.filter((t) => t.name != e)),
              O(B.filter((t) => t.name != e)),
              V(J.filter((t) => t.name != e)),
              U(L.filter((t) => t.name != e));
          };
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Admit Student" }),
            (0, re.jsxs)("form", {
              onSubmit: ae.handleSubmit,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    children: [
                      (0, re.jsxs)(xe.Ay, {
                        xs: 12,
                        md: 12,
                        lg: 12,
                        item: !0,
                        children: [
                          (0, re.jsxs)(u.A, {
                            component: "span",
                            color: "red",
                            fontWeight: "bold",
                            sx: { display: "inline" },
                            children: ["Note:", " "],
                          }),
                          (0, re.jsx)(u.A, {
                            variant: "h6",
                            component: "span",
                            fontWeight: "bold",
                            sx: { display: "inline" },
                            children: "Student will be admited to session",
                          }),
                        ],
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "academicYear",
                          formik: ae,
                          label: "Select Academic Year",
                          options: H,
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsxs)(sm, {
                  children: [
                    (0, re.jsx)(om, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Basic Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "name",
                              formik: ae,
                              label: "Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "admissionNumber",
                              formik: ae,
                              label: "Admission No.",
                              disabled:
                                "manual" !==
                                (null === F || void 0 === F
                                  ? void 0
                                  : F.admissionNo),
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              required: !0,
                              name: "admissionDate",
                              formik: ae,
                              label: "Admission Date",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(qt.A, {
                              required: !0,
                              name: "dob",
                              formik: ae,
                              label: "Date Of Birth",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "gender",
                              formik: ae,
                              label: "Select Gender",
                              options: dm,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "bloodGroup",
                              formik: ae,
                              label: "Select Blood Group",
                              options: cm,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "religion",
                              formik: ae,
                              label: "Religion",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "rte",
                              formik: ae,
                              label: "Select RTE",
                              options: um,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "caste",
                              formik: ae,
                              label: "Cast",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "cicn",
                              formik: ae,
                              label: "Cast Income Certificate No.",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "motherTongue",
                              formik: ae,
                              label: "Mother Tongue",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "birthPlace",
                              formik: ae,
                              label: "Birth Place",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "aadharNo",
                              formik: ae,
                              label: "Aadhar No.",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "satNo",
                              formik: ae,
                              label: "SAT No.",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "grNo",
                              formik: ae,
                              label: "GR No.",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(sm, {
                  children: [
                    (0, re.jsx)(om, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Contact Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "contactNumber",
                              formik: ae,
                              label: "Contact Number",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "guardianName",
                              formik: ae,
                              label: "Guardian Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "guardianContactNumber",
                              formik: ae,
                              label: "Guardian Number",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "guardianContactNumberSecondary",
                              formik: ae,
                              label: "Alternate Number",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "guardianRelation",
                              formik: ae,
                              label: "Select Relation With Guardian",
                              options: mm,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "nationId",
                              formik: ae,
                              label: "Select National Id",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "presentAddress",
                              formik: ae,
                              label: "Present Address",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "permanentAddress",
                              formik: ae,
                              label: "Permanent Address",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(sm, {
                  children: [
                    (0, re.jsx)(om, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Academic Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "class",
                              formik: ae,
                              label: "Select Class",
                              options: K,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              required: !0,
                              name: "section",
                              formik: ae,
                              label: "Select Section",
                              options: Z,
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "rollNumber",
                              formik: ae,
                              label: "Roll No",
                              disabled:
                                "manual" !==
                                (null === F || void 0 === F
                                  ? void 0
                                  : F.rollNumberType),
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(sm, {
                  children: [
                    (0, re.jsx)(om, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Previous School Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "prevSchName",
                              formik: ae,
                              label: "Previous School",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "prevClass",
                              formik: ae,
                              label: "Previous Class",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "tcNo",
                              formik: ae,
                              label: "TC No.",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Ol.A, {
                              multi: !1,
                              name: "transferCertificate",
                              label: "Select File",
                              onChange: (e) => le(e, "transferCertificate"),
                              previousFile:
                                null === E ||
                                void 0 === E ||
                                null === (N = E.prevSchInfo) ||
                                void 0 === N
                                  ? void 0
                                  : N.transferCertificate,
                              customOnChange: !0,
                              selectedFiles: L,
                              onRemove: (e) => ne(e),
                              accept: "image/*,.pdf",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(sm, {
                  children: [
                    (0, re.jsx)(om, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Father Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "fatherName",
                              formik: ae,
                              label: "Father Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              required: !0,
                              name: "fatherPhone",
                              formik: ae,
                              label: "Father Phone",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "fatherEdu",
                              formik: ae,
                              label: "Father Education.",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "fatherProfession",
                              formik: ae,
                              label: "Father Profession",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "fatherDesignation",
                              formik: ae,
                              label: "Father Designation",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Ol.A, {
                              name: "fatherPhoto",
                              multi: !1,
                              label: "Select Photo",
                              onChange: (e) => le(e, "fatherPhoto"),
                              previousFile:
                                null === E ||
                                void 0 === E ||
                                null === (T = E.fatherInfo) ||
                                void 0 === T
                                  ? void 0
                                  : T.photo,
                              customOnChange: !0,
                              selectedFiles: B,
                              onRemove: (e) => ne(e),
                              accept: "image/jpeg, image/png",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(sm, {
                  children: [
                    (0, re.jsx)(om, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Mother Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "motherName",
                              formik: ae,
                              label: "Mother Name",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "motherPhone",
                              formik: ae,
                              label: "Mother Phone",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "motherEdu",
                              formik: ae,
                              label: "Mother Education.",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "motherProfession",
                              formik: ae,
                              label: "Mother Profession",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "motherDesignation",
                              formik: ae,
                              label: "Mother Designation",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Ol.A, {
                              label: "Select Photo",
                              multi: !1,
                              name: "motherPhoto",
                              onChange: (e) => le(e, "motherPhoto"),
                              previousFile:
                                null === E ||
                                void 0 === E ||
                                null === (M = E.motherInfo) ||
                                void 0 === M
                                  ? void 0
                                  : M.photo,
                              customOnChange: !0,
                              selectedFiles: J,
                              onRemove: (e) => ne(e),
                              accept: "image/jpeg, image/png",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsxs)(sm, {
                  sx: { marginBottom: "60px" },
                  children: [
                    (0, re.jsx)(om, {
                      id: "modal-modal-title",
                      variant: "h6",
                      component: "h2",
                      children: "Other Information",
                    }),
                    (0, re.jsx)(s.A, {
                      sx: { padding: "10px" },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 2,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "email",
                              formik: ae,
                              label: "Email",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "healthCondition",
                              formik: ae,
                              label: "Health Condition",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "active",
                              formik: ae,
                              label: "Select Status",
                              options: [
                                { label: "Inactive", value: !1 },
                                { label: "Active", value: !0 },
                              ],
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "hostelMember",
                              formik: ae,
                              label: "Select Hostel Member",
                              options: [
                                { label: "Yes", value: !0 },
                                { label: "No", value: !1 },
                              ],
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "transportMember",
                              formik: ae,
                              label: "Select Transport Member",
                              options: [
                                { label: "Yes", value: !0 },
                                { label: "No", value: !1 },
                              ],
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Xe.A, {
                              name: "libraryMember",
                              formik: ae,
                              label: "Select Library Member",
                              options: [
                                { label: "Yes", value: !0 },
                                { label: "No", value: !1 },
                              ],
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "busStop",
                              formik: ae,
                              label: "Bus Stop",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(At.A, {
                              name: "extraInfo",
                              formik: ae,
                              label: "Other Info",
                            }),
                          }),
                          (0, re.jsx)(xe.Ay, {
                            xs: 12,
                            md: 6,
                            lg: 3,
                            item: !0,
                            children: (0, re.jsx)(Ol.A, {
                              name: "studentPhoto",
                              multi: !1,
                              label: "Select Photo",
                              onChange: (e) => le(e, "studentPhoto"),
                              previousFile:
                                null === E || void 0 === E ? void 0 : E.photo,
                              customOnChange: !0,
                              selectedFiles: R,
                              onRemove: (e) => ne(e),
                              accept: "image/jpeg, image/png",
                            }),
                          }),
                        ],
                      }),
                    }),
                  ],
                }),
                (0, re.jsx)(xe.Ay, {
                  container: !0,
                  children: (0, re.jsx)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    children: (0, re.jsx)(rm, {
                      children: (0, re.jsxs)(b.A, {
                        spacing: 2,
                        direction: "row",
                        children: [
                          (0, re.jsx)($e.A, {
                            size: "small",
                            color: "error",
                            variant: "contained",
                            onClick: () => z(-1),
                            children: "Cancel",
                          }),
                          (0, re.jsx)(ht.A, {
                            loading: Y,
                            type: "submit",
                            size: "small",
                            variant: "contained",
                            children: "Submit",
                          }),
                        ],
                      }),
                    }),
                  }),
                }),
              ],
            }),
          ],
        });
      }
      var hm = a(69413),
        pm = a(97062);
      const jm = (0, n.Ay)(s.A)((e) => {
        let { theme: t } = e;
        return {
          padding: "20px 8px",
          borderRadius: "10px",
          margin: "10px 0px",
          borderRight: "10px",
          border: "1px solid lightGrey",
          backgroundColor: "dark" === t.palette.mode ? "" : "whitesmoke",
        };
      });
      (0, n.Ay)(u.A)((e) => {
        let { theme: t } = e;
        return {
          textAlign: "start",
          fontSize: "14px",
          padding: "5px 10px",
          borderBottom: "1px solid",
          borderBottomColor: "lightgray",
          fontWeight: "bold",
          color: "white",
          background: t.palette.secondary.main,
        };
      });
      function gm() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          { id: t } = (0, _.g)(),
          [a, n] = (0, l.useState)([]),
          [i, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)(null),
          [u, x] = (0, l.useState)(!1),
          { isDarkMode: h } = (0, l.useContext)(st.A),
          p = (0, _.Zp)(),
          [j, g] = (0, l.useState)(
            (null === c || void 0 === c ? void 0 : c.benefits) || [
              { point: "" },
            ]
          ),
          [A, y] = (0, l.useState)(
            (null === c || void 0 === c ? void 0 : c.benefits) || [
              { point: "" },
            ]
          ),
          f = (0, et.Wx)({
            initialValues: {
              class: [],
              subject: "",
              title: "",
              description: "",
              isTrending: !1,
              overview: [],
              benefits: [],
            },
            onSubmit: async (t) => {
              try {
                const a = {
                    description: t.description,
                    classIds: t.class,
                    subject: t.subject,
                    title: t.title,
                    isTrending: t.isTrending,
                    courseDetails: { overview: j, benefits: A },
                  },
                  l = new FormData();
                if (
                  (l.append("bodyData", JSON.stringify(a)),
                  l.append("schoolId", e._id),
                  i.forEach((e) => l.append("file", e)),
                  c)
                ) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.course.update + "/" + c._id,
                    l,
                    { headers: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(ke.r.course.create, l, {
                    headers: { "Content-Type": "multipart/form-data" },
                  });
                  p("/sch/lms/courses");
                }
              } catch (a) {
                console.log(a);
              }
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: e._id },
              });
              n(t.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (t) {
              console.log(t);
            }
          })();
        }, [e]),
          (0, l.useEffect)(() => {
            f.values.class &&
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.subject.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: f.values.class },
                    },
                  });
                  d(t.result.map((e) => ({ label: e.name, value: e._id })));
                } catch (t) {
                  console.log(t);
                }
              })();
          }, [f.values.class, e]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Add Course" }),
            (0, re.jsxs)("form", {
              onSubmit: f.handleSubmit,
              children: [
                (0, re.jsx)(jm, {
                  children: (0, re.jsxs)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          multiple: !0,
                          required: !0,
                          name: "class",
                          formik: f,
                          label: "Select Class",
                          options: a,
                        }),
                      }),
                      f.values.class.length <= 1 &&
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "subject",
                            formik: f,
                            label: "Select Subject",
                            options: r,
                          }),
                        }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "title",
                          formik: f,
                          label: "Enter Course Name",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(Ol.A, {
                          multi: !1,
                          name: "thumbnailImage",
                          label: "Select Thumbnail Image",
                          onChange: (e) =>
                            ((e, t) => {
                              const { files: a } = e.target;
                              let l = [];
                              if (a.length > 0) {
                                for (let e = 0; e < a.length; e++) {
                                  const t = a[e];
                                  l.push(t);
                                }
                                o(l);
                              } else console.log("No files selected");
                            })(e),
                          previousFile:
                            null === c || void 0 === c
                              ? void 0
                              : c.thumbnailImage,
                          customOnChange: !0,
                          selectedFiles: i,
                          onRemove: (e) =>
                            ((e, t) => {
                              o(i.filter((t) => t.name != e));
                            })(e),
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(jm, {
                  children: (0, re.jsx)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "description",
                        formik: f,
                        label: "Enter  Description",
                      }),
                    }),
                  }),
                }),
                (0, re.jsx)(jm, {
                  children: (0, re.jsx)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: [
                        j.map((e, t) =>
                          (0, re.jsxs)(
                            s.A,
                            {
                              sx: {
                                display: "flex",
                                justifyContent: "space-between",
                                alignItems: "center",
                                gap: "5px",
                              },
                              children: [
                                (0, re.jsx)(pm.A, {
                                  fontSize: "small",
                                  sx: { color: "#1b3779", mt: 1 },
                                }),
                                (0, re.jsx)(Mt.A, {
                                  size: "small",
                                  placeholder: "Enter Overview",
                                  label: "Enter Overview",
                                  variant: "outlined",
                                  fullWidth: !0,
                                  sx: { mb: "5px", mt: 1 },
                                  value: e.point || "",
                                  InputLabelProps: { shrink: !0 },
                                  name: "overview",
                                  inputProps: { maxLength: 200 },
                                  onChange: (e) =>
                                    ((e, t) => {
                                      const { value: a } = e.target;
                                      let l = [...j].map((e, l) =>
                                        l === t ? { ...e, point: a } : { ...e }
                                      );
                                      g(l);
                                    })(e, t),
                                }),
                                (0, re.jsx)(S.A, {
                                  title: "Delete",
                                  children: (0, re.jsx)(Ya.A, {
                                    fontSize: "small",
                                    onClick: () =>
                                      ((e) => {
                                        const t = [...j];
                                        t.splice(e, 1), g(t);
                                      })(t),
                                    color: "error",
                                  }),
                                }),
                              ],
                            },
                            t
                          )
                        ),
                        (0, re.jsx)($e.A, {
                          variant: "contained",
                          size: "small",
                          sx: { mt: 1 },
                          onClick: () => {
                            g([...j, { point: "" }]);
                          },
                          children: (0, re.jsx)(ot.A, {}),
                        }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(jm, {
                  children: (0, re.jsx)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: [
                        A.map((e, t) =>
                          (0, re.jsxs)(
                            s.A,
                            {
                              sx: {
                                display: "flex",
                                justifyContent: "space-between",
                                alignItems: "center",
                                gap: "5px",
                              },
                              children: [
                                (0, re.jsx)(pm.A, {
                                  fontSize: "small",
                                  sx: { color: "#1b3779", mt: 1 },
                                }),
                                (0, re.jsx)(Mt.A, {
                                  size: "small",
                                  placeholder: "Enter What You Will Learn",
                                  label: "Enter What You Will Learn",
                                  variant: "outlined",
                                  sx: { mb: "5px", mt: 1 },
                                  InputLabelProps: { shrink: !0 },
                                  fullWidth: !0,
                                  name: "benefits",
                                  value: e.point || "",
                                  inputProps: { maxLength: 200 },
                                  onChange: (e) =>
                                    ((e, t) => {
                                      const { value: a } = e.target;
                                      let l = [...A].map((e, l) =>
                                        l === t ? { ...e, point: a } : { ...e }
                                      );
                                      y(l);
                                    })(e, t),
                                }),
                                (0, re.jsx)(S.A, {
                                  title: "Delete",
                                  children: (0, re.jsx)(Ya.A, {
                                    sx: { cursor: "pointer" },
                                    fontSize: "small",
                                    color: "error",
                                    onClick: () =>
                                      ((e) => {
                                        const t = [...A];
                                        t.splice(e, 1), y(t);
                                      })(t),
                                  }),
                                }),
                              ],
                            },
                            t
                          )
                        ),
                        (0, re.jsx)($e.A, {
                          variant: "contained",
                          size: "small",
                          sx: { mt: 1 },
                          onClick: () => {
                            y([...A, { point: "" }]);
                          },
                          children: (0, re.jsx)(ot.A, {}),
                        }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 12,
                  sx: { marginBottom: "60px" },
                  children: (0, re.jsx)(hm.A, {
                    children: (0, re.jsx)(Ea.A, {
                      control: (0, re.jsx)(da.A, {
                        checked: f.values.isTrending,
                      }),
                      name: "isTrending",
                      onChange: (e) => {
                        f.setFieldValue("isTrending", e.target.checked);
                      },
                      label: "This course is trending?",
                    }),
                  }),
                }),
                (0, re.jsx)(Gl, {
                  content: (0, re.jsxs)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    lg: 12,
                    sx: {
                      display: "flex",
                      justifyContent: "flex-end",
                      gap: "5px",
                    },
                    children: [
                      (0, re.jsx)($e.A, {
                        variant: "contained",
                        onClick: () => p(-1),
                        color: "error",
                        size: "small",
                        children: "Cancel",
                      }),
                      (0, re.jsx)($e.A, {
                        variant: "contained",
                        size: "small",
                        onClick: f.handleSubmit,
                        children: "Submit",
                      }),
                    ],
                  }),
                }),
              ],
            }),
          ],
        });
      }
      const Am = (0, n.Ay)(s.A)((e) => {
        let { theme: t } = e;
        return {
          padding: "20px 8px",
          borderRadius: "10px",
          margin: "10px 0px",
          borderRight: "10px",
          border: "1px solid lightGrey",
          backgroundColor: "whitesmoke",
        };
      });
      function ym() {
        var e, t, a;
        const { selectedSetting: n } = (0, l.useContext)(Ce.A),
          [i, o] = (0, l.useState)([]),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          u = (0, _.Zp)(),
          x = (0, _.zy)(),
          h = (x.state && x.state.courseData) || null;
        console.log(h, "mmmmmmmmm==============");
        const [p, j] = (0, l.useState)(
            (null === h ||
            void 0 === h ||
            null === (e = h.courseDetails) ||
            void 0 === e
              ? void 0
              : e.overview) || [{ point: "" }]
          ),
          [g, A] = (0, l.useState)(
            (null === h ||
            void 0 === h ||
            null === (t = h.courseDetails) ||
            void 0 === t
              ? void 0
              : t.benefits) || [{ point: "" }]
          ),
          y = (0, et.Wx)({
            initialValues: {
              class: h
                ? null === (a = h.class) || void 0 === a
                  ? void 0
                  : a.map((e) => e._id)
                : [],
              subject: "",
              title: h ? h.title : "",
              description: h ? h.description : "",
              isTrending:
                (null === h || void 0 === h ? void 0 : h.isTrending) || !1,
              overview:
                (null === h || void 0 === h
                  ? void 0
                  : h.courseDetails.overview) || [],
              benefits:
                (null === h || void 0 === h
                  ? void 0
                  : h.courseDetails.benefits) || [],
            },
            onSubmit: async (e) => {
              try {
                const t = {
                    description: e.description,
                    classIds: e.class,
                    subject: e.subject,
                    title: e.title,
                    isTrending: e.isTrending,
                    courseDetails: { overview: p, benefits: g },
                  },
                  a = new FormData();
                a.append("bodyData", JSON.stringify(t)),
                  a.append("schoolId", n._id),
                  r.forEach((e) => a.append("thumbnailImage", e));
                const { data: l } = await (0, Se.yJ)(
                  ke.r.course.update + "/" + h._id,
                  a,
                  { headers: { "Content-Type": "multipart/form-data" } }
                );
                u("/sch/lms/courses");
              } catch (t) {
                console.log(t);
              }
            },
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: n._id },
              });
              o(e.result.map((e) => ({ label: e.name, value: e._id })));
            } catch (e) {
              console.log(e);
            }
          })();
        }, [n]),
          (0, l.useEffect)(() => {
            y.values.class &&
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.subject.list, {
                    params: {
                      schoolId: n._id,
                      search: { class: y.values.class },
                    },
                  });
                  m(e.result.map((e) => ({ label: e.name, value: e._id })));
                } catch (e) {
                  console.log(e);
                }
              })();
          }, [y.values.class, n]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Add Course" }),
            (0, re.jsxs)("form", {
              onSubmit: y.handleSubmit,
              children: [
                (0, re.jsx)(Am, {
                  children: (0, re.jsxs)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          multiple: !0,
                          required: !0,
                          name: "class",
                          formik: y,
                          label: "Select Class",
                          options: i,
                        }),
                      }),
                      y.values.class.length <= 1 &&
                        (0, re.jsx)(xe.Ay, {
                          xs: 12,
                          md: 6,
                          lg: 4,
                          item: !0,
                          children: (0, re.jsx)(Xe.A, {
                            required: !0,
                            name: "subject",
                            formik: y,
                            label: "Select Subject",
                            options: c,
                          }),
                        }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 4,
                        item: !0,
                        children: (0, re.jsx)(At.A, {
                          required: !0,
                          name: "title",
                          formik: y,
                          label: "Enter Course Name",
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Ol.A, {
                          multi: !1,
                          name: "thumbnailImage",
                          label: "Select Thumbnail Image",
                          onChange: (e) =>
                            ((e, t) => {
                              const { files: a } = e.target;
                              let l = [];
                              if (a.length > 0) {
                                for (let e = 0; e < a.length; e++) {
                                  const t = a[e];
                                  l.push(t);
                                }
                                d(l);
                              } else console.log("No files selected");
                            })(e),
                          customOnChange: !0,
                          selectedFiles: r,
                          previousFile:
                            null === h || void 0 === h
                              ? void 0
                              : h.thumbnailImage,
                          onRemove: (e) =>
                            ((e, t) => {
                              d(r.filter((t) => t.name != e));
                            })(e),
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)("img", {
                          src:
                            null === h || void 0 === h
                              ? void 0
                              : h.thumbnailImage,
                          style: { maxHeight: "100px" },
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(Am, {
                  children: (0, re.jsx)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        required: !0,
                        name: "description",
                        formik: y,
                        label: "Enter  Description",
                      }),
                    }),
                  }),
                }),
                (0, re.jsx)(Am, {
                  children: (0, re.jsx)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: [
                        p.map((e, t) =>
                          (0, re.jsxs)(
                            s.A,
                            {
                              sx: {
                                display: "flex",
                                justifyContent: "space-between",
                                alignItems: "center",
                                gap: "5px",
                              },
                              children: [
                                (0, re.jsx)(pm.A, {
                                  fontSize: "small",
                                  sx: { color: "#1b3779", mt: 1 },
                                }),
                                (0, re.jsx)(Mt.A, {
                                  size: "small",
                                  placeholder: "Enter Overview",
                                  label: "Enter Overview",
                                  variant: "outlined",
                                  fullWidth: !0,
                                  sx: { mb: "5px", mt: 1 },
                                  value: e.point || "",
                                  InputLabelProps: { shrink: !0 },
                                  name: "overview",
                                  inputProps: { maxLength: 200 },
                                  onChange: (e) =>
                                    ((e, t) => {
                                      const { value: a } = e.target;
                                      let l = [...p].map((e, l) =>
                                        l === t ? { ...e, point: a } : { ...e }
                                      );
                                      j(l);
                                    })(e, t),
                                }),
                                (0, re.jsx)(S.A, {
                                  title: "Delete",
                                  children: (0, re.jsx)(Ya.A, {
                                    fontSize: "small",
                                    onClick: () =>
                                      ((e) => {
                                        const t = [...p];
                                        t.splice(e, 1), j(t);
                                      })(t),
                                    color: "error",
                                  }),
                                }),
                              ],
                            },
                            t
                          )
                        ),
                        (0, re.jsx)($e.A, {
                          variant: "contained",
                          size: "small",
                          sx: { mt: 1 },
                          onClick: () => {
                            j([...p, { point: "" }]);
                          },
                          children: (0, re.jsx)(ot.A, {}),
                        }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(Am, {
                  children: (0, re.jsx)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: (0, re.jsxs)(xe.Ay, {
                      xs: 12,
                      md: 12,
                      lg: 12,
                      item: !0,
                      children: [
                        g.map((e, t) =>
                          (0, re.jsxs)(
                            s.A,
                            {
                              sx: {
                                display: "flex",
                                justifyContent: "space-between",
                                alignItems: "center",
                                gap: "5px",
                              },
                              children: [
                                (0, re.jsx)(pm.A, {
                                  fontSize: "small",
                                  sx: { color: "#1b3779", mt: 1 },
                                }),
                                (0, re.jsx)(Mt.A, {
                                  size: "small",
                                  placeholder: "Enter What You Will Learn",
                                  label: "Enter What You Will Learn",
                                  variant: "outlined",
                                  sx: { mb: "5px", mt: 1 },
                                  InputLabelProps: { shrink: !0 },
                                  fullWidth: !0,
                                  name: "benefits",
                                  value: e.point || "",
                                  inputProps: { maxLength: 200 },
                                  onChange: (e) =>
                                    ((e, t) => {
                                      const { value: a } = e.target;
                                      let l = [...g].map((e, l) =>
                                        l === t ? { ...e, point: a } : { ...e }
                                      );
                                      A(l);
                                    })(e, t),
                                }),
                                (0, re.jsx)(S.A, {
                                  title: "Delete",
                                  children: (0, re.jsx)(Ya.A, {
                                    fontSize: "small",
                                    color: "error",
                                    onClick: () =>
                                      ((e) => {
                                        const t = [...g];
                                        t.splice(e, 1), A(t);
                                      })(t),
                                  }),
                                }),
                              ],
                            },
                            t
                          )
                        ),
                        (0, re.jsx)($e.A, {
                          variant: "contained",
                          size: "small",
                          sx: { mt: 1 },
                          onClick: () => {
                            A([...g, { point: "" }]);
                          },
                          children: (0, re.jsx)(ot.A, {}),
                        }),
                      ],
                    }),
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  sm: 12,
                  md: 12,
                  sx: { marginBottom: "60px" },
                  children: (0, re.jsx)(hm.A, {
                    children: (0, re.jsx)(Ea.A, {
                      control: (0, re.jsx)(da.A, {
                        checked: y.values.isTrending,
                      }),
                      name: "isTrending",
                      onChange: (e) => {
                        y.setFieldValue("isTrending", e.target.checked);
                      },
                      label: "This course is trending?",
                    }),
                  }),
                }),
                (0, re.jsx)(Gl, {
                  content: (0, re.jsxs)(xe.Ay, {
                    item: !0,
                    xs: 12,
                    md: 12,
                    lg: 12,
                    sx: {
                      display: "flex",
                      justifyContent: "flex-end",
                      gap: "5px",
                    },
                    children: [
                      (0, re.jsx)($e.A, {
                        variant: "contained",
                        onClick: () => u(-1),
                        color: "error",
                        size: "small",
                        children: "Cancel",
                      }),
                      (0, re.jsx)($e.A, {
                        variant: "contained",
                        size: "small",
                        onClick: y.handleSubmit,
                        children: "Submit",
                      }),
                    ],
                  }),
                }),
              ],
            }),
          ],
        });
      }
      var fm = a(20987),
        vm = a(19252);
      function bm(e) {
        let { message: t = "Loading... Please wait!" } = e;
        return (0, re.jsx)(s.A, {
          sx: {
            display: "flex",
            height: "90vh",
            width: "100%",
            justifyContent: "center",
            alignItems: "center",
          },
          children: (0, re.jsx)(u.A, {
            sx: { fontWeight: "bold", fontSize: "14px" },
            children: t,
          }),
        });
      }
      const Sm = (0, n.Ay)(vm.A)((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            height: "90vh",
            justifyContent: "center",
            alignItems: "center",
            borderRadius: t.shape.borderRadius,
            overflow: "hidden",
            width: "100%",
            marginTop: "10px",
          };
        }),
        km = (0, n.Ay)(s.A)(() => ({
          display: "flex",
          flex: 1,
          width: "100%",
          height: "100%",
        })),
        Cm = ["OneONoneCall", "GroupCall", "LiveStreaming"],
        Dm = {
          OneONoneCall: {
            appId: 914808192,
            serverSecret: "6f4bc5c4a35f3979a591bf2c534f335a",
          },
          GroupCall: {
            appId: 914808192,
            serverSecret: "6f4bc5c4a35f3979a591bf2c534f335a",
          },
          LiveStreaming: {
            appId: 206971782,
            serverSecret: "212d4d9408c30ced21273b86754371f2",
          },
        };
      function wm() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          { roomID: t } = (0, _.g)();
        console.log(t, "rooooooommmmmmmmmmmid");
        const a = (0, _.Zp)(),
          n = (0, _.zy)(),
          [i, s] = l.useState(!1),
          [o, r] = l.useState(""),
          [d, c] = l.useState(!1),
          [m, u] = l.useState(null),
          { state: x } = n;
        console.log(x, "ssssssssssssssssssssssssssssssssssssssssssssssssss");
        l.useEffect(() => {
          (async () => {
            try {
              const { data: a } = await (0, Se.Jt)(ke.r.meeting.join, {
                params: { schoolId: e._id, roomID: t },
              });
            } catch (o) {
              r("Invalid meeting link!"), c(!0);
            }
            s(!0);
          })();
        }, [e, t]);
        l.useEffect(
          () => () => {
            if (m)
              try {
                m.destroy();
              } catch (o) {
                console.log(o, "error while stopping zegocloud");
              }
          },
          [m]
        );
        const h = () => {
          a("/live", { replace: !0 });
        };
        return i
          ? (0, re.jsxs)(re.Fragment, {
              children: [
                (0, re.jsx)(Sm, {
                  maxWidth: "xl",
                  children: (0, re.jsx)(km, {
                    component: "div",
                    ref: async (e) => {
                      var a, l;
                      let n = x ? x.meetingType : Cm[0];
                      const i =
                          null === (a = Dm[n]) || void 0 === a
                            ? void 0
                            : a.appId,
                        s =
                          null === (l = Dm[n]) || void 0 === l
                            ? void 0
                            : l.serverSecret;
                      console.log(
                        i,
                        s,
                        "=============================================="
                      );
                      let r = window.localStorage.getItem(
                        process.env.REACT_APP_CURRENT_USER
                      );
                      console.log(r);
                      let d = JSON.parse(r);
                      console.log(d);
                      const c = fm.ZegoUIKitPrebuilt.generateKitTokenForTest(
                        i,
                        s,
                        t,
                        d._id,
                        d.basicInfo.name
                      );
                      try {
                        const t = fm.ZegoUIKitPrebuilt.create(c);
                        t.joinRoom({
                          container: e,
                          autoHideFooter: !0,
                          layout: "Auto",
                          enableUserSearch: !0,
                          showMyMicrophoneToggleButton: !0,
                          showRoomTimer: !0,
                          showRemoveUserButton: !0,
                          scenario: {
                            config: { role: fm.ZegoUIKitPrebuilt.Host },
                            mode: fm.ZegoUIKitPrebuilt[n],
                          },
                        }),
                          u(t);
                      } catch (o) {
                        fm.ZegoUIKitPrebuilt.ConsoleError(),
                          console.log(o, "Error while joining room");
                      }
                    },
                  }),
                }),
                (0, re.jsxs)(ct.A, {
                  open: d,
                  onClose: h,
                  "aria-labelledby": "alert-live-session-error",
                  "aria-describedby":
                    "alert-live-session-error-dialog-description",
                  children: [
                    (0, re.jsx)(mt.A, {
                      id: "alert-live-session-error",
                      children: o,
                    }),
                    (0, re.jsx)(ut.A, {
                      children: (0, re.jsx)(di.A, {
                        id: "alert-live-session-error-dialog-description",
                        children:
                          "The link you are trying to access either expired || does not exist || you are not permitted to see the link",
                      }),
                    }),
                    (0, re.jsx)(xt.A, {
                      children: (0, re.jsx)($e.A, {
                        size: "small",
                        onClick: h,
                        autoFocus: !0,
                        children: "Ok",
                      }),
                    }),
                  ],
                }),
              ],
            })
          : (0, re.jsx)(bm, {
              message: "Getting room details..., Please wait!",
            });
      }
      var Im = a(36930),
        Nm = a(29760),
        _m = a(12900),
        Tm = a(95622),
        Mm = a(17564),
        Fm = a(1130),
        zm = a(34109),
        Em = a(26581);
      const qm = (0, re.jsx)(zm.A, { fontSize: "small" }),
        Ym = (0, re.jsx)(Em.A, { fontSize: "small" }),
        Wm = { PaperProps: { style: { maxHeight: 224, width: 250 } } },
        Rm = (0, n.Ay)(Im.A)((e) => {
          let { theme: t } = e;
          return {
            height: 25,
            borderRadius: 15,
            ["&.".concat(Nm.A.colorPrimary)]: {
              backgroundColor: t.palette.grey[(t.palette.mode, 800)],
            },
            ["& .".concat(Nm.A.bar)]: {
              borderRadius: 15,
              backgroundColor:
                "light" === t.palette.mode ? "#f42323" : "#308fe8",
            },
          };
        }),
        Pm = (0, n.Ay)(_m.Ay)((e) => {
          let { theme: t } = e;
          return {
            padding: 10,
            width: "100%",
            borderBottom: "1px solid ".concat(
              "light" === t.palette.mode ? "#eaecef" : "#30363d"
            ),
            "& input": {
              borderRadius: 4,
              backgroundColor: "light" === t.palette.mode ? "#fff" : "#0d1117",
              padding: 8,
              transition: t.transitions.create(["border-color", "box-shadow"]),
              border: "1px solid ".concat(
                "light" === t.palette.mode ? "#eaecef" : "#30363d"
              ),
              fontSize: 14,
              "&:focus": {
                boxShadow: "0px 0px 0px 3px ".concat(
                  "light" === t.palette.mode
                    ? "rgba(3, 102, 214, 0.3)"
                    : "rgb(12, 45, 107)"
                ),
                borderColor: "light" === t.palette.mode ? "#0366d6" : "#388bfd",
              },
            },
          };
        }),
        Jm = () => {
          const { selectedSetting: e } = (0, l.useContext)(Ce.A),
            { state: t } = (0, _.zy)(),
            [a, n] = (0, l.useState)(!1),
            [i, o] = (0, l.useState)([]),
            [r, d] = (0, l.useState)(""),
            [c, m] = (0, l.useState)([]),
            [x, h] = (0, l.useState)({
              sms: t
                ? t.message
                : "Dear {{VAR}}, We would like to inform you {{VAR1}},{{VAR2}},{{VAR3}},{{VAR4}},{{VAR5}} Regards Webspruce.",
            }),
            [p, j] = (0, l.useState)([]),
            [g, A] = (0, l.useState)([]),
            [y, f] = (0, l.useState)([]),
            [b, S] = (0, l.useState)(!1),
            [k, C] = (0, l.useState)(!1),
            [w, N] = (0, l.useState)(!1),
            [T, M] = (0, l.useState)([]),
            [F, z] = (0, l.useState)(!1),
            [E, q] = (0, l.useState)(""),
            [Y, W] = (0, l.useState)(""),
            [R, P] = (0, l.useState)(""),
            [J, V] = (0, l.useState)(0),
            [B, O] = (0, l.useState)(""),
            [L, U] = (0, l.useState)([]),
            [H, G] = (0, l.useState)([]),
            [K, Q] = (0, l.useState)([]),
            [Z, $] = (0, l.useState)([]),
            [X, ee] = (0, l.useState)(!1),
            [te, ae] = (0, l.useState)([]),
            [le, ne] = (0, l.useState)(0),
            [ie, se] = (0, l.useState)([]),
            [oe, de] = (0, l.useState)(50),
            [ue, he] = (0, l.useState)(0),
            [pe, je] = (0, l.useState)(50);
          (0, l.useEffect)(() => {
            G([]), W(""), P(""), Q([]);
          }, [L, e._id]),
            (0, l.useEffect)(() => {
              P(""), Q([]);
            }, [H, e._id]),
            (0, l.useEffect)(() => {
              (async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.role.list);
                  o(e.result);
                } catch (e) {
                  console.log(e);
                }
              })();
            }, []);
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                A(t.result);
              } catch (t) {
                console.log(t);
              }
            })();
          }, [e._id]);
          const ge = (e) => {
            const { name: t, value: a } = e.target;
            h({ ...x, [t]: a });
          };
          return (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Compose" }),
              (0, re.jsxs)("form", {
                onSubmit: async (e) => {
                  e.preventDefault(), n(!0);
                  try {
                    he(ue + 1),
                      je(oe - (ue + 1)),
                      Ba.oR.success("Message sent successfully"),
                      h({
                        sms: t
                          ? t.message
                          : "Dear {{VAR}}, We would like to inform you {{VAR1}},{{VAR2}},{{VAR3}},{{VAR4}},{{VAR5}} Regards Webspruce.",
                      }),
                      m([]),
                      q(""),
                      W(""),
                      P(""),
                      O([]),
                      d(""),
                      M([]),
                      Q([]),
                      ae([]),
                      J(0),
                      ne(0),
                      se([]),
                      n(!1);
                  } catch (a) {
                    n(!1), console.log(a);
                  }
                },
                children: [
                  (0, re.jsxs)(me.A, {
                    sx: { padding: "10px", mb: 1 },
                    children: [
                      (0, re.jsxs)(s.A, {
                        sx: {
                          paddingLeft: "1rem",
                          display: "flex",
                          gap: "8px",
                        },
                        children: [
                          (0, re.jsxs)(s.A, {
                            children: [
                              "Total SMS:",
                              " ",
                              (0, re.jsx)(u.A, {
                                component: "span",
                                fontWeight: "bold",
                                children: oe,
                              }),
                            ],
                          }),
                          (0, re.jsxs)(s.A, {
                            children: [
                              "Consumed SMS:",
                              " ",
                              (0, re.jsx)(u.A, {
                                component: "span",
                                fontWeight: "bold",
                                children: ue,
                              }),
                            ],
                          }),
                          (0, re.jsxs)(s.A, {
                            children: [
                              "Balance SMS:",
                              " ",
                              (0, re.jsx)(u.A, {
                                component: "span",
                                fontWeight: "bold",
                                children: pe,
                              }),
                            ],
                          }),
                        ],
                      }),
                      (0, re.jsx)(s.A, {
                        sx: { padding: "1rem" },
                        children: (0, re.jsx)(Rm, {
                          variant: "determinate",
                          value: (100 * (79875 - pe)) / 79875,
                        }),
                      }),
                    ],
                  }),
                  (0, re.jsx)(me.A, {
                    sx: { padding: "10px", mb: 1 },
                    children: (0, re.jsx)(s.A, {
                      sx: { flexFlow: 1 },
                      children: (0, re.jsxs)(xe.Ay, {
                        container: !0,
                        spacing: 1,
                        children: [
                          (0, re.jsx)(xe.Ay, {
                            item: !0,
                            xs: 12,
                            sm: 12,
                            md: 3,
                            lg: 3,
                            children: (0, re.jsxs)(Ta.A, {
                              size: "small",
                              fullWidth: !0,
                              children: [
                                (0, re.jsx)(Ma.A, {
                                  id: "demo-simple-select-filrlccled-label",
                                  children: "Receiver Type",
                                }),
                                (0, re.jsxs)(Fa.A, {
                                  label: "Receiver Type",
                                  labelId: "demo-simple-select-filled-label",
                                  id: "demo-simple-select-filled",
                                  name: "receiverType",
                                  value: r,
                                  onChange: (e) => d(e.target.value),
                                  children: [
                                    (0, re.jsx)(D.A, {
                                      value: "role",
                                      sx: { fontSize: 12, fontWeight: 500 },
                                      children: "Role",
                                    }),
                                    (0, re.jsx)(D.A, {
                                      value: "user",
                                      sx: { fontSize: 12, fontWeight: 500 },
                                      children: "User",
                                    }),
                                    (0, re.jsx)(D.A, {
                                      value: "students",
                                      sx: { fontSize: 12, fontWeight: 500 },
                                      children: "Students",
                                    }),
                                    (0, re.jsx)(D.A, {
                                      value: "All Students",
                                      sx: { fontSize: 12, fontWeight: 500 },
                                      children: "All Students",
                                    }),
                                    (0, re.jsx)(D.A, {
                                      value: "file",
                                      sx: { fontSize: 12, fontWeight: 500 },
                                      children: "File",
                                    }),
                                  ],
                                }),
                              ],
                            }),
                          }),
                          "file" === r &&
                            (0, re.jsxs)(re.Fragment, {
                              children: [
                                (0, re.jsx)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 3,
                                  lg: 1,
                                  sx: { alignSelf: "center", mt: "-15px" },
                                  children: (0, re.jsx)($e.A, {
                                    size: "small",
                                    variant: "contained",
                                    children: "Sample File",
                                  }),
                                }),
                                (0, re.jsx)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 4,
                                  lg: 3,
                                  sx: { alignSelf: "center", mt: "-15px" },
                                  children: (0, re.jsx)(Ol.A, {
                                    name: "file",
                                    onChange: (e) =>
                                      ((e, t) => {
                                        const { files: a } = e.target;
                                        let l = [];
                                        if (a.length > 0) {
                                          for (let e = 0; e < a.length; e++) {
                                            const t = a[e];
                                            l.push(t);
                                          }
                                          $(l);
                                        } else console.log("No files selected");
                                      })(e),
                                    customOnChange: !0,
                                    label: "Select File",
                                    selectedFiles: Z,
                                  }),
                                }),
                              ],
                            }),
                          "students" === r &&
                            (0, re.jsxs)(re.Fragment, {
                              children: [
                                (0, re.jsxs)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 3,
                                  lg: 3,
                                  children: [
                                    (0, re.jsx)(Mt.A, {
                                      value: E,
                                      fullWidth: !0,
                                      "aria-describedby": "classPopper",
                                      onFocus: (e) => {
                                        S(b ? null : e.currentTarget);
                                      },
                                      variant: "outlined",
                                      size: "small",
                                      label: "Class",
                                    }),
                                    (0, re.jsx)(Tm.A, {
                                      id: "classPopper",
                                      open: !!b,
                                      anchorEl: b,
                                      children: (0, re.jsx)(Ta.A, {
                                        variant: "outlined",
                                        size: "small",
                                        fullWidth: !0,
                                        children: (0, re.jsx)(Mm.A, {
                                          onBlur: () => S(null),
                                          open: !0,
                                          value: L,
                                          multiple: !0,
                                          onChange: async (t, a) => {
                                            const l = a.map((e) => e._id),
                                              n = a.map((e) => e.name);
                                            U(a), q(n.join(","));
                                            try {
                                              if (a.length) {
                                                const { data: t } = await (0,
                                                  Se.Jt)(ke.r.section.list, {
                                                    params: {
                                                      schoolId: e._id,
                                                      search: {
                                                        class: { $in: l },
                                                      },
                                                    },
                                                  }),
                                                  a = t.result.sort((e, t) =>
                                                    e.name.localeCompare(t.name)
                                                  );
                                                f(a);
                                                const n = H.filter((e) =>
                                                  l.includes(e.class._id)
                                                );
                                                G(n),
                                                  W(
                                                    n
                                                      .map((e) =>
                                                        ""
                                                          .concat(e.name, " (")
                                                          .concat(
                                                            e.class.name,
                                                            ")"
                                                          )
                                                      )
                                                      .join(", ")
                                                  );
                                                const i = n.map((e) => e._id);
                                                if (i.length) {
                                                  const { data: t } = await (0,
                                                  Se.Jt)(ke.r.student.list, {
                                                    params: {
                                                      schoolId: e._id,
                                                      search: {
                                                        "academicInfo.section":
                                                          i,
                                                      },
                                                    },
                                                  });
                                                  M(t.result);
                                                } else M([]);
                                              } else f([]), G([]), W(""), M([]);
                                            } catch (i) {
                                              console.log(i);
                                            }
                                          },
                                          isOptionEqualToValue: (e, t) =>
                                            e._id === t._id,
                                          options: g,
                                          disableCloseOnSelect: !0,
                                          getOptionLabel: (e) =>
                                            "".concat(e.name),
                                          renderOption: (e, t, a) => {
                                            let { selected: l } = a;
                                            return (0, re.jsxs)("li", {
                                              ...e,
                                              children: [
                                                (0, re.jsx)(da.A, {
                                                  icon: qm,
                                                  checkedIcon: Ym,
                                                  checked: l,
                                                }),
                                                "".concat(t.name),
                                              ],
                                            });
                                          },
                                          renderInput: (e) =>
                                            (0, re.jsx)(Pm, {
                                              ref: e.InputProps.ref,
                                              inputProps: e.inputProps,
                                              placeholder: "Class",
                                              autoFocus: !0,
                                            }),
                                        }),
                                      }),
                                    }),
                                  ],
                                }),
                                (0, re.jsxs)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 3,
                                  lg: 3,
                                  children: [
                                    (0, re.jsx)(Mt.A, {
                                      value: Y,
                                      "aria-describedby": "sectionPopper",
                                      fullWidth: !0,
                                      onFocus: (e) => {
                                        C(k ? null : e.currentTarget);
                                      },
                                      variant: "outlined",
                                      size: "small",
                                      label: "Section",
                                    }),
                                    (0, re.jsx)(Tm.A, {
                                      id: "sectionPopper",
                                      open: !!k,
                                      anchorEl: k,
                                      children: (0, re.jsx)(Ta.A, {
                                        variant: "outlined",
                                        size: "small",
                                        fullWidth: !0,
                                        children: (0, re.jsx)(Mm.A, {
                                          multiple: !0,
                                          onBlur: () => C(null),
                                          open: !0,
                                          value: H,
                                          onChange: async (t, a) => {
                                            const l = a.map((e) => e._id),
                                              n = a.map((e) => e.name),
                                              i = a.map((e) => e.class.name);
                                            G(a),
                                              W(
                                                n
                                                  .map((e, t) =>
                                                    ""
                                                      .concat(e, " (")
                                                      .concat(i[t], ")")
                                                  )
                                                  .join(", ")
                                              );
                                            try {
                                              if (a.length) {
                                                const { data: t } = await (0,
                                                Se.Jt)(ke.r.student.list, {
                                                  params: {
                                                    schoolId: e._id,
                                                    search: {
                                                      "academicInfo.section": l,
                                                    },
                                                  },
                                                });
                                                M(t.result);
                                              } else M([]);
                                            } catch (s) {
                                              console.log(s);
                                            }
                                          },
                                          isOptionEqualToValue: (e, t) =>
                                            e._id === t._id,
                                          id: "checkboxes-tags-demo",
                                          options: y.sort((e, t) =>
                                            e.class.name.localeCompare(
                                              t.class.name
                                            )
                                          ),
                                          disableCloseOnSelect: !0,
                                          getOptionLabel: (e) =>
                                            ""
                                              .concat(e.name, "(class:")
                                              .concat(e.class.name, ")"),
                                          renderOption: (e, t, a) => {
                                            let { selected: l } = a;
                                            return (0, re.jsxs)("li", {
                                              ...e,
                                              children: [
                                                (0, re.jsx)(da.A, {
                                                  icon: qm,
                                                  checkedIcon: Ym,
                                                  style: { marginRight: 8 },
                                                  checked: l,
                                                }),
                                                ""
                                                  .concat(t.name, "(class:")
                                                  .concat(t.class.name, ")"),
                                              ],
                                            });
                                          },
                                          renderInput: (e) =>
                                            (0, re.jsx)(Pm, {
                                              ref: e.InputProps.ref,
                                              inputProps: e.inputProps,
                                              placeholder: "Section",
                                              autoFocus: !0,
                                            }),
                                        }),
                                      }),
                                    }),
                                  ],
                                }),
                                (0, re.jsxs)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 3,
                                  lg: 3,
                                  children: [
                                    (0, re.jsx)(Mt.A, {
                                      value: R,
                                      "aria-describedby": "contactsPopper",
                                      fullWidth: !0,
                                      onFocus: (e) => {
                                        N(w ? null : e.currentTarget);
                                      },
                                      variant: "outlined",
                                      size: "small",
                                      label: "Students",
                                      InputProps: {
                                        endAdornment: (0, re.jsxs)(Ft.A, {
                                          position: "start",
                                          children: ["All Total-", J],
                                        }),
                                      },
                                    }),
                                    (0, re.jsx)(Tm.A, {
                                      id: "contactsPopper",
                                      open: !!w,
                                      anchorEl: w,
                                      children: (0, re.jsx)(Ta.A, {
                                        variant: "outlined",
                                        size: "small",
                                        fullWidth: !0,
                                        children: (0, re.jsx)(Mm.A, {
                                          multiple: !0,
                                          onBlur: () => N(null),
                                          open: !0,
                                          value: K,
                                          onChange: (e, t) => {
                                            if (t.some((e) => "all" === e._id))
                                              if (K.length === T.length)
                                                Q([]), j([]), V(0), P("");
                                              else {
                                                const e = T.map((e) => e._id);
                                                Q([...T]),
                                                  j(e),
                                                  V(T.length),
                                                  P("All");
                                              }
                                            else {
                                              const e = t.map(
                                                  (e) => e.basicInfo.name
                                                ),
                                                a = t.map((e) => e._id);
                                              j(a),
                                                V(t.length),
                                                P(e.join(", ")),
                                                Q(t);
                                            }
                                          },
                                          isOptionEqualToValue: (e, t) =>
                                            e._id === t._id,
                                          id: "checkboxes-tags-demo",
                                          options: [
                                            {
                                              _id: "all",
                                              basicInfo: {
                                                name: "All (".concat(
                                                  T.length,
                                                  ")"
                                                ),
                                              },
                                              contactNumber: "",
                                            },
                                            ...T,
                                          ],
                                          disableCloseOnSelect: !0,
                                          getOptionLabel: (e) =>
                                            "all" === e._id
                                              ? "All (".concat(T.length, ")")
                                              : ""
                                                  .concat(
                                                    e.basicInfo.name,
                                                    " ("
                                                  )
                                                  .concat(e.contactNumber, ")"),
                                          renderOption: (e, t, a) => {
                                            let { selected: l } = a;
                                            return (0, re.jsxs)("li", {
                                              ...e,
                                              children: [
                                                (0, re.jsx)(da.A, {
                                                  icon: qm,
                                                  checkedIcon: Ym,
                                                  style: { marginRight: 8 },
                                                  checked:
                                                    l ||
                                                    ("all" === t._id &&
                                                      K.length === T.length),
                                                }),
                                                "all" === t._id
                                                  ? "All (".concat(
                                                      T.length,
                                                      ")"
                                                    )
                                                  : ""
                                                      .concat(
                                                        t.basicInfo.name,
                                                        " ("
                                                      )
                                                      .concat(
                                                        t.contactNumber,
                                                        ")"
                                                      ),
                                              ],
                                            });
                                          },
                                          renderInput: (e) =>
                                            (0, re.jsx)(s.A, {
                                              sx: { ml: 5, width: "100%" },
                                              children: (0, re.jsx)(Pm, {
                                                ref: e.InputProps.ref,
                                                inputProps: e.inputProps,
                                                placeholder:
                                                  "Search student with name",
                                                autoFocus: !0,
                                              }),
                                            }),
                                        }),
                                      }),
                                    }),
                                  ],
                                }),
                              ],
                            }),
                          "role" === r &&
                            (0, re.jsx)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              md: 3,
                              lg: 3,
                              children: (0, re.jsxs)(Ta.A, {
                                size: "small",
                                fullWidth: !0,
                                children: [
                                  (0, re.jsx)(Ma.A, {
                                    sx: { fontSize: 12 },
                                    children: "Role",
                                  }),
                                  (0, re.jsx)(Fa.A, {
                                    label: "Role",
                                    labelId: "demo-simple-select-filled-label",
                                    id: "demo-simple-select-filled",
                                    value: c,
                                    onChange: (e) => {
                                      const {
                                        target: { value: t },
                                      } = e;
                                      m(
                                        "string" === typeof t ? t.split(",") : t
                                      );
                                    },
                                    multiple: !0,
                                    renderValue: (e) => e.join(", "),
                                    MenuProps: Wm,
                                    children:
                                      i &&
                                      i.map((e, t) =>
                                        (0, re.jsxs)(
                                          D.A,
                                          {
                                            value: e.name,
                                            sx: { fontSize: 12 },
                                            children: [
                                              (0, re.jsx)(da.A, {
                                                checked: c.indexOf(e.name) > -1,
                                              }),
                                              (0, re.jsx)(v.A, {
                                                primary: e.name,
                                              }),
                                            ],
                                          },
                                          e._id
                                        )
                                      ),
                                  }),
                                ],
                              }),
                            }),
                          "user" === r &&
                            (0, re.jsxs)(re.Fragment, {
                              children: [
                                (0, re.jsx)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 3,
                                  lg: 3,
                                  children: (0, re.jsxs)(Ta.A, {
                                    size: "small",
                                    fullWidth: !0,
                                    children: [
                                      (0, re.jsx)(Ma.A, {
                                        sx: { fontSize: 12 },
                                        children: "Role",
                                      }),
                                      (0, re.jsx)(Fa.A, {
                                        labelId:
                                          "demo-simple-select-filled-label",
                                        id: "demo-simple-select-filled",
                                        name: "role",
                                        sx: { marginBottom: "15px" },
                                        label: "Role",
                                        size: "small",
                                        onChange: async (t) => {
                                          ge(t);
                                          const a = t.target.value;
                                          try {
                                            const { data: t } = await (0,
                                            Se.Jt)(ke.r.employee.list, {
                                              params: {
                                                schoolId: e._id,
                                                search: { role: { $in: a } },
                                              },
                                            });
                                            ae(t.result);
                                          } catch (l) {}
                                        },
                                        value: x.role,
                                        children:
                                          i &&
                                          i
                                            .filter((e) => {
                                              var t;
                                              return (
                                                "student" !==
                                                (null === (t = e.name) ||
                                                void 0 === t
                                                  ? void 0
                                                  : t.toLowerCase())
                                              );
                                            })
                                            .map((e, t) =>
                                              (0, re.jsx)(
                                                D.A,
                                                {
                                                  value: e._id,
                                                  sx: {
                                                    fontSize: 12,
                                                    fontWeight: 500,
                                                  },
                                                  children: e.name,
                                                },
                                                e._id
                                              )
                                            ),
                                      }),
                                    ],
                                  }),
                                }),
                                (0, re.jsxs)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 3,
                                  lg: 3,
                                  children: [
                                    (0, re.jsx)(Mt.A, {
                                      fullWidth: !0,
                                      value: B,
                                      "aria-describedby": "employeePopper",
                                      onFocus: (e) => {
                                        ee(X ? null : e.currentTarget);
                                      },
                                      variant: "outlined",
                                      size: "small",
                                      label: "Employees",
                                      InputProps: {
                                        endAdornment: (0, re.jsxs)(Ft.A, {
                                          position: "end",
                                          children: ["All Total- ", le],
                                        }),
                                      },
                                    }),
                                    (0, re.jsx)(Tm.A, {
                                      id: "employeePopper",
                                      open: !!X,
                                      anchorEl: X,
                                      children: (0, re.jsx)(Ta.A, {
                                        variant: "outlined",
                                        fullWidth: !0,
                                        size: "small",
                                        children: (0, re.jsx)(Mm.A, {
                                          onBlur: () => ee(null),
                                          open: !0,
                                          value: ie,
                                          multiple: !0,
                                          onChange: (e, t) => {
                                            if (t.some((e) => "all" === e._id))
                                              ie.length === te.length
                                                ? (se([]), ne(0), O(""))
                                                : (se([...te]),
                                                  ne(te.length),
                                                  O("All"));
                                            else {
                                              const e = t.map(
                                                (e) => e.basicInfo.name
                                              );
                                              t.map((e) => e._id);
                                              se(t),
                                                ne(t.length),
                                                O(e.join(", "));
                                            }
                                          },
                                          isOptionEqualToValue: (e, t) =>
                                            e._id === t._id,
                                          options: [
                                            {
                                              _id: "all",
                                              basicInfo: { name: "All" },
                                            },
                                            ...te,
                                          ],
                                          disableCloseOnSelect: !0,
                                          getOptionLabel: (e) =>
                                            ""
                                              .concat(
                                                null === e || void 0 === e
                                                  ? void 0
                                                  : e.basicInfo.name,
                                                " ("
                                              )
                                              .concat(
                                                null === e || void 0 === e
                                                  ? void 0
                                                  : e.contactNumber,
                                                ")"
                                              ),
                                          renderOption: (e, t, a) => {
                                            let { selected: l } = a;
                                            return (0, re.jsxs)("li", {
                                              ...e,
                                              children: [
                                                (0, re.jsx)(da.A, {
                                                  icon: qm,
                                                  checkedIcon: Ym,
                                                  checked:
                                                    l ||
                                                    ("all" === t._id &&
                                                      ie.length === te.length),
                                                }),
                                                "all" === t._id
                                                  ? "All (".concat(
                                                      te.length,
                                                      ")"
                                                    )
                                                  : ""
                                                      .concat(
                                                        null === t ||
                                                          void 0 === t
                                                          ? void 0
                                                          : t.basicInfo.name,
                                                        " ("
                                                      )
                                                      .concat(
                                                        null === t ||
                                                          void 0 === t
                                                          ? void 0
                                                          : t.contactNumber,
                                                        ")"
                                                      ),
                                              ],
                                            });
                                          },
                                          renderInput: (e) =>
                                            (0, re.jsx)(s.A, {
                                              sx: { ml: 5, width: "100%" },
                                              children: (0, re.jsx)(Pm, {
                                                ref: e.InputProps.ref,
                                                inputProps: e.inputProps,
                                                placeholder: "Employees",
                                                autoFocus: !0,
                                              }),
                                            }),
                                        }),
                                      }),
                                    }),
                                  ],
                                }),
                              ],
                            }),
                        ],
                      }),
                    }),
                  }),
                  (0, re.jsx)(me.A, {
                    sx: { padding: "10px", mb: 1 },
                    children: (0, re.jsxs)(xe.Ay, {
                      container: !0,
                      spacing: 1,
                      children: [
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 6,
                          lg: 4,
                          children: (0, re.jsxs)(Ta.A, {
                            required: !0,
                            size: "small",
                            fullWidth: !0,
                            children: [
                              (0, re.jsx)(Ma.A, {
                                sx: { fontSize: 12 },
                                children: "SMS Type",
                              }),
                              (0, re.jsxs)(Fa.A, {
                                label: "SMS Type",
                                id: "demo-simple-select-filled",
                                name: "smsType",
                                value: x.smsType || "",
                                onChange: ge,
                                children: [
                                  (0, re.jsx)(D.A, {
                                    value: "general",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "General",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "attendance",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Attendence",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "fee",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Fee",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "credential",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Credential",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "exam",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Exam",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "leave",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Leave",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "library",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Library",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "transport",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Transport",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "hostel",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Hostel",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "preaddmission",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Preaddmission",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "parentMeeting",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Parent Meeting",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "schoolTiming",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "School Timing",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "notice",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Notice",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "schoolOpen",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "School Open",
                                  }),
                                  (0, re.jsx)(D.A, {
                                    value: "education",
                                    style: { fontSize: 12, fontWeight: 500 },
                                    children: "Education",
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 6,
                          lg: 4,
                          children: (0, re.jsx)(Mt.A, {
                            required: !0,
                            size: "small",
                            label: "Subject",
                            fullWidth: !0,
                            name: "subject",
                            value: x.subject || "",
                            onChange: ge,
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 12,
                          lg: 12,
                          children: (0, re.jsxs)(s.A, {
                            style: {
                              display: "flex",
                              justifyContent: "flex-start",
                            },
                            children: [
                              (0, re.jsx)(u.A, {
                                component: "span",
                                children: "Dynamic Tag: ",
                              }),
                              (0, re.jsxs)(s.A, {
                                children: [
                                  "[name],[school_name] - wil get autoreplaced,",
                                  (0, re.jsxs)(u.A, {
                                    component: "span",
                                    color: "error",
                                    children: [
                                      "replace - ",
                                      "{{var}}",
                                      " with your content, variable fields may vary in length. Space consumed for 1 variable is 30 char and avoid double space.",
                                    ],
                                  }),
                                ],
                              }),
                            ],
                          }),
                        }),
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 12,
                          lg: 12,
                          children: (0, re.jsx)(Fm.h, {
                            maxRows: 4,
                            "aria-label": "maximum height",
                            placeholder: "Text Message",
                            style: {
                              width: "100%",
                              height: "120px",
                              padding: "10px",
                              borderRadius: "5px",
                            },
                            name: "sms",
                            fullWidth: !0,
                            value: x.sms,
                            onChange: ge,
                          }),
                        }),
                        (0, re.jsxs)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 12,
                          lg: 12,
                          children: [
                            (0, re.jsx)("span", {
                              children: "Click here to Notify Via SMS",
                            }),
                            (0, re.jsx)(I.A, {
                              onChange: (e) => {
                                z(e.target.checked);
                              },
                              checked: F,
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    container: !0,
                    spacing: 2,
                    children: (0, re.jsx)(xe.Ay, {
                      item: !0,
                      xs: 12,
                      md: 12,
                      lg: 12,
                      style: { display: "flex", justifyContent: "flex-end" },
                      children: (0, re.jsx)(ht.A, {
                        loading: a,
                        size: "small",
                        variant: "contained",
                        type: "submit",
                        children: "Submit",
                      }),
                    }),
                  }),
                ],
              }),
            ],
          });
        };
      var Vm = a(20717),
        Bm = a(17539),
        Om = a(27314),
        Lm = a(19080);
      const Um = [
        { label: "Manual", value: "manual" },
        { label: "Automatic", value: "automatic" },
      ];
      function Hm() {
        const [e, t] = (0, l.useState)([
            {
              smsSubject: "Pre-Admission",
              smsType: "Manual",
              message:
                "Dear John,Thank you for your admission at webspruce. Our staff will help you for all admission related process.",
            },
            {
              smsSubject: "Pre-Admission",
              smsType: "Manual",
              message:
                "Dear John,Thank you for your admission at webspruce. Our staff will help you for all admission related process.",
            },
            {
              smsSubject: "Pre-Admission",
              smsType: "Manual",
              message:
                "Dear John,Thank you for your admission at webspruce. Our staff will help you for all admission related process.",
            },
          ]),
          [a, n] = l.useState(0),
          [i, o] = l.useState(10),
          r = (0, et.Wx)({
            initialValues: { type: "", fromDate: null, toDate: null },
            onSubmit: async (e) => {},
            enableReinitialize: !0,
          });
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Report" }),
            (0, re.jsxs)(xe.Ay, {
              container: !0,
              spacing: 2,
              children: [
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  md: 3,
                  item: !0,
                  children: (0, re.jsx)(Xe.A, {
                    required: !0,
                    name: "type",
                    formik: r,
                    label: "Type",
                    options: Um,
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 3,
                  item: !0,
                  children: (0, re.jsx)(qt.A, {
                    formik: r,
                    label: "From Date",
                    name: "fromDate",
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  xs: 12,
                  sm: 6,
                  md: 3,
                  item: !0,
                  children: (0, re.jsx)(qt.A, {
                    formik: r,
                    label: "To Date",
                    name: "toDate",
                  }),
                }),
                (0, re.jsx)(xe.Ay, {
                  item: !0,
                  xs: 12,
                  md: 3,
                  lg: 3,
                  display: "flex",
                  alignSelf: "center",
                  children: (0, re.jsx)($e.A, {
                    size: "small",
                    type: "submit",
                    variant: "contained",
                    children: "Find",
                  }),
                }),
              ],
            }),
            (0, re.jsxs)(na.A, {
              component: ue.A,
              children: [
                (0, re.jsxs)(ia.A, {
                  children: [
                    (0, re.jsx)(sa.A, {
                      sx: {
                        backgroundColor: (e) =>
                          "dark" === e.palette.mode
                            ? e.palette.primary.dark
                            : e.palette.primary.light,
                      },
                      children: (0, re.jsxs)(oa.A, {
                        children: [
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "S.No",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Subject",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Type",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Message",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Total SMS",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Time/Date",
                          }),
                          (0, re.jsx)(ra.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "Action",
                          }),
                        ],
                      }),
                    }),
                    (0, re.jsx)(ca.A, {
                      children:
                        e &&
                        e.slice(a * i, a * i + i).map((e, t) =>
                          (0, re.jsxs)(
                            oa.A,
                            {
                              children: [
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: t + 1,
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: e.smsSubject,
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: e.smsType,
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: e.message.substring(0, 50) + "...",
                                }),
                                (0, re.jsxs)(ra.A, {
                                  align: "center",
                                  children: [
                                    (0, re.jsx)(u.A, {
                                      children: "Total:50",
                                    }),
                                    (0, re.jsx)(u.A, {
                                      children: "Awaiting:30",
                                    }),
                                    (0, re.jsx)(u.A, {
                                      children: "Delivered:20",
                                    }),
                                    " ",
                                    (0, re.jsx)(u.A, {
                                      children: "Rejected/Failed:0 ",
                                    }),
                                  ],
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: Be()(e.sentTime).format(
                                    "DD-MM-YYYY hh:mm A"
                                  ),
                                }),
                                (0, re.jsx)(ra.A, {
                                  align: "center",
                                  children: (0, re.jsxs)(s.A, {
                                    sx: {
                                      display: "flex",
                                      flexDirection: "column",
                                      alignItems: "center",
                                    },
                                    children: [
                                      (0, re.jsxs)(s.A, {
                                        children: [
                                          " ",
                                          (0, re.jsx)(S.A, {
                                            title: "Refresh",
                                            children: (0, re.jsx)(h.A, {
                                              children: (0, re.jsx)(Lm.A, {
                                                color: "primary",
                                              }),
                                            }),
                                          }),
                                          (0, re.jsx)(S.A, {
                                            title: "Report",
                                            children: (0, re.jsx)(h.A, {
                                              children: (0, re.jsx)(Om.A, {
                                                color: "secondary",
                                              }),
                                            }),
                                          }),
                                        ],
                                      }),
                                      (0, re.jsxs)(s.A, {
                                        children: [
                                          " ",
                                          (0, re.jsx)(S.A, {
                                            title: "Resend",
                                            children: (0, re.jsx)(h.A, {
                                              children: (0, re.jsx)(Vm.A, {
                                                color: "warning",
                                              }),
                                            }),
                                          }),
                                          (0, re.jsx)(S.A, {
                                            title: "Forward",
                                            children: (0, re.jsx)(h.A, {
                                              children: (0, re.jsx)(Bm.A, {
                                                color: "success",
                                              }),
                                            }),
                                          }),
                                        ],
                                      }),
                                    ],
                                  }),
                                }),
                              ],
                            },
                            e._id
                          )
                        ),
                    }),
                  ],
                }),
                !e.length &&
                  (0, re.jsx)(u.A, {
                    variant: "h6",
                    sx: { textAlign: "center", margin: "5px", padding: "5px" },
                    children: "No data found",
                  }),
              ],
            }),
            (0, re.jsx)(Ua.A, {
              rowsPerPageOptions: [10, 25, 50],
              component: "div",
              count: e.length,
              rowsPerPage: i,
              page: a,
              onPageChange: (e, t) => {
                n(t);
              },
              onRowsPerPageChange: (e) => {
                o(+e.target.value), n(0);
              },
            }),
          ],
        });
      }
      const Gm = (0, n.Ay)(_m.Ay)((e) => {
          let { theme: t } = e;
          return {
            padding: 10,
            width: "100%",
            "& input": {
              borderRadius: 4,
              backgroundColor: "light" === t.palette.mode ? "#fff" : "#0d1117",
              padding: 8,
              transition: t.transitions.create(["border-color", "box-shadow"]),
              border: "1px solid ".concat(
                "light" === t.palette.mode ? "#eaecef" : "#30363d"
              ),
              fontSize: 14,
              "&:focus": {
                boxShadow: "0px 0px 0px 3px ".concat(
                  "light" === t.palette.mode
                    ? "rgba(3, 102, 214, 0.3)"
                    : "rgb(12, 45, 107)"
                ),
                borderColor: "light" === t.palette.mode ? "#0366d6" : "#388bfd",
              },
            },
          };
        }),
        Km = (0, re.jsx)(zm.A, { fontSize: "small" }),
        Qm = (0, re.jsx)(Em.A, { fontSize: "small" }),
        Zm = () => {
          const { selectedSetting: e } = (0, l.useContext)(Ce.A),
            [t, a] = (0, l.useState)([]),
            [n, i] = (0, l.useState)([]),
            [o, r] = (0, l.useState)(""),
            [d, c] = (0, l.useState)([]),
            [m, u] = (0, l.useState)(!1),
            [x, h] = (0, l.useState)([]),
            [p, j] = (0, l.useState)(!1),
            [g, A] = (0, l.useState)(!1),
            [y, f] = (0, l.useState)(""),
            [v, b] = (0, l.useState)([]),
            [S, k] = (0, l.useState)(!1),
            [C, w] = (0, l.useState)([]),
            [I, N] = (0, l.useState)(""),
            [_, T] = (0, l.useState)(""),
            [M, F] = (0, l.useState)([]),
            [z, E] = (0, l.useState)([]),
            [q, Y] = (0, l.useState)([]),
            [W, R] = (0, l.useState)([]),
            [P, J] = (0, l.useState)([]),
            [V, B] = (0, l.useState)(0),
            [O, L] = (0, l.useState)(0),
            { ref: U, width: H, height: G } = (0, be.A)(),
            [K, Q] = (0, l.useState)(!1);
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.role.list);
                a(e.result);
              } catch (e) {
                console.log(e);
              }
            })();
          }, []),
            (0, l.useEffect)(() => {
              (async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                    params: { schoolId: e._id },
                  });
                  b(t.result);
                } catch (t) {
                  console.log(t);
                }
              })();
            }, [e._id]);
          const Z = async (t, a) => {
              const l = a.map((e) => e._id),
                n = a.map((e) => e.name);
              F(a), f(n.join(","));
              try {
                if (a.length) {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                      params: {
                        schoolId: e._id,
                        search: { class: { $in: l } },
                      },
                    }),
                    a = t.result.sort((e, t) => e.name.localeCompare(t.name));
                  w(a);
                  const n = z.filter((e) => l.includes(e.class._id));
                  E(n),
                    N(
                      n
                        .map((e) =>
                          "".concat(e.name, " (").concat(e.class.name, ")")
                        )
                        .join(", ")
                    );
                  const i = n.map((e) => e._id);
                  if (i.length) {
                    const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                      params: {
                        schoolId: e._id,
                        search: { "academicInfo.section": i },
                      },
                    });
                    Y(t.result);
                  } else Y([]);
                } else w([]), E([]), N(""), Y([]);
              } catch (i) {
                console.log(i);
              }
            },
            $ = async (t, a) => {
              const l = a.map((e) => e._id),
                n = a.map((e) => e.name),
                i = a.map((e) => e.class.name);
              E(a),
                N(
                  n
                    .map((e, t) => "".concat(e, " (").concat(i[t], ")"))
                    .join(", ")
                );
              try {
                if (a.length) {
                  const { data: t } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: { "academicInfo.section": l },
                    },
                  });
                  Y(t.result);
                } else Y([]);
              } catch (s) {
                console.log(s);
              }
            },
            X = (e, t) => {
              if (t.some((e) => "all" === e._id))
                if (W.length === q.length) R([]), J([]), B(0), T("");
                else {
                  const e = q.map((e) => e._id);
                  R([...q]), J(e), B(q.length), T("All");
                }
              else {
                const e = t.map((e) => e.basicInfo.name),
                  a = t.map((e) => e._id);
                J(a), B(t.length), T(e.join(", ")), R(t);
              }
            },
            ee = (e, t) => {
              if (t.some((e) => "all" === e._id))
                x.length === n.length
                  ? (h([]), L(0), r(""))
                  : (h([...n]), L(n.length), r("All"));
              else {
                const e = t.map((e) => e.basicInfo.name);
                t.map((e) => e._id);
                h(t), L(t.length), r(e.join(", "));
              }
            },
            te = d.some((e) => {
              const a = t.find((t) => t._id === e);
              return a && a.name.includes("STUDENT");
            });
          return (0, re.jsxs)(re.Fragment, {
            children: [
              (0, re.jsx)(ce.A, { title: "Credentials" }),
              (0, re.jsx)(s.A, {
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                children: (0, re.jsx)(me.A, {
                  sx: {
                    padding: "15px",
                    width: { xs: "100%", sm: "100%", md: "70%", lg: "50%" },
                  },
                  children: (0, re.jsx)("form", {
                    onSubmit: async (e) => {
                      e.preventDefault(), Q(!0);
                      try {
                        Ba.oR.success("Credential sent successfully"),
                          c([]),
                          f(""),
                          N(""),
                          T([]),
                          r([]),
                          Q(!1);
                      } catch (t) {
                        Q(!1);
                      }
                    },
                    children: (0, re.jsxs)(xe.Ay, {
                      container: !0,
                      spacing: 2,
                      children: [
                        (0, re.jsxs)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 12,
                          lg: 12,
                          children: [
                            (0, re.jsxs)(Ta.A, {
                              variant: "outlined",
                              fullWidth: !0,
                              required: !0,
                              children: [
                                (0, re.jsx)(Ma.A, {
                                  id: "demo-simple-select-filled-label",
                                  sx: { fontSize: 12 },
                                  children: "User Type",
                                }),
                                (0, re.jsx)(Fa.A, {
                                  labelId: "demo-simple-select-filled-label",
                                  id: "demo-simple-select-filled",
                                  name: "role",
                                  sx: { marginBottom: "15px" },
                                  multiple: !0,
                                  label: "User Type",
                                  size: "small",
                                  onChange: async (t) => {
                                    try {
                                      const {
                                        target: { value: a },
                                      } = t;
                                      c(
                                        "string" === typeof a ? a.split(",") : a
                                      );
                                      const { data: l } = await (0, Se.Jt)(
                                        ke.r.employee.list,
                                        {
                                          params: {
                                            schoolId: e._id,
                                            search: { role: { $in: a } },
                                          },
                                        }
                                      );
                                      i(l.result);
                                    } catch (a) {}
                                  },
                                  value: d,
                                  children:
                                    t &&
                                    t.map((e, t) =>
                                      (0, re.jsx)(
                                        D.A,
                                        {
                                          value: e._id,
                                          sx: { fontSize: 12, fontWeight: 500 },
                                          children: e.name,
                                        },
                                        e._id
                                      )
                                    ),
                                }),
                              ],
                            }),
                            d.some((e) => {
                              const a = t.find((t) => t._id === e);
                              return a && a.name.includes("STUDENT");
                            }) && 1 == d.length
                              ? (0, re.jsxs)(re.Fragment, {
                                  children: [
                                    (0, re.jsxs)(xe.Ay, {
                                      item: !0,
                                      xs: 12,
                                      md: 12,
                                      lg: 12,
                                      children: [
                                        (0, re.jsx)(Mt.A, {
                                          value: y,
                                          fullWidth: !0,
                                          sx: { marginBottom: "15px" },
                                          "aria-describedby": "classPopper",
                                          onFocus: (e) => {
                                            j(p ? null : e.currentTarget);
                                          },
                                          variant: "outlined",
                                          size: "small",
                                          label: "Class",
                                        }),
                                        (0, re.jsx)(s.A, {
                                          ref: U,
                                          children: (0, re.jsx)(Tm.A, {
                                            sx: {
                                              width: H ? H + 15 : 700,
                                              zIndex: 1,
                                            },
                                            id: "classPopper",
                                            open: !!p,
                                            anchorEl: p,
                                            children: (0, re.jsx)(Ta.A, {
                                              variant: "outlined",
                                              size: "small",
                                              fullWidth: !0,
                                              children: (0, re.jsx)(Mm.A, {
                                                onBlur: () => j(null),
                                                open: !0,
                                                value: M,
                                                multiple: !0,
                                                onChange: Z,
                                                isOptionEqualToValue: (e, t) =>
                                                  e._id === t._id,
                                                options: v,
                                                disableCloseOnSelect: !0,
                                                getOptionLabel: (e) =>
                                                  "".concat(e.name),
                                                renderOption: (e, t, a) => {
                                                  let { selected: l } = a;
                                                  return (0, re.jsxs)("li", {
                                                    ...e,
                                                    children: [
                                                      (0, re.jsx)(da.A, {
                                                        icon: Km,
                                                        checkedIcon: Qm,
                                                        checked: l,
                                                      }),
                                                      "".concat(t.name),
                                                    ],
                                                  });
                                                },
                                                renderInput: (e) =>
                                                  (0, re.jsx)(Gm, {
                                                    ref: e.InputProps.ref,
                                                    inputProps: e.inputProps,
                                                    placeholder: "Class",
                                                    autoFocus: !0,
                                                  }),
                                              }),
                                            }),
                                          }),
                                        }),
                                      ],
                                    }),
                                    (0, re.jsxs)(xe.Ay, {
                                      item: !0,
                                      xs: 12,
                                      md: 12,
                                      lg: 12,
                                      children: [
                                        (0, re.jsx)(Mt.A, {
                                          value: I,
                                          "aria-describedby": "sectionPopper",
                                          sx: { marginBottom: "15px" },
                                          fullWidth: !0,
                                          onFocus: (e) => {
                                            A(g ? null : e.currentTarget);
                                          },
                                          variant: "outlined",
                                          size: "small",
                                          label: "Section",
                                        }),
                                        (0, re.jsx)(s.A, {
                                          ref: U,
                                          children: (0, re.jsx)(Tm.A, {
                                            sx: {
                                              width: H ? H + 15 : 700,
                                              zIndex: 1,
                                            },
                                            id: "sectionPopper",
                                            open: !!g,
                                            anchorEl: g,
                                            children: (0, re.jsx)(Ta.A, {
                                              variant: "outlined",
                                              size: "small",
                                              fullWidth: !0,
                                              children: (0, re.jsx)(Mm.A, {
                                                multiple: !0,
                                                onBlur: () => A(null),
                                                open: !0,
                                                value: z,
                                                onChange: $,
                                                isOptionEqualToValue: (e, t) =>
                                                  e._id === t._id,
                                                id: "checkboxes-tags-demo",
                                                options: C.sort((e, t) =>
                                                  e.class.name.localeCompare(
                                                    t.class.name
                                                  )
                                                ),
                                                disableCloseOnSelect: !0,
                                                getOptionLabel: (e) =>
                                                  ""
                                                    .concat(e.name, "(class:")
                                                    .concat(e.class.name, ")"),
                                                renderOption: (e, t, a) => {
                                                  let { selected: l } = a;
                                                  return (0, re.jsxs)("li", {
                                                    ...e,
                                                    children: [
                                                      (0, re.jsx)(da.A, {
                                                        icon: Km,
                                                        checkedIcon: Qm,
                                                        style: {
                                                          marginRight: 8,
                                                        },
                                                        checked: l,
                                                      }),
                                                      ""
                                                        .concat(
                                                          t.name,
                                                          "(class:"
                                                        )
                                                        .concat(
                                                          t.class.name,
                                                          ")"
                                                        ),
                                                    ],
                                                  });
                                                },
                                                renderInput: (e) =>
                                                  (0, re.jsx)(Gm, {
                                                    ref: e.InputProps.ref,
                                                    inputProps: e.inputProps,
                                                    placeholder: "Section",
                                                    autoFocus: !0,
                                                  }),
                                              }),
                                            }),
                                          }),
                                        }),
                                      ],
                                    }),
                                    (0, re.jsxs)(xe.Ay, {
                                      item: !0,
                                      xs: 12,
                                      md: 12,
                                      lg: 12,
                                      children: [
                                        (0, re.jsx)(Mt.A, {
                                          value: _,
                                          "aria-describedby": "contactsPopper",
                                          fullWidth: !0,
                                          onFocus: (e) => {
                                            k(S ? null : e.currentTarget);
                                          },
                                          variant: "outlined",
                                          size: "small",
                                          label: "Students",
                                          InputProps: {
                                            endAdornment: (0, re.jsxs)(Ft.A, {
                                              position: "start",
                                              children: ["All Total-", V],
                                            }),
                                          },
                                        }),
                                        (0, re.jsx)(s.A, {
                                          ref: U,
                                          children: (0, re.jsx)(Tm.A, {
                                            sx: {
                                              width: H ? H + 15 : 700,
                                              zIndex: 1,
                                            },
                                            id: "contactsPopper",
                                            open: !!S,
                                            anchorEl: S,
                                            children: (0, re.jsx)(Ta.A, {
                                              variant: "outlined",
                                              size: "small",
                                              fullWidth: !0,
                                              children: (0, re.jsx)(Mm.A, {
                                                multiple: !0,
                                                onBlur: () => k(null),
                                                open: !0,
                                                value: W,
                                                onChange: X,
                                                isOptionEqualToValue: (e, t) =>
                                                  e._id === t._id,
                                                id: "checkboxes-tags-demo",
                                                options: [
                                                  {
                                                    _id: "all",
                                                    basicInfo: {
                                                      name: "All (".concat(
                                                        q.length,
                                                        ")"
                                                      ),
                                                    },
                                                    contactNumber: "",
                                                  },
                                                  ...q,
                                                ],
                                                disableCloseOnSelect: !0,
                                                getOptionLabel: (e) =>
                                                  "all" === e._id
                                                    ? "All (".concat(
                                                        q.length,
                                                        ")"
                                                      )
                                                    : ""
                                                        .concat(
                                                          e.basicInfo.name,
                                                          " ("
                                                        )
                                                        .concat(
                                                          e.contactNumber,
                                                          ")"
                                                        ),
                                                renderOption: (e, t, a) => {
                                                  let { selected: l } = a;
                                                  return (0, re.jsxs)("li", {
                                                    ...e,
                                                    children: [
                                                      (0, re.jsx)(da.A, {
                                                        icon: Km,
                                                        checkedIcon: Qm,
                                                        style: {
                                                          marginRight: 8,
                                                        },
                                                        checked:
                                                          l ||
                                                          ("all" === t._id &&
                                                            W.length ===
                                                              q.length),
                                                      }),
                                                      "all" === t._id
                                                        ? "All (".concat(
                                                            q.length,
                                                            ")"
                                                          )
                                                        : ""
                                                            .concat(
                                                              t.basicInfo.name,
                                                              " ("
                                                            )
                                                            .concat(
                                                              t.contactNumber,
                                                              ")"
                                                            ),
                                                    ],
                                                  });
                                                },
                                                renderInput: (e) =>
                                                  (0, re.jsx)(s.A, {
                                                    sx: {
                                                      ml: 5,
                                                      width: "100%",
                                                    },
                                                    children: (0, re.jsx)(Gm, {
                                                      ref: e.InputProps.ref,
                                                      inputProps: e.inputProps,
                                                      placeholder:
                                                        "Search student with name",
                                                      autoFocus: !0,
                                                    }),
                                                  }),
                                              }),
                                            }),
                                          }),
                                        }),
                                      ],
                                    }),
                                  ],
                                })
                              : null,
                          ],
                        }),
                        te
                          ? null
                          : (0, re.jsxs)(xe.Ay, {
                              item: !0,
                              xs: 12,
                              md: 12,
                              lg: 12,
                              children: [
                                (0, re.jsx)(Mt.A, {
                                  fullWidth: !0,
                                  value: o,
                                  "aria-describedby": "employeePopper",
                                  onFocus: (e) => {
                                    u(m ? null : e.currentTarget);
                                  },
                                  variant: "outlined",
                                  size: "small",
                                  label: "Employees",
                                  InputProps: {
                                    endAdornment: (0, re.jsxs)(Ft.A, {
                                      position: "end",
                                      children: ["All Total- ", O],
                                    }),
                                  },
                                }),
                                (0, re.jsx)(s.A, {
                                  ref: U,
                                  children: (0, re.jsx)(Tm.A, {
                                    sx: { width: H ? H + 15 : 700, zIndex: 1 },
                                    id: "employeePopper",
                                    open: !!m,
                                    anchorEl: m,
                                    children: (0, re.jsx)(Ta.A, {
                                      variant: "outlined",
                                      fullWidth: !0,
                                      size: "small",
                                      children: (0, re.jsx)(Mm.A, {
                                        onBlur: () => u(null),
                                        open: !0,
                                        value: x,
                                        multiple: !0,
                                        onChange: ee,
                                        isOptionEqualToValue: (e, t) =>
                                          e._id === t._id,
                                        options: [
                                          {
                                            _id: "all",
                                            basicInfo: { name: "All" },
                                          },
                                          ...n,
                                        ],
                                        disableCloseOnSelect: !0,
                                        getOptionLabel: (e) =>
                                          ""
                                            .concat(
                                              null === e || void 0 === e
                                                ? void 0
                                                : e.basicInfo.name,
                                              " ("
                                            )
                                            .concat(
                                              null === e || void 0 === e
                                                ? void 0
                                                : e.contactNumber,
                                              ")"
                                            ),
                                        renderOption: (e, t, a) => {
                                          let { selected: l } = a;
                                          return (0, re.jsxs)("li", {
                                            ...e,
                                            children: [
                                              (0, re.jsx)(da.A, {
                                                icon: Km,
                                                checkedIcon: Qm,
                                                checked:
                                                  l ||
                                                  ("all" === t._id &&
                                                    x.length === n.length),
                                              }),
                                              "all" === t._id
                                                ? "All (".concat(n.length, ")")
                                                : ""
                                                    .concat(
                                                      null === t || void 0 === t
                                                        ? void 0
                                                        : t.basicInfo.name,
                                                      " ("
                                                    )
                                                    .concat(
                                                      null === t || void 0 === t
                                                        ? void 0
                                                        : t.contactNumber,
                                                      ")"
                                                    ),
                                            ],
                                          });
                                        },
                                        renderInput: (e) =>
                                          (0, re.jsx)(s.A, {
                                            sx: { ml: 5, width: "100%" },
                                            children: (0, re.jsx)(Gm, {
                                              ref: e.InputProps.ref,
                                              inputProps: e.inputProps,
                                              placeholder: "Employees",
                                              autoFocus: !0,
                                            }),
                                          }),
                                      }),
                                    }),
                                  }),
                                }),
                              ],
                            }),
                        d.length >= 2 &&
                        d.some((e) => {
                          const a = t.find((t) => t._id === e);
                          return a && a.name.includes("STUDENT");
                        })
                          ? (0, re.jsxs)(re.Fragment, {
                              children: [
                                (0, re.jsxs)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 12,
                                  lg: 12,
                                  children: [
                                    (0, re.jsx)(Mt.A, {
                                      value: y,
                                      fullWidth: !0,
                                      "aria-describedby": "classPopper",
                                      onFocus: (e) => {
                                        j(p ? null : e.currentTarget);
                                      },
                                      variant: "outlined",
                                      size: "small",
                                      label: "Class",
                                    }),
                                    (0, re.jsx)(s.A, {
                                      ref: U,
                                      children: (0, re.jsx)(Tm.A, {
                                        sx: {
                                          width: H ? H + 15 : 700,
                                          zIndex: 1,
                                        },
                                        id: "classPopper",
                                        open: !!p,
                                        anchorEl: p,
                                        children: (0, re.jsx)(Ta.A, {
                                          variant: "outlined",
                                          size: "small",
                                          fullWidth: !0,
                                          children: (0, re.jsx)(Mm.A, {
                                            onBlur: () => j(null),
                                            open: !0,
                                            value: M,
                                            multiple: !0,
                                            onChange: Z,
                                            isOptionEqualToValue: (e, t) =>
                                              e._id === t._id,
                                            options: v,
                                            disableCloseOnSelect: !0,
                                            getOptionLabel: (e) =>
                                              "".concat(e.name),
                                            renderOption: (e, t, a) => {
                                              let { selected: l } = a;
                                              return (0, re.jsxs)("li", {
                                                ...e,
                                                children: [
                                                  (0, re.jsx)(da.A, {
                                                    icon: Km,
                                                    checkedIcon: Qm,
                                                    checked: l,
                                                  }),
                                                  "".concat(t.name),
                                                ],
                                              });
                                            },
                                            renderInput: (e) =>
                                              (0, re.jsx)(Gm, {
                                                ref: e.InputProps.ref,
                                                inputProps: e.inputProps,
                                                placeholder: "Class",
                                                autoFocus: !0,
                                              }),
                                          }),
                                        }),
                                      }),
                                    }),
                                  ],
                                }),
                                (0, re.jsxs)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 12,
                                  lg: 12,
                                  children: [
                                    (0, re.jsx)(Mt.A, {
                                      value: I,
                                      "aria-describedby": "sectionPopper",
                                      fullWidth: !0,
                                      onFocus: (e) => {
                                        A(g ? null : e.currentTarget);
                                      },
                                      variant: "outlined",
                                      size: "small",
                                      label: "Section",
                                    }),
                                    (0, re.jsx)(s.A, {
                                      ref: U,
                                      children: (0, re.jsx)(Tm.A, {
                                        sx: {
                                          width: H ? H + 15 : 700,
                                          zIndex: 1,
                                        },
                                        id: "sectionPopper",
                                        open: !!g,
                                        anchorEl: g,
                                        children: (0, re.jsx)(Ta.A, {
                                          variant: "outlined",
                                          size: "small",
                                          fullWidth: !0,
                                          children: (0, re.jsx)(Mm.A, {
                                            multiple: !0,
                                            onBlur: () => A(null),
                                            open: !0,
                                            value: z,
                                            onChange: $,
                                            isOptionEqualToValue: (e, t) =>
                                              e._id === t._id,
                                            id: "checkboxes-tags-demo",
                                            options: C.sort((e, t) =>
                                              e.class.name.localeCompare(
                                                t.class.name
                                              )
                                            ),
                                            disableCloseOnSelect: !0,
                                            getOptionLabel: (e) =>
                                              ""
                                                .concat(e.name, "(class:")
                                                .concat(e.class.name, ")"),
                                            renderOption: (e, t, a) => {
                                              let { selected: l } = a;
                                              return (0, re.jsxs)("li", {
                                                ...e,
                                                children: [
                                                  (0, re.jsx)(da.A, {
                                                    icon: Km,
                                                    checkedIcon: Qm,
                                                    style: { marginRight: 8 },
                                                    checked: l,
                                                  }),
                                                  ""
                                                    .concat(t.name, "(class:")
                                                    .concat(t.class.name, ")"),
                                                ],
                                              });
                                            },
                                            renderInput: (e) =>
                                              (0, re.jsx)(Gm, {
                                                ref: e.InputProps.ref,
                                                inputProps: e.inputProps,
                                                placeholder: "Section",
                                                autoFocus: !0,
                                              }),
                                          }),
                                        }),
                                      }),
                                    }),
                                  ],
                                }),
                                (0, re.jsxs)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 12,
                                  lg: 12,
                                  children: [
                                    (0, re.jsx)(Mt.A, {
                                      value: _,
                                      "aria-describedby": "contactsPopper",
                                      fullWidth: !0,
                                      onFocus: (e) => {
                                        k(S ? null : e.currentTarget);
                                      },
                                      variant: "outlined",
                                      size: "small",
                                      label: "Students",
                                      InputProps: {
                                        endAdornment: (0, re.jsxs)(Ft.A, {
                                          position: "start",
                                          children: ["All Total-", V],
                                        }),
                                      },
                                    }),
                                    (0, re.jsx)(s.A, {
                                      ref: U,
                                      children: (0, re.jsx)(Tm.A, {
                                        sx: {
                                          width: H ? H + 15 : 700,
                                          zIndex: 1,
                                        },
                                        id: "contactsPopper",
                                        open: !!S,
                                        anchorEl: S,
                                        children: (0, re.jsx)(Ta.A, {
                                          variant: "outlined",
                                          size: "small",
                                          fullWidth: !0,
                                          children: (0, re.jsx)(Mm.A, {
                                            multiple: !0,
                                            onBlur: () => k(null),
                                            open: !0,
                                            value: W,
                                            onChange: X,
                                            isOptionEqualToValue: (e, t) =>
                                              e._id === t._id,
                                            id: "checkboxes-tags-demo",
                                            options: [
                                              {
                                                _id: "all",
                                                basicInfo: {
                                                  name: "All (".concat(
                                                    q.length,
                                                    ")"
                                                  ),
                                                },
                                                contactNumber: "",
                                              },
                                              ...q,
                                            ],
                                            disableCloseOnSelect: !0,
                                            getOptionLabel: (e) =>
                                              "all" === e._id
                                                ? "All (".concat(q.length, ")")
                                                : ""
                                                    .concat(
                                                      e.basicInfo.name,
                                                      " ("
                                                    )
                                                    .concat(
                                                      e.contactNumber,
                                                      ")"
                                                    ),
                                            renderOption: (e, t, a) => {
                                              let { selected: l } = a;
                                              return (0, re.jsxs)("li", {
                                                ...e,
                                                children: [
                                                  (0, re.jsx)(da.A, {
                                                    icon: Km,
                                                    checkedIcon: Qm,
                                                    style: { marginRight: 8 },
                                                    checked:
                                                      l ||
                                                      ("all" === t._id &&
                                                        W.length === q.length),
                                                  }),
                                                  "all" === t._id
                                                    ? "All (".concat(
                                                        q.length,
                                                        ")"
                                                      )
                                                    : ""
                                                        .concat(
                                                          t.basicInfo.name,
                                                          " ("
                                                        )
                                                        .concat(
                                                          t.contactNumber,
                                                          ")"
                                                        ),
                                                ],
                                              });
                                            },
                                            renderInput: (e) =>
                                              (0, re.jsx)(s.A, {
                                                sx: { ml: 5, width: "100%" },
                                                children: (0, re.jsx)(Gm, {
                                                  ref: e.InputProps.ref,
                                                  inputProps: e.inputProps,
                                                  placeholder:
                                                    "Search student with name",
                                                  autoFocus: !0,
                                                }),
                                              }),
                                          }),
                                        }),
                                      }),
                                    }),
                                  ],
                                }),
                                (0, re.jsxs)(xe.Ay, {
                                  item: !0,
                                  xs: 12,
                                  md: 12,
                                  lg: 12,
                                  children: [
                                    (0, re.jsx)(Mt.A, {
                                      fullWidth: !0,
                                      value: o,
                                      "aria-describedby": "employeePopper",
                                      onFocus: (e) => {
                                        u(m ? null : e.currentTarget);
                                      },
                                      variant: "outlined",
                                      size: "small",
                                      label: "Employees",
                                      InputProps: {
                                        endAdornment: (0, re.jsxs)(Ft.A, {
                                          position: "end",
                                          children: ["All Total- ", O],
                                        }),
                                      },
                                    }),
                                    (0, re.jsx)(s.A, {
                                      ref: U,
                                      children: (0, re.jsx)(Tm.A, {
                                        sx: {
                                          width: H ? H + 15 : 700,
                                          zIndex: 1,
                                        },
                                        id: "employeePopper",
                                        open: !!m,
                                        anchorEl: m,
                                        children: (0, re.jsx)(Ta.A, {
                                          variant: "outlined",
                                          fullWidth: !0,
                                          size: "small",
                                          children: (0, re.jsx)(Mm.A, {
                                            onBlur: () => u(null),
                                            open: !0,
                                            value: x,
                                            multiple: !0,
                                            onChange: ee,
                                            isOptionEqualToValue: (e, t) =>
                                              e._id === t._id,
                                            options: [
                                              {
                                                _id: "all",
                                                basicInfo: { name: "All" },
                                              },
                                              ...n,
                                            ],
                                            disableCloseOnSelect: !0,
                                            getOptionLabel: (e) =>
                                              ""
                                                .concat(
                                                  null === e || void 0 === e
                                                    ? void 0
                                                    : e.basicInfo.name,
                                                  " ("
                                                )
                                                .concat(
                                                  null === e || void 0 === e
                                                    ? void 0
                                                    : e.contactNumber,
                                                  ")"
                                                ),
                                            renderOption: (e, t, a) => {
                                              let { selected: l } = a;
                                              return (0, re.jsxs)("li", {
                                                ...e,
                                                children: [
                                                  (0, re.jsx)(da.A, {
                                                    icon: Km,
                                                    checkedIcon: Qm,
                                                    checked:
                                                      l ||
                                                      ("all" === t._id &&
                                                        x.length === n.length),
                                                  }),
                                                  "all" === t._id
                                                    ? "All (".concat(
                                                        n.length,
                                                        ")"
                                                      )
                                                    : ""
                                                        .concat(
                                                          null === t ||
                                                            void 0 === t
                                                            ? void 0
                                                            : t.basicInfo.name,
                                                          " ("
                                                        )
                                                        .concat(
                                                          null === t ||
                                                            void 0 === t
                                                            ? void 0
                                                            : t.contactNumber,
                                                          ")"
                                                        ),
                                                ],
                                              });
                                            },
                                            renderInput: (e) =>
                                              (0, re.jsx)(s.A, {
                                                sx: { ml: 5, width: "100%" },
                                                children: (0, re.jsx)(Gm, {
                                                  ref: e.InputProps.ref,
                                                  inputProps: e.inputProps,
                                                  placeholder: "Employees",
                                                  autoFocus: !0,
                                                }),
                                              }),
                                          }),
                                        }),
                                      }),
                                    }),
                                  ],
                                }),
                              ],
                            })
                          : "",
                        (0, re.jsx)(xe.Ay, {
                          item: !0,
                          xs: 12,
                          md: 12,
                          lg: 6,
                          container: !0,
                          children: (0, re.jsx)(ht.A, {
                            loading: K,
                            variant: "contained",
                            size: "small",
                            type: "submit",
                            children: "Send Credentials",
                          }),
                        }),
                      ],
                    }),
                  }),
                }),
              }),
            ],
          });
        };
      function $m() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          t = (0, _.Zp)(),
          [a, n] = (0, l.useState)([]),
          [i, s] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]),
          [d, c] = (0, l.useState)([]),
          m = async (t) => {
            try {
              const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                params: {
                  schoolId: e._id,
                  search: {
                    academicYear: t.academicYear,
                    "academicInfo.class": t.class,
                    "academicInfo.section": t.section,
                  },
                },
              });
              c(a.result);
            } catch (a) {
              console.log(a);
            }
          },
          u = (0, et.Wx)({
            initialValues: { academicYear: "", class: "", section: "" },
            onSubmit: m,
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
              n(
                e.result.map((e) => ({
                  ...e,
                  label: "".concat(e.from, "-").concat(e.to),
                  value: e._id,
                }))
              ),
                u.setFieldValue("academicYear", e.result[0]._id);
            } catch (e) {
              console.log(e);
            }
          })(),
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: e._id },
                });
                s(t.result.map((e) => ({ ...e, label: e.name, value: e._id }))),
                  u.setFieldValue("class", t.result[0]._id);
              } catch (t) {
                console.log(t);
              }
            })();
        }, [e._id]),
          (0, l.useEffect)(() => {
            u.values.class &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: u.values.class },
                    },
                  });
                  r(
                    a.result.map((e) => ({ ...e, label: e.name, value: e._id }))
                  ),
                    u.setFieldValue(
                      "section",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [u.values.class, e]),
          (0, l.useEffect)(() => {
            u.values.academicYear &&
              u.values.class &&
              u.values.section &&
              m(u.values);
          }, [u.values.academicYear, u.values.class, u.values.section, e]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Bulk Photo" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsx)("form", {
                onSubmit: u.handleSubmit,
                children: (0, re.jsxs)(xe.Ay, {
                  rowSpacing: 1,
                  columnSpacing: 2,
                  container: !0,
                  component: "div",
                  onSubmit: u.handleSubmit,
                  children: [
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "academicYear",
                        formik: u,
                        label: "Select Academic Year",
                        options: a,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "class",
                        formik: u,
                        label: "Select Class",
                        options: i,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Xe.A, {
                        required: !0,
                        name: "section",
                        formik: u,
                        label: "Select Section",
                        options: o,
                      }),
                    }),
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      sx: { alignSelf: "center" },
                      children: (0, re.jsx)($e.A, {
                        type: "submit",
                        variant: "contained",
                        size: "small",
                        children: "Find",
                      }),
                    }),
                  ],
                }),
              }),
            }),
            (0, re.jsx)(na.A, {
              component: ue.A,
              children: (0, re.jsxs)(ia.A, {
                children: [
                  (0, re.jsx)(sa.A, {
                    sx: {
                      backgroundColor: (e) =>
                        "dark" === e.palette.mode
                          ? e.palette.primary.dark
                          : e.palette.primary.light,
                    },
                    children: (0, re.jsxs)(oa.A, {
                      children: [
                        (0, re.jsx)(ra.A, { align: "center", children: "SL" }),
                        (0, re.jsx)(ra.A, {
                          align: "center",
                          children: "Roll No",
                        }),
                        (0, re.jsx)(ra.A, {
                          align: "center",
                          children: "Name",
                        }),
                        (0, re.jsx)(ra.A, {
                          align: "center",
                          children: "Photo",
                        }),
                        (0, re.jsx)(ra.A, {
                          align: "center",
                          children: "File",
                        }),
                        (0, re.jsx)(ra.A, {
                          align: "center",
                          children: "Action",
                        }),
                      ],
                    }),
                  }),
                  (0, re.jsx)(ca.A, {
                    children: d.map((e, a) =>
                      (0, re.jsxs)(
                        oa.A,
                        {
                          children: [
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: a + 1,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: e.academicInfo.rollNumber,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: e.basicInfo.name,
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: (0, re.jsx)(k.A, {
                                src: e.photo,
                                sx: { margin: "auto" },
                              }),
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              sx: { maxWidth: "100px" },
                              children: (0, re.jsx)(Ol.A, {
                                multi: !1,
                                onChange: (t) =>
                                  (async (e, t) => {
                                    const { files: a } = e.target;
                                    if (a.length > 0) {
                                      const e = new FormData();
                                      e.append("photo", a[0]);
                                      try {
                                        await (0, Se.yJ)(
                                          ke.r.student.updatePhoto + "/" + t,
                                          e,
                                          {
                                            headers: {
                                              "Content-Type":
                                                "multipart/form-data",
                                            },
                                          }
                                        ),
                                          m(u.values);
                                      } catch (l) {
                                        console.log(l);
                                      }
                                    }
                                  })(t, e._id),
                                customOnChange: !0,
                                label: "Select Image",
                              }),
                            }),
                            (0, re.jsx)(ra.A, {
                              align: "center",
                              children: (0, re.jsx)(S.A, {
                                title: "Edit",
                                children: (0, re.jsx)(h.A, {
                                  onClick: () =>
                                    ((e) => {
                                      t(
                                        "/sch/student/edit-student/".concat(
                                          e._id
                                        )
                                      );
                                    })(e),
                                  children: (0, re.jsx)(Ga.A, {
                                    color: "primary",
                                    fontSize: "small",
                                  }),
                                }),
                              }),
                            }),
                          ],
                        },
                        e._id
                      )
                    ),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const Xm = (0, n.Ay)(u.A)((e) => {
        let { theme: t } = e;
        return {
          textAlign: "start",
          fontSize: "14px",
          padding: "5px 10px",
          borderBottom: "1px solid",
          borderBottomColor: "lightgray",
          fontWeight: "bold",
          color: "white",
          background: t.palette.secondary.main,
        };
      });
      function eu() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)([]),
          [o, r] = (0, l.useState)([]);
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: e._id },
              });
              a(t.result.map((e) => ({ label: e.name, value: e._id }))),
                d.setFieldValue("class", t.result[0]._id);
            } catch (t) {
              console.log(t);
            }
          })();
        }, [e._id]);
        const d = (0, et.Wx)({
          initialValues: {
            class: "",
            section: "",
            student: "",
            selectedIdCard: "",
          },
          onSubmit: console.log("log"),
        });
        (0, l.useEffect)(() => {
          d.values.class &&
            (async () => {
              try {
                const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                  params: {
                    schoolId: e._id,
                    search: { class: d.values.class },
                  },
                });
                i(t.result.map((e) => ({ label: e.name, value: e._id }))),
                  d.setFieldValue("section", t.result[0]._id);
              } catch (t) {
                console.error(t);
              }
            })();
        }, [d.values.class, e._id]),
          (0, l.useEffect)(() => {
            d.values.class &&
              d.values.section &&
              (async () => {
                try {
                  var t;
                  const { data: a } = await (0, Se.Jt)(ke.r.student.list, {
                    params: {
                      schoolId: e._id,
                      search: {
                        "academicInfo.class": d.values.class,
                        "academicInfo.section": d.values.section,
                      },
                    },
                  });
                  r(
                    a.result.map((e) => ({
                      ...e,
                      label: e.basicInfo.name,
                      value: e._id,
                    }))
                  ),
                    d.setFieldValue(
                      "student",
                      null === (t = a.result[0]) || void 0 === t
                        ? void 0
                        : t._id
                    );
                } catch (a) {
                  console.log(a);
                }
              })();
          }, [d.values.class, d.values.section, e]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Id Card" }),
            (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                children: [
                  (0, re.jsxs)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    item: !0,
                    children: [
                      (0, re.jsx)(Xm, {
                        id: "modal-modal-title",
                        variant: "h6",
                        component: "h2",
                        children: "Select Your Id Card Theme",
                      }),
                      (0, re.jsx)(s.A, {
                        m: 2,
                        children: (0, re.jsx)(Cc.A, {
                          onThemeSelect: (e) => {
                            d.setFieldValue("selectedIdCard", e);
                          },
                          webTheme: !1,
                        }),
                      }),
                    ],
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 4,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: d,
                      label: "Select Class",
                      options: t,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 4,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: d,
                      label: "Select Section",
                      options: n,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 4,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "student",
                      formik: d,
                      label: "Select Student",
                      options: o,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center" },
                    item: !0,
                    children: (0, re.jsx)($e.A, {
                      size: "small",
                      variant: "contained",
                      children: "Generate",
                    }),
                  }),
                ],
              }),
            }),
          ],
        });
      }
      const tu = [
        { name: "Assignment Title", key: "title" },
        { name: "Class", key: "className" },
        { name: "Subject", key: "subjectName" },
        { name: "Created At", key: "createdAt", isDate: !0 },
        { name: "Deadline", key: "deadline", isDate: !0 },
      ];
      function au(e) {
        var t, a;
        let {
          dataToEdit: n = "",
          handleClose: i = () => {},
          onUpdateFormik: s = () => {},
        } = e;
        const { selectedSetting: o } = (0, l.useContext)(Ce.A),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          [u, x] = (0, l.useState)([]),
          [h, p] = (0, l.useState)([]),
          [j, g] = (0, l.useState)(!1),
          A = (0, et.Wx)({
            initialValues: {
              title: (null === n || void 0 === n ? void 0 : n.title) || "",
              class: (null === n || void 0 === n ? void 0 : n.class) || "",
              section: (null === n || void 0 === n ? void 0 : n.section) || "",
              subject: (null === n || void 0 === n ? void 0 : n.subject) || "",
              assignmentType:
                (null === n || void 0 === n ? void 0 : n.assignmentType) || "",
              deadline:
                null !== n && void 0 !== n && n.deadline
                  ? Be()(n.deadline).format("YYYY/MM/DD")
                  : null,
              attachmentType:
                (null === n || void 0 === n ? void 0 : n.attachmentType) || "",
              isPublish:
                (null === n || void 0 === n ? void 0 : n.isPublish) || !1,
              note: (null === n || void 0 === n ? void 0 : n.note) || "",
              link: (null === n || void 0 === n ? void 0 : n.link) || "",
            },
            onSubmit: async (e) => {
              const t = new FormData();
              t.append("title", e.title),
                t.append("class", e.class),
                t.append("section", e.section),
                t.append("subject", e.subject),
                t.append("assignmentType", e.assignmentType),
                t.append("deadline", Be()(e.deadline).format("YYYY-MM-DD")),
                t.append("attachmentType", e.attachmentType),
                t.append("isPublic", !!e.isPublic),
                t.append("note", e.note),
                t.append("link", e.link),
                h.forEach((e) => t.append("file", e)),
                t.append("schoolId", o._id);
              try {
                if ((g(!0), n)) {
                  const { data: e } = await (0, Se.yJ)(
                    ke.r.assignment.update + "/" + n.id,
                    t,
                    { headerd: { "Content-Type": "multipart/form-data" } }
                  );
                } else {
                  const { data: e } = await (0, Se.bE)(
                    ke.r.assignment.create,
                    t,
                    { headers: { "Content-type": "multipart/form-data" } }
                  );
                }
                s.handleSubmit(), i();
              } catch (a) {
                console.log(a);
              }
              g(!1);
            },
            enableReinitialize: !0,
          });
        return (
          (0, l.useEffect)(() => {
            (async () => {
              try {
                const { data: e } = await (0, Se.Jt)(ke.r.class.list, {
                  params: { schoolId: o._id },
                });
                d(e.result.map((e) => ({ label: e.name, value: e._id }))),
                  A.setFieldValue("class", e.result[0]._id);
              } catch (e) {
                console.log(e);
              }
            })();
          }, [o._id]),
          (0, l.useEffect)(() => {
            A.values.class &&
              ((async () => {
                try {
                  const { data: e } = await (0, Se.Jt)(ke.r.section.list, {
                      params: {
                        schoolId: o._id,
                        search: { class: A.values.class },
                      },
                    }),
                    t = [
                      { label: "All", value: "all" },
                      ...e.result.map((e) => ({ label: e.name, value: e._id })),
                    ];
                  m(t);
                } catch (e) {
                  console.log(e);
                }
              })(),
              (async () => {
                try {
                  if ("all" === A.values.section) {
                    const { data: e } = await (0, Se.Jt)(ke.r.subject.list, {
                      params: { schoolId: o._id, class: A.values.class },
                    });
                    x(e.result.map((e) => ({ label: e.name, value: e._id }))),
                      A.setFieldValue("subject", e.result[0]._id);
                  } else {
                    const { data: e } = await (0, Se.Jt)(ke.r.subject.list, {
                      params: {
                        schoolId: o._id,
                        search: {
                          class: A.values.class,
                          section: A.values.section,
                        },
                      },
                    });
                    x(e.result.map((e) => ({ label: e.name, value: e._id }))),
                      A.setFieldValue("subject", e.result[0]._id);
                  }
                } catch (e) {
                  console.log(e);
                }
              })());
          }, [A.values.class, o._id]),
          (0, re.jsx)(re.Fragment, {
            children: (0, re.jsx)(ue.A, {
              sx: { padding: 2, marginBottom: 2 },
              children: (0, re.jsxs)(xe.Ay, {
                rowSpacing: 1,
                columnSpacing: 2,
                container: !0,
                component: "form",
                onSubmit: A.handleSubmit,
                children: [
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      required: !0,
                      name: "title",
                      formik: A,
                      label: "Assignment Title",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "class",
                      formik: A,
                      label: "Select Class",
                      options: r,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "section",
                      formik: A,
                      label: "Select Section",
                      options: c,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "subject",
                      formik: A,
                      label: "Select Subject",
                      options: u,
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      required: !0,
                      name: "assignmentType",
                      formik: A,
                      label: "Select Assignment Type",
                      options: [
                        { label: "Class", value: "class" },
                        { label: "Assignment", value: "assignment" },
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(qt.A, {
                      required: !0,
                      formik: A,
                      name: "deadline",
                      label: "Deadline",
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      name: "attachmentType",
                      formik: A,
                      label: "Select Attachment Type",
                      options: [
                        { label: "File", value: "File" },
                        { label: "Link", value: "Link" },
                      ],
                    }),
                  }),
                  "File" ===
                    (null === (t = A.values) || void 0 === t
                      ? void 0
                      : t.attachmentType) &&
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(Ol.A, {
                        name: "file",
                        label: "Select File",
                        onChange: (e) =>
                          ((e, t) => {
                            const { files: a } = e.target;
                            let l = [];
                            if (a.length > 0) {
                              for (let e = 0; e < a.length; e++) {
                                const t = a[e];
                                l.push(t);
                              }
                              p(l);
                            } else console.log("No files selected");
                          })(e),
                        previousFile:
                          null === n || void 0 === n ? void 0 : n.file,
                        customOnChange: !0,
                        selectedFiles: h,
                      }),
                    }),
                  "Link" ===
                    (null === (a = A.values) || void 0 === a
                      ? void 0
                      : a.attachmentType) &&
                    (0, re.jsx)(xe.Ay, {
                      xs: 12,
                      md: 6,
                      lg: 3,
                      item: !0,
                      children: (0, re.jsx)(At.A, {
                        name: "link",
                        label: "Link",
                        required: !0,
                        formik: A,
                      }),
                    }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    item: !0,
                    children: (0, re.jsx)(Xe.A, {
                      name: "isPublish",
                      formik: A,
                      label: "Publish To Web",
                      options: [
                        { label: "Yes", value: !0 },
                        { label: "No", value: !1 },
                      ],
                    }),
                  }),
                  (0, re.jsx)(xe.Ay, {
                    xs: 12,
                    md: 12,
                    lg: 12,
                    item: !0,
                    children: (0, re.jsx)(At.A, {
                      name: "note",
                      formik: A,
                      label: "Note",
                      multiline: !0,
                      rows: 3,
                    }),
                  }),
                  (0, re.jsxs)(xe.Ay, {
                    xs: 12,
                    md: 6,
                    lg: 3,
                    style: { alignSelf: "center", marginTop: "10px" },
                    item: !0,
                    children: [
                      (0, re.jsx)($e.A, {
                        size: "small",
                        color: "error",
                        variant: "contained",
                        onClick: i,
                        children: "Cancel",
                      }),
                      (0, re.jsx)(ht.A, {
                        size: "small",
                        type: "submit",
                        variant: "contained",
                        sx: { ml: 2 },
                        loading: j,
                        children: "Submit",
                      }),
                    ],
                  }),
                ],
              }),
            }),
          })
        );
      }
      const lu = (0, n.Ay)(oa.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            "&:nth-of-type(odd)": {
              backgroundColor:
                "dark" === t.palette.mode ? "rgb(81 81 81)" : "#F0F8FF",
            },
          };
        }),
        nu = (0, n.Ay)(ra.A)((e) => {
          let { theme: t, isDarkMode: a } = e;
          return {
            width: "200px",
            border: "1px solid gray",
            ["&.".concat(va.A.head)]: {
              backgroundColor: a ? "transparent" : "blue",
            },
            ["&.".concat(va.A.body)]: { fontSize: 15 },
          };
        });
      function iu(e) {
        let {
          open: t = !0,
          title: a = "",
          tableData: n,
          onClose: i = () => {},
        } = e;
        const { isDarkMode: s } = (0, l.useContext)(st.A);
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsxs)(ct.A, {
            onClose: i,
            "aria-labelledby": "customized-dialog-title",
            open: t,
            children: [
              (0, re.jsx)(mt.A, {
                sx: {
                  m: 0,
                  p: 2,
                  backgroundColor: s ? "#333" : "#fff",
                  color: s ? "#fff" : "#000",
                },
                id: "customized-dialog-title",
                children: a,
              }),
              (0, re.jsx)(h.A, {
                "aria-label": "close",
                onClick: i,
                sx: {
                  position: "absolute",
                  right: 8,
                  top: 8,
                  color: s ? "#fff" : "#000",
                },
                children: (0, re.jsx)(Sa.A, {}),
              }),
              (0, re.jsx)(ut.A, {
                sx: {
                  backgroundColor: s ? "#333" : "#fff",
                  color: s ? "#fff" : "#000",
                },
                children: (0, re.jsx)(ia.A, {
                  "aria-label": "customized table",
                  children: (0, re.jsx)(ca.A, {
                    children: (0, re.jsxs)(lu, {
                      isDarkMode: s,
                      children: [
                        (0, re.jsx)(nu, {
                          align: "left",
                          sx: { fontWeight: "bold" },
                          isDarkMode: s,
                          children: "Note",
                        }),
                        (0, re.jsx)(nu, {
                          align: "left",
                          width: 100,
                          children:
                            (null === n || void 0 === n ? void 0 : n.note) ||
                            "NA",
                        }),
                      ],
                    }),
                  }),
                }),
              }),
            ],
          }),
        });
      }
      const su = (e) => {
        let { data: t = {} } = e;
        console.log(t, "kkk");
        return (0, re.jsx)(re.Fragment, {
          children: (0, re.jsx)(h.A, {
            size: "small",
            variant: "contained",
            onClick: () => {
              try {
                t.file
                  ? window.open(t.file, "_blank")
                  : window.open(t.link, "_blank");
              } catch (e) {
                console.error("No file or link found in the data");
              }
            },
            children: (0, re.jsx)(Bl.A, {
              color: "primary",
              fontSize: "small",
            }),
          }),
        });
      };
      function ou() {
        const { selectedSetting: e } = (0, l.useContext)(Ce.A),
          [t, a] = (0, l.useState)([]),
          [n, i] = (0, l.useState)(null),
          [s, o] = (0, l.useState)(0),
          [r, d] = (0, l.useState)([]),
          [c, m] = (0, l.useState)([]),
          u = [{ label: "All", value: "all" }, ...c],
          [x, h] = (0, l.useState)(!1),
          [p, j] = (0, l.useState)({
            open: !1,
            tableData: "",
            action: () => {},
          }),
          [g, A] = (0, l.useState)(!1),
          y = async (t) => {
            try {
              if (
                (A(!0),
                "all" === (null === t || void 0 === t ? void 0 : t.section))
              ) {
                const { data: l } = await (0, Se.Jt)(ke.r.assignment.list, {
                  params: { schoolId: e._id, search: { class: t.class } },
                });
                "OK" === l.responseCode &&
                  a(
                    l.result.map((e) => ({
                      ...e,
                      className: e.class.name,
                      subjectName: e.subject.name,
                      id: e._id,
                    }))
                  );
              } else {
                const { data: l } = await (0, Se.Jt)(ke.r.assignment.list, {
                  params: {
                    schoolId: e._id,
                    search: { class: t.class, section: t.section },
                  },
                });
                "OK" === l.responseCode &&
                  a(
                    l.result.map((e) => ({
                      ...e,
                      className: e.class.name,
                      subjectName: e.subject.name,
                      id: e._id,
                    }))
                  );
              }
              A(!1);
            } catch (l) {
              console.log(l), A(!1);
            }
          },
          f = (0, et.Wx)({
            initialValues: { class: "", section: "" },
            onSubmit: y,
            enableReinitialize: !0,
          });
        (0, l.useEffect)(() => {
          (async () => {
            try {
              const { data: t } = await (0, Se.Jt)(ke.r.class.list, {
                params: { schoolId: e._id },
              });
              d(t.result.map((e) => ({ label: e.name, value: e._id }))),
                f.setFieldValue("class", t.result[0]._id);
            } catch (t) {
              console.log(t);
            }
          })();
        }, [e._id]),
          (0, l.useEffect)(() => {
            f.values.class &&
              ((async () => {
                try {
                  const { data: t } = await (0, Se.Jt)(ke.r.section.list, {
                    params: {
                      schoolId: e._id,
                      search: { class: f.values.class },
                    },
                  });
                  m(t.result.map((e) => ({ label: e.name, value: e._id }))),
                    f.setFieldValue("section", t.result[0]._id);
                } catch (t) {
                  console.log(t);
                }
              })(),
              y(f.values));
          }, [f.values.class, e._id]);
        (0, l.useEffect)(() => {
          0 === s && i(null);
        }, [s]);
        return (0, re.jsxs)(re.Fragment, {
          children: [
            (0, re.jsx)(ce.A, { title: "Assignment" }),
            (0, re.jsx)(kt.A, {
              onChange: (e, t) => {
                o(t);
              },
              value: s,
              labels: [
                "Assignment",
                n && 0 != s ? "Edit Assignment" : "Add Assignment",
              ],
            }),
            (0, re.jsxs)(Ct.A, {
              index: 0,
              value: s,
              children: [
                (0, re.jsx)(ue.A, {
                  sx: { padding: 2, marginBottom: 2 },
                  children: (0, re.jsxs)(xe.Ay, {
                    rowSpacing: 1,
                    columnSpacing: 2,
                    container: !0,
                    component: "form",
                    onSubmit: f.handleSubmit,
                    children: [
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "class",
                          formik: f,
                          label: "Select Class",
                          options: r,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        item: !0,
                        children: (0, re.jsx)(Xe.A, {
                          required: !0,
                          name: "section",
                          formik: f,
                          label: "Select Section",
                          options: u,
                        }),
                      }),
                      (0, re.jsx)(xe.Ay, {
                        xs: 12,
                        md: 6,
                        lg: 3,
                        style: { alignSelf: "center" },
                        item: !0,
                        children: (0, re.jsx)(ht.A, {
                          loading: g,
                          size: "small",
                          type: "submit",
                          variant: "contained",
                          sx: { ml: 2 },
                          children: "Search",
                        }),
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(jt.A, {
                  actions: ["view", "edit", "delete", "custom"],
                  bodyDataModal: "Assignment",
                  bodyData: t,
                  tableKeys: tu,
                  onEditClick: (e) => {
                    i({ ...e, class: e.class._id, subject: e.subject._id }),
                      o(1);
                  },
                  onViewClick: (e) => {
                    j({ ...p, open: !0, tableData: e });
                  },
                  onDeleteClick: async (e) => {
                    try {
                      await (0, Se.yH)(ke.r.assignment.delete + "/" + e);
                      y(), f.handleSubmit();
                    } catch (t) {
                      console.error(t);
                    }
                  },
                  CustomAction: su,
                }),
                (0, re.jsx)(iu, {
                  title: "Assignment Information",
                  open: null === p || void 0 === p ? void 0 : p.open,
                  tableData: null === p || void 0 === p ? void 0 : p.tableData,
                  onClose: (e) => {
                    j({ ...p, open: !1 });
                  },
                }),
              ],
            }),
            (0, re.jsx)(Ct.A, {
              index: 1,
              value: s,
              children: (0, re.jsx)(au, {
                dataToEdit: n,
                handleClose: () => {
                  o(0), i(null), y();
                },
                onUpdateFormik: f,
              }),
            }),
          ],
        });
      }
      const ru = 250,
        du = (e) => ({
          width: ru,
          transition: e.transitions.create("width", {
            easing: e.transitions.easing.sharp,
            duration: e.transitions.duration.enteringScreen,
          }),
          overflowX: "hidden",
        }),
        cu = (e) => ({
          transition: e.transitions.create("width", {
            easing: e.transitions.easing.sharp,
            duration: e.transitions.duration.leavingScreen,
          }),
          overflowX: "hidden",
          width: "calc(".concat(e.spacing(7), " + 1px)"),
          [e.breakpoints.up("sm")]: {
            width: "calc(".concat(e.spacing(8), " + 1px)"),
          },
        }),
        mu = (0, n.Ay)("div")((e) => {
          let { theme: t } = e;
          return {
            display: "flex",
            alignItems: "center",
            justifyContent: "flex-end",
            padding: t.spacing(0, 1),
            ...t.mixins.toolbar,
          };
        }),
        uu =
          ((0, n.Ay)("div")((e) => {
            let { theme: t } = e;
            return {
              display: "flex",
              alignItems: "center",
              padding: t.spacing(0, 1),
              ...t.mixins.toolbar,
              justifyContent: "flex-start",
            };
          }),
          (0, n.Ay)(r.A, { shouldForwardProp: (e) => "open" !== e })((e) => {
            let { theme: t, open: a } = e;
            return {
              zIndex: t.zIndex.drawer + 1,
              transition: t.transitions.create(["width", "margin"], {
                easing: t.transitions.easing.sharp,
                duration: t.transitions.duration.leavingScreen,
              }),
              ...(a && {
                marginLeft: ru,
                width: "calc(100% - ".concat(ru, "px)"),
                transition: t.transitions.create(["width", "margin"], {
                  easing: t.transitions.easing.sharp,
                  duration: t.transitions.duration.enteringScreen,
                }),
              }),
            };
          })),
        xu = (0, n.Ay)(o.Ay, { shouldForwardProp: (e) => "open" !== e })(
          (e) => {
            let { theme: t, open: a } = e;
            return {
              width: ru,
              flexShrink: 0,
              whiteSpace: "nowrap",
              boxSizing: "border-box",
              ...(a && { ...du(t), "& .MuiDrawer-paper": du(t) }),
              ...(!a && { ...cu(t), "& .MuiDrawer-paper": cu(t) }),
            };
          }
        );
      function hu() {
        const e = (0, i.A)(),
          { selectedSetting: t } = l.useContext(Ce.A),
          [a, n] = l.useState(!0),
          [o, r] = l.useState([]),
          E = (0, _.Zp)(),
          [q, Y] = l.useState(null),
          W = Boolean(q),
          [R, P] = l.useState([]),
          [J, V] = l.useState([]);
        console.log(J, "ll");
        const B = () => {
            Y(null);
          },
          { isDarkMode: O, setIsDarkMode: L } = l.useContext(st.A),
          [U, H] = l.useState(""),
          [G, K] = l.useState(null),
          { SIDE_MENU_DATA: Q } = de;
        l.useEffect(() => {
          r(Q),
            Z(),
            (async () => {
              const e = window.localStorage.getItem(
                process.env.REACT_APP_CURRENT_USER
              );
              V(JSON.parse(e));
            })();
        }, []);
        const Z = async () => {
          try {
            const { data: e } = await (0, Se.Jt)(ke.r.academicYear.list);
            P(e.result[0]);
          } catch (e) {
            console.log(e);
          }
        };
        l.useEffect(() => {
          (() => {
            let e = window.location.pathname,
              t = null;
            for (let a of Q)
              if (a.subMenus.length) {
                a.subMenus.map((e) => e.path).includes(e) && (t = Q.indexOf(a));
              }
            t && (K(t), n(!0));
          })();
        }, []);
        return (0, re.jsxs)(s.A, {
          sx: { display: "flex" },
          children: [
            (0, re.jsx)(m.Ay, {}),
            (0, re.jsx)(uu, {
              position: "fixed",
              open: a,
              children: (0, re.jsxs)(d.A, {
                children: [
                  (0, re.jsx)(h.A, {
                    color: "inherit",
                    "aria-label": "open drawer",
                    onClick: () => {
                      n(!0);
                    },
                    edge: "start",
                    sx: { marginRight: 5, ...(a && { display: "none" }) },
                    children: (0, re.jsx)(p.A, {}),
                  }),
                  (0, re.jsxs)(u.A, {
                    variant: "h6",
                    component: "div",
                    color: "white",
                    textAlign: "center",
                    fontSize: "18px",
                    sx: { display: { xs: "none", md: "block" } },
                    children: [
                      null === t || void 0 === t ? void 0 : t.name,
                      " [",
                      R ? (null === R || void 0 === R ? void 0 : R.from) : "-",
                      " -",
                      " ",
                      R ? (null === R || void 0 === R ? void 0 : R.to) : "-",
                      "]",
                    ],
                  }),
                  (0, re.jsx)(s.A, {
                    sx: {
                      display: "flex",
                      width: "100%",
                      flex: 1,
                      justifyContent: "flex-end",
                      alignItems: "center",
                    },
                    children: (0, re.jsxs)(b.A, {
                      sx: {
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                      },
                      spacing: 1,
                      direction: "row",
                      children: [
                        (0, re.jsx)(S.A, {
                          title: "Notification",
                          children: (0, re.jsx)(N.N_, {
                            to: "/sch/notifications",
                            children: (0, re.jsx)(h.A, {
                              children: (0, re.jsx)(T.A, {
                                sx: { width: 26, height: 26, color: "#BDBDBD" },
                              }),
                            }),
                          }),
                        }),
                        (0, re.jsx)(S.A, {
                          title: "Account Settings",
                          children: (0, re.jsx)(h.A, {
                            onClick: (e) => {
                              Y(e.currentTarget);
                            },
                            "aria-controls": W ? "account-menu" : void 0,
                            "aria-haspopup": "true",
                            "aria-expanded": !!W || void 0,
                            children:
                              null !== J && void 0 !== J && J.photo
                                ? (0, re.jsx)("img", {
                                    src:
                                      null === J || void 0 === J
                                        ? void 0
                                        : J.photo,
                                    style: {
                                      width: "26px",
                                      height: "26px",
                                      display: "block",
                                      objectFit: "cover",
                                      margin: "0 auto",
                                      borderRadius: "50%",
                                      overflow: "hidden",
                                      cursor: "pointer",
                                    },
                                    alt: "Preview",
                                  })
                                : (0, re.jsx)(k.A, {
                                    sx: { width: 26, height: 26 },
                                  }),
                          }),
                        }),
                        (0, re.jsx)(S.A, {
                          title: "websites",
                          children: (0, re.jsx)(N.N_, {
                            to: "/",
                            children: (0, re.jsx)(h.A, {
                              children: (0, re.jsx)(k.A, {
                                src: "/world-wide-web.png",
                                alt: "loading...",
                                sx: { width: 26, height: 26 },
                              }),
                            }),
                          }),
                        }),
                      ],
                    }),
                  }),
                ],
              }),
            }),
            (0, re.jsxs)(C.A, {
              anchorEl: q,
              id: "account-menu",
              open: W,
              onClose: B,
              onClick: B,
              MenuListProps: { "aria-labelledby": "basic-button" },
              PaperProps: {
                elevation: 0,
                sx: {
                  overflow: "visible",
                  filter: "drop-shadow(0px 2px 8px rgba(0,0,0,0.32))",
                  mt: 1.5,
                  "& .MuiAvatar-root": {
                    width: 32,
                    height: 32,
                    ml: -0.5,
                    mr: 1,
                  },
                  "&::before": {
                    content: '""',
                    display: "block",
                    position: "absolute",
                    top: 0,
                    right: 14,
                    width: 10,
                    height: 10,
                    bgcolor: "background.paper",
                    transform: "translateY(-50%) rotate(45deg)",
                    zIndex: 0,
                  },
                },
              },
              transformOrigin: { horizontal: "right", vertical: "top" },
              anchorOrigin: { horizontal: "right", vertical: "bottom" },
              children: [
                (0, re.jsx)(D.A, {
                  onClick: B,
                  children: (0, re.jsxs)(N.N_, {
                    to: "/sch/profile",
                    style: { display: "flex", textDecoration: "none" },
                    children: [
                      (0, re.jsx)(f.A, {
                        children: (0, re.jsx)(z.A, { fontSize: "small" }),
                      }),
                      (0, re.jsx)(v.A, {
                        style: { color: "black" },
                        children: "Profile",
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(D.A, {
                  onClick: B,
                  children: (0, re.jsxs)(N.N_, {
                    to: "/sch/administrator/reset-password",
                    style: { display: "flex", textDecoration: "none" },
                    children: [
                      (0, re.jsx)(f.A, {
                        children: (0, re.jsx)(M.A, { fontSize: "small" }),
                      }),
                      (0, re.jsx)(v.A, {
                        style: { color: "black" },
                        children: "Reset Password",
                      }),
                    ],
                  }),
                }),
                (0, re.jsx)(D.A, {
                  onClick: () => {
                    window.localStorage.removeItem(
                      process.env.REACT_APP_ACCESS_TOKEN
                    ),
                      window.localStorage.removeItem(
                        process.env.REACT_APP_CURRENT_USER
                      ),
                      window.localStorage.removeItem("refresh_token"),
                      window.localStorage.removeItem(
                        process.env.REACT_APP_USER_TYPE
                      ),
                      E("/");
                  },
                  children: (0, re.jsxs)(N.N_, {
                    to: "/sch/administrator/reset-password",
                    style: { display: "flex", textDecoration: "none" },
                    children: [
                      (0, re.jsx)(f.A, {
                        children: (0, re.jsx)(F.A, { fontSize: "small" }),
                      }),
                      (0, re.jsx)(v.A, {
                        style: { color: "black" },
                        children: "Log Out",
                      }),
                    ],
                  }),
                }),
              ],
            }),
            (0, re.jsxs)(xu, {
              variant: "permanent",
              open: a,
              children: [
                (0, re.jsxs)(mu, {
                  sx: {
                    justifyContent: "space-between",
                    position: "sticky",
                    top: 0,
                    zIndex: 1,
                    backgroundColor: O ? "#000" : "#fff",
                    overflow: "hidden",
                  },
                  children: [
                    (0, re.jsx)(s.A, {}),
                    (0, re.jsx)("img", {
                      style: {
                        height: "50px",
                        width: "80px",
                        objectFit: "contain",
                      },
                      src: null === t || void 0 === t ? void 0 : t.logo,
                    }),
                    (0, re.jsx)(h.A, {
                      onClick: () => {
                        n(!1);
                      },
                      children:
                        "rtl" === e.direction
                          ? (0, re.jsx)(g.A, { color: "primary" })
                          : (0, re.jsx)(j.A, { color: "primary" }),
                    }),
                  ],
                }),
                (0, re.jsx)(x.A, {}),
                (0, re.jsx)(c.A, {
                  children: o.map((e, t) =>
                    e.subMenus.length
                      ? (0, re.jsxs)(
                          "div",
                          {
                            children: [
                              (0, re.jsx)(
                                A.Ay,
                                {
                                  sx: { padding: 0 },
                                  children: (0, re.jsxs)(y.A, {
                                    selected:
                                      G === t ||
                                      window.location.pathname === e.path,
                                    onClick: () =>
                                      ((e) => {
                                        if (G === e) return K(null);
                                        K(e);
                                      })(t),
                                    children: [
                                      (0, re.jsx)(f.A, { children: e.icon }),
                                      (0, re.jsx)(v.A, { primary: e.name }),
                                      G === t
                                        ? (0, re.jsx)(lt.A, {})
                                        : (0, re.jsx)(nt.A, {}),
                                    ],
                                  }),
                                },
                                e.path
                              ),
                              (0, re.jsx)(w.A, {
                                timeout: "auto",
                                unmountOnExit: !0,
                                in: G === t,
                                sx: { width: "100%" },
                                children: (0, re.jsx)(c.A, {
                                  children: e.subMenus.map((e) =>
                                    (0, re.jsx)(
                                      A.Ay,
                                      {
                                        sx: { width: "100%" },
                                        children: (0, re.jsx)(N.N_, {
                                          to: e.path,
                                          style: {
                                            textDecoration: "none",
                                            display: "flex",
                                            flex: 1,
                                            color: "red",
                                          },
                                          children: (0, re.jsxs)(y.A, {
                                            onClick: () => H(e.path),
                                            sx: {
                                              "& .MuiListItemText-root": {
                                                whiteSpace: "normal",
                                                wordWrap: "wrap",
                                              },
                                              "& .MuiListItemIcon-root": {},
                                            },
                                            selected:
                                              U === e.path ||
                                              window.location.pathname ===
                                                e.path,
                                            children: [
                                              (0, re.jsx)(f.A, {
                                                children: e.icon,
                                              }),
                                              (0, re.jsx)(v.A, {
                                                primary: e.name,
                                              }),
                                            ],
                                          }),
                                        }),
                                      },
                                      e.name
                                    )
                                  ),
                                }),
                              }),
                            ],
                          },
                          e.path + e.name
                        )
                      : (0, re.jsx)(
                          "div",
                          {
                            children: (0, re.jsx)(A.Ay, {
                              disablePadding: !0,
                              children: (0, re.jsx)(N.N_, {
                                to: e.path,
                                style: {
                                  textDecoration: "none",
                                  display: "flex",
                                  flex: 1,
                                },
                                children: (0, re.jsxs)(y.A, {
                                  onClick: () => K(t),
                                  selected:
                                    G === t ||
                                    window.location.pathname === e.path,
                                  children: [
                                    (0, re.jsx)(f.A, { children: e.icon }),
                                    (0, re.jsx)(v.A, { primary: e.name }),
                                  ],
                                }),
                              }),
                            }),
                          },
                          e.path
                        )
                  ),
                }),
                (0, re.jsx)(x.A, {}),
                (0, re.jsx)(A.Ay, {
                  disablePadding: !0,
                  children: (0, re.jsxs)(y.A, {
                    sx: {
                      paddingLeft: 0,
                      "& .MuiListItemText-root": {
                        whiteSpace: "normal",
                        wordWrap: "wrap",
                      },
                      "& .MuiListItemIcon-root": {},
                    },
                    children: [
                      (0, re.jsx)(I.A, {
                        sx: { marginRight: "20px" },
                        checked: O,
                        onChange: () => {
                          L(!O), window.localStorage.setItem("isDarkMode", !O);
                        },
                      }),
                      (0, re.jsx)(v.A, {
                        primary: O ? "Dark Mode" : "Light Mode",
                      }),
                    ],
                  }),
                }),
              ],
            }),
            (0, re.jsxs)(s.A, {
              component: "main",
              sx: { flexGrow: 1, p: 3, overflowX: "hidden", overflowY: "auto" },
              children: [
                (0, re.jsx)(mu, {}),
                (0, re.jsxs)(_.BV, {
                  children: [
                    (0, re.jsx)(_.qh, {
                      path: "dashboard",
                      element: (0, re.jsx)(at, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "manage-institute",
                      element: (0, re.jsx)(yc, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "administrator/academicYear",
                      element: (0, re.jsx)(yt, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "administrator/role-permission",
                      element: (0, re.jsx)(pa, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "administrator/user-role",
                      element: (0, re.jsx)(ga, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "administrator/reset-password",
                      element: (0, re.jsx)(ya, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/manage-designation",
                      element: (0, re.jsx)(vt, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/manage-department",
                      element: (0, re.jsx)(St, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/employee",
                      element: (0, re.jsx)(zt, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/update-employee/:id",
                      element: (0, re.jsx)(im, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/offer-letter",
                      element: (0, re.jsx)(Ot, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/relieving-letter",
                      element: (0, re.jsx)(Ut, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/off-boarding",
                      element: (0, re.jsx)(Zt, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/experience-letter",
                      element: (0, re.jsx)(Xt, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/teacher-activity",
                      element: (0, re.jsx)(ta, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "pre-admission/enquiries",
                      element: (0, re.jsx)(Na, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "pre-admission/exams",
                      element: (0, re.jsx)(La, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "pre-admission/exam-schedules",
                      element: (0, re.jsx)(al, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "pre-admission/result",
                      element: (0, re.jsx)(il, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "academic/class",
                      element: (0, re.jsx)(dl, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "academic/section",
                      element: (0, re.jsx)(gl, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "academic/subject",
                      element: (0, re.jsx)(vl, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "attendence/student-attendance",
                      element: (0, re.jsx)(Il, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "attendence/employee-attendance",
                      element: (0, re.jsx)(Tl, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "class-routine",
                      element: (0, re.jsx)(Ml, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/overview",
                      element: (0, re.jsx)(Rl, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/admit-student",
                      element: (0, re.jsx)(Hl, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/add-student",
                      element: (0, re.jsx)(xm, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/edit-student/:id",
                      element: (0, re.jsx)(xm, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/reshuffle",
                      element: (0, re.jsx)($l, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/promotion",
                      element: (0, re.jsx)(en, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/bulk-admission",
                      element: (0, re.jsx)(an, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/credential",
                      element: (0, re.jsx)(nn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/quick-admit",
                      element: (0, re.jsx)(rn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/id-card",
                      element: (0, re.jsx)(eu, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/bulk-photo",
                      element: (0, re.jsx)($m, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/student-activity",
                      element: (0, re.jsx)(cn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "student/student-bulk-photo",
                      element: (0, re.jsx)(Qd, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "assignment",
                      element: (0, re.jsx)(ou, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "announcement/notice",
                      element: (0, re.jsx)(xn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "announcement/news",
                      element: (0, re.jsx)(jn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "announcement/holiday",
                      element: (0, re.jsx)(yn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "announcement/awardsAndAchievements",
                      element: (0, re.jsx)(bn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "announcement/splashNews",
                      element: (0, re.jsx)(In, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "gallery",
                      element: (0, re.jsx)(_n, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "notifications",
                      element: (0, re.jsx)(Mn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "event",
                      element: (0, re.jsx)(zn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam/exam-grade",
                      element: (0, re.jsx)(Yn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam/exam-term",
                      element: (0, re.jsx)(Vn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam/exam-schedule",
                      element: (0, re.jsx)(Un, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam/exam-hall-ticket",
                      element: (0, re.jsx)(Hn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam-Mark/exam-Attendance",
                      element: (0, re.jsx)(oi, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam-Mark/manage-mark",
                      element: (0, re.jsx)(ii, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam-Mark/exam-result",
                      element: (0, re.jsx)(ai, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam-Mark/marks-card",
                      element: (0, re.jsx)(Xn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam-Mark/consolidated-marks-sheet",
                      element: (0, re.jsx)(Zn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam-Mark/subject-wise-report",
                      element: (0, re.jsx)(Kn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "exam-Mark/division-wise-report",
                      element: (0, re.jsx)(Gn, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "lms/storage",
                      element: (0, re.jsx)($i, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "lms/courses",
                      element: (0, re.jsx)(xi, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "lms/add-courses",
                      element: (0, re.jsx)(gm, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "lms/edit-courses/:id",
                      element: (0, re.jsx)(ym, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "lms/course-content",
                      element: (0, re.jsx)(qi, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "lms/live",
                      element: (0, re.jsx)(Ki, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "lms/room/:roomID",
                      element: (0, re.jsx)(wm, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "library/books",
                      element: (0, re.jsx)(ls, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "library/periodical",
                      element: (0, re.jsx)(is, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "library/student-library-member",
                      element: (0, re.jsx)(ms, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "library/student-issue-return",
                      element: (0, re.jsx)(ys, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "library/employee-library-member",
                      element: (0, re.jsx)(ks, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "library/employee-issue-return",
                      element: (0, re.jsx)(Ns, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "leave-management/leave-type",
                      element: (0, re.jsx)(qs, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "leave-management/student-leave",
                      element: (0, re.jsx)(Ws, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "leave-management/employee-leave",
                      element: (0, re.jsx)(Ls, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "leave-management/leave-report",
                      element: (0, re.jsx)(Hs, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "inventory/item",
                      element: (0, re.jsx)(Ks, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "inventory/vendor",
                      element: (0, re.jsx)(eo, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "inventory/transaction",
                      element: (0, re.jsx)(oo, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "inventory/stockList",
                      element: (0, re.jsx)(xo, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "inventory/issue",
                      element: (0, re.jsx)(jo, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "inventory/sell",
                      element: (0, re.jsx)(Ao, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "certificate/study-certificate",
                      element: (0, re.jsx)(Co, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "certificate/transfer-certificate",
                      element: (0, re.jsx)(Fo, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "fees/receipt-book",
                      element: (0, re.jsx)(Ko, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "fees/feeMap-category",
                      element: (0, re.jsx)(Xo, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "fees/collect-fees",
                      element: (0, re.jsx)(sr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "fees/balance-fee",
                      element: (0, re.jsx)(dr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "fees/fee-overview",
                      element: (0, re.jsx)(xr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "fees/re-conciliation",
                      element: (0, re.jsx)(pr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "hostel/manage-hostel",
                      element: (0, re.jsx)(vr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "hostel/manage-room-type",
                      element: (0, re.jsx)(Sr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "hostel/manage-room-bed",
                      element: (0, re.jsx)(Ir, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "hostel/hostel-member",
                      element: (0, re.jsx)(Mr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "transport/vehicle",
                      element: (0, re.jsx)(Yr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "transport/manage-route",
                      element: (0, re.jsx)(Br, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "transport/routes",
                      element: (0, re.jsx)(Qr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "transport/trasport-member",
                      element: (0, re.jsx)(Gr, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "transport/vehicle-log",
                      element: (0, re.jsx)(ed, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "transport/vehicle-maintenance",
                      element: (0, re.jsx)(md, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "payroll/salary-grade",
                      element: (0, re.jsx)(hd, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "payroll/make-payment",
                      element: (0, re.jsx)(jd, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "report/library-report",
                      element: (0, re.jsx)(wd, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "report/student-attendance",
                      element: (0, re.jsx)(Md, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "report/student-yearly-attendane",
                      element: (0, re.jsx)(Id, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "report/employee-attendance",
                      element: (0, re.jsx)(Fd, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "report/employee-yearly-attendance",
                      element: (0, re.jsx)(Nd, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "report/student-report",
                      element: (0, re.jsx)(ic, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "report/student-activity-report",
                      element: (0, re.jsx)(Td, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "visitorInfo/visitor-info",
                      element: (0, re.jsx)(Rd, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "visitorInfo/student-checkout",
                      element: (0, re.jsx)(Vd, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "help-desk",
                      element: (0, re.jsx)(Od, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "guardian-feedback",
                      element: (0, re.jsx)(Gd, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/add-employee",
                      element: (0, re.jsx)(gc, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "communication_compose",
                      element: (0, re.jsx)(Jm, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "communication_report",
                      element: (0, re.jsx)(Hm, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "communication_credentials",
                      element: (0, re.jsx)(Zm, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "human-resource/edit-employee/:id",
                      element: (0, re.jsx)(gc, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "manage-institute/add-institute",
                      element: (0, re.jsx)(zc, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "manage-institute/add-institute",
                      element: (0, re.jsx)(zc, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "manage-institute/edit-institute/:id",
                      element: (0, re.jsx)(zc, {}),
                    }),
                    (0, re.jsx)(_.qh, {
                      path: "profile",
                      element: (0, re.jsx)(Hc, {}),
                    }),
                  ],
                }),
                (0, re.jsx)(_.sv, {}),
              ],
            }),
          ],
        });
      }
    },
    29541: (e, t, a) => {
      a.d(t, { A: () => j });
      var l = a(96446),
        n = a(65043),
        i = a(34535),
        s = a(85865),
        o = a(88911),
        r = a(53193),
        d = a(18356),
        c = a(72221),
        m = a(32143),
        u = a(54536),
        x = a(81728),
        h = a(70579);
      const p = (0, i.Ay)(l.A)((e) => {
        let { theme: t } = e;
        return {
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          padding: "10px",
          marginBottom: "20px",
          borderBottom: "1px solid",
          borderBottomColor: t.palette.primary.light,
        };
      });
      function j(e) {
        let { title: t = "", showTextField: a = !0 } = e;
        const {
          settings: l,
          setSettings: i,
          selectedSetting: j,
          setSelectedSetting: g,
        } = (0, n.useContext)(x.A);
        return (0, h.jsxs)(p, {
          children: [
            (0, h.jsx)(s.A, {
              component: "h1",
              sx: { fontWeight: "bold", color: "#fff" },
              children: t,
            }),
            a &&
              (0, h.jsx)(o.A, {
                direction: "row",
                spacing: 2,
                children: (0, h.jsxs)(r.A, {
                  fullWidth: !0,
                  size: "small",
                  sx: { minWidth: "200px" },
                  children: [
                    (0, h.jsx)(d.A, {
                      id: "demo-simple-select-label",
                      children: "Select School",
                    }),
                    (0, h.jsx)(c.A, {
                      labelId: "demo-simpless-select-filled-label",
                      id: "demo-simple-select-filled-l",
                      value: null === j || void 0 === j ? void 0 : j._id,
                      name: "setting",
                      onChange: (e) => {
                        const { name: t, value: a } = e.target;
                        g({ ...l.filter((e) => e._id == a)[0] });
                      },
                      IconComponent: (e) =>
                        (0, h.jsx)(u.A, { ...e, fontSize: "medium" }),
                      label: "Select school",
                      children:
                        null === l || void 0 === l
                          ? void 0
                          : l.map((e) =>
                              (0, h.jsx)(
                                m.A,
                                { value: e._id, children: e.name },
                                e._id
                              )
                            ),
                    }),
                  ],
                }),
              }),
          ],
        });
      }
    },
    20486: (e, t, a) => {
      a.d(t, { A: () => M });
      var l = a(34535),
        n = a(4598),
        i = a(79650),
        s = a(63336),
        o = a(71806),
        r = a(84882),
        d = a(28076),
        c = a(39652),
        m = a(73460),
        u = a(96446),
        x = a(81045),
        h = a(77739),
        p = a(17392),
        j = a(42518),
        g = a(19090),
        A = a(73368),
        y = a(85865),
        f = a(65043),
        v = a(63471),
        b = a(95540),
        S = a(79306),
        k = a(93851),
        C = a(95915),
        D = a(3341),
        w = a(47968),
        I = a(70579);
      const N = {
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: 350,
          bgcolor: "background.paper",
          borderRadius: "10px",
          boxShadow: 24,
          p: 2,
        },
        _ = (0, l.Ay)(n.A)((e) => {
          let {} = e;
          return {
            "& .MuiSwitch-switchBase.Mui-checked": { color: "green" },
            "& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track": {
              backgroundColor: "green",
            },
            "& .MuiSwitch-switchBase": { color: "red" },
            "& .MuiSwitch-switchBase + .MuiSwitch-track": {
              backgroundColor: "red",
            },
          };
        }),
        T = (e, t) =>
          "boolean" === typeof e[t.key]
            ? !0 === e[t.key]
              ? "Yes"
              : "No"
            : t.path && Object.keys(e[t.path] || {}).length > 0
            ? e[t.path][t.key] || "NA"
            : t.isDate
            ? e[t.key]
              ? new Date(e[t.key]).toDateString()
              : "NA"
            : "feedback" === t.key
            ? e[t.key]
              ? "".concat(e[t.key].substring(0, 50), "...")
              : "NA"
            : e[t.key];
      function M(e) {
        let {
          bodyData: t = [],
          bodyDataModal: a = "",
          tableKeys: l = [],
          actions: n = ["edit", "delete", "view", "card", "switch"],
          onEditClick: M = () => {},
          onDeleteClick: F = () => {},
          onViewClick: z = () => {},
          onCardClick: E = () => {},
          onNavigateFeeMap: q = () => {},
          onToggleSwitch: Y = () => {},
          toggleStatus: W = !1,
          isDataReady: R = !0,
          module: P = "",
          CustomAction: J = () => {},
          onUpdate: V = () => {},
          onDownloadClick: B = () => {},
        } = e;
        const [O, L] = f.useState(0),
          [U, H] = f.useState(10),
          [G, K] = (0, f.useState)(!1),
          [Q, Z] = (0, f.useState)(null),
          $ = () => {
            K(!1);
          },
          X = (e) => (!0 === e[W] ? "Active" : "Inactive");
        return (0, I.jsxs)(I.Fragment, {
          children: [
            (0, I.jsxs)(i.A, {
              component: s.A,
              children: [
                (0, I.jsxs)(o.A, {
                  children: [
                    (0, I.jsx)(r.A, {
                      sx: {
                        backgroundColor: (e) =>
                          "dark" === e.palette.mode
                            ? e.palette.primary.dark
                            : e.palette.primary.light,
                      },
                      children: (0, I.jsxs)(d.A, {
                        children: [
                          (0, I.jsx)(c.A, {
                            align: "center",
                            sx: { fontWeight: "bold" },
                            children: "S.No",
                          }),
                          l.map((e, t) =>
                            (0, I.jsx)(
                              c.A,
                              {
                                sx: { fontWeight: "bold" },
                                align: "center",
                                children: e.name,
                              },
                              t + e.name
                            )
                          ),
                          n.length
                            ? (0, I.jsx)(c.A, {
                                sx: { fontWeight: "bold" },
                                align: "center",
                                children: "Action",
                              })
                            : null,
                        ],
                      }),
                    }),
                    (0, I.jsx)(m.A, {
                      children:
                        t.length && R
                          ? t.slice(O * U, O * U + U).map((e, t) =>
                              (0, I.jsxs)(
                                d.A,
                                {
                                  children: [
                                    (0, I.jsx)(c.A, {
                                      align: "center",
                                      children: t + 1,
                                    }),
                                    l.map((t, a) =>
                                      "image" === t.type
                                        ? (0, I.jsx)(
                                            c.A,
                                            {
                                              align: "center",
                                              children: (0, I.jsx)(u.A, {
                                                sx: {
                                                  display: "flex",
                                                  alignItems: "center",
                                                  justifyContent: "center",
                                                },
                                                children: (0, I.jsx)(x.A, {
                                                  sx: {
                                                    alignSelf: "center",
                                                    objectFit: "contain",
                                                  },
                                                  src: e[t.key],
                                                }),
                                              }),
                                            },
                                            a
                                          )
                                        : (0, I.jsx)(
                                            c.A,
                                            {
                                              align: "center",
                                              children: T(e, t),
                                            },
                                            a
                                          )
                                    ),
                                    n.length
                                      ? (0, I.jsxs)(c.A, {
                                          sx: {
                                            display: "flex",
                                            justifyContent: "center",
                                            alignItems: "center",
                                            columnGap: "5px",
                                          },
                                          children: [
                                            n.includes("edit") &&
                                              !e.checkOut &&
                                              (0, I.jsx)(h.A, {
                                                title: "Edit",
                                                children: (0, I.jsx)(p.A, {
                                                  onClick: () => M(e),
                                                  children: (0, I.jsx)(b.A, {
                                                    color: "primary",
                                                    fontSize: "small",
                                                  }),
                                                }),
                                              }),
                                            n.includes("delete") &&
                                              (0, I.jsx)(h.A, {
                                                title: "Delete",
                                                children: (0, I.jsx)(p.A, {
                                                  onClick: () =>
                                                    ((e) => {
                                                      Z(e), K(!0);
                                                    })(e),
                                                  children: (0, I.jsx)(v.A, {
                                                    fontSize: "small",
                                                    color: "error",
                                                  }),
                                                }),
                                              }),
                                            n.includes("view") &&
                                              (0, I.jsx)(h.A, {
                                                title: "View",
                                                children: (0, I.jsx)(p.A, {
                                                  onClick: () => z(e),
                                                  children: (0, I.jsx)(k.A, {
                                                    fontSize: "small",
                                                    color: "primary",
                                                  }),
                                                }),
                                              }),
                                            n.includes("card") &&
                                              (0, I.jsx)(h.A, {
                                                title: "Unbundle",
                                                children: (0, I.jsx)(j.A, {
                                                  size: "small",
                                                  variant: "contained",
                                                  onClick: () => E(e),
                                                  children: "Card",
                                                }),
                                              }),
                                            n.includes("switch") &&
                                              (0, I.jsx)(h.A, {
                                                title: X(e),
                                                children: (0, I.jsx)(p.A, {
                                                  size: "small",
                                                  onClick: () => Y(e),
                                                  children: (0, I.jsx)(_, {
                                                    size: "small",
                                                    checked: !0 === e[W],
                                                  }),
                                                }),
                                              }),
                                            n.includes("custom") &&
                                              (0, I.jsx)(J, {
                                                onEditClick: M,
                                                data: e,
                                                onUpdate: V,
                                                onNavigateFeeMap: q,
                                              }),
                                            n.includes("download") &&
                                              (0, I.jsx)(p.A, {
                                                size: "small",
                                                onClick: () => B(e),
                                                children: (0, I.jsx)(w.A, {
                                                  fontSize: "small",
                                                }),
                                              }),
                                          ],
                                        })
                                      : null,
                                  ],
                                },
                                e._id || t
                              )
                            )
                          : null,
                    }),
                  ],
                }),
                R
                  ? null
                  : (0, I.jsx)(u.A, {
                      sx: {
                        width: "100%",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        paddingTop: "20px",
                      },
                      children: (0, I.jsx)(C.A, {
                        size: 30,
                        color: "dodgerblue",
                      }),
                    }),
                R ? (0, I.jsx)(S.A, { dataPresent: t.length, title: a }) : null,
                (0, I.jsx)(g.A, {
                  size: "small",
                  component: "div",
                  count: t && t.length ? t.length : 0,
                  page: O,
                  onPageChange: (e, t) => {
                    L(t);
                  },
                  rowsPerPage: U,
                  onRowsPerPageChange: (e) => {
                    H(parseInt(e.target.value, 10)), L(0);
                  },
                }),
              ],
            }),
            (0, I.jsx)(A.A, {
              open: G,
              onClose: $,
              children: (0, I.jsxs)(u.A, {
                sx: N,
                children: [
                  (0, I.jsx)(u.A, {
                    sx: { textAlign: "center", margin: "10px auto" },
                    children: (0, I.jsx)("img", {
                      src: D,
                      width: 50,
                      height: 50,
                    }),
                  }),
                  (0, I.jsx)(y.A, {
                    textAlign: "center",
                    sx: { fontSize: "18px", fontWeight: 700 },
                    children: "Delete Confirmation",
                  }),
                  (0, I.jsx)(y.A, {
                    sx: { mt: 2, textAlign: "center" },
                    children: "Are you sure want to delete this item?",
                  }),
                  (0, I.jsxs)(u.A, {
                    my: 3,
                    sx: {
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                      gap: "15px",
                    },
                    children: [
                      (0, I.jsx)(j.A, {
                        size: "small",
                        color: "error",
                        variant: "contained",
                        onClick: $,
                        children: "Cancel",
                      }),
                      (0, I.jsx)(j.A, {
                        color: "primary",
                        size: "small",
                        variant: "contained",
                        onClick: () => {
                          F(Q._id), K(!1);
                        },
                        children: "Delete",
                      }),
                    ],
                  }),
                ],
              }),
            }),
          ],
        });
      }
    },
    79306: (e, t, a) => {
      a.d(t, { A: () => i });
      var l = a(85865),
        n = (a(65043), a(70579));
      function i(e) {
        let { dataPresent: t, title: a } = e;
        return t
          ? null
          : (0, n.jsxs)(l.A, {
              variant: "h6",
              sx: { textAlign: "center", margin: "5px", padding: "5px" },
              children: [a.charAt(0).toUpperCase() + a.slice(1), " not found!"],
            });
      }
    },
    15737: (e, t, a) => {
      a.d(t, { A: () => i });
      var l = a(96446),
        n = a(70579);
      const i = function (e) {
        const { children: t, value: a, index: i, ...s } = e;
        return (0, n.jsx)("div", {
          role: "tabpanel",
          hidden: a !== i,
          id: "simple-tabpanel-".concat(i),
          "aria-labelledby": "simple-tab-".concat(i),
          ...s,
          children: a === i && (0, n.jsx)(l.A, { children: t }),
        });
      };
    },
    4599: (e, t, a) => {
      a.d(t, { A: () => d });
      var l = a(96446),
        n = a(63336),
        i = a(69869),
        s = a(24056),
        o = (a(65043), a(70579));
      function r(e) {
        return {
          id: "simple-tab-".concat(e),
          "aria-controls": "simple-tabpanel-".concat(e),
        };
      }
      function d(e) {
        let { labels: t = [], onChange: a = () => {}, value: d = 0 } = e;
        return (0, o.jsx)(l.A, {
          component: n.A,
          sx: { marginBottom: "10px" },
          children: (0, o.jsx)(i.A, {
            value: d,
            onChange: a,
            "aria-label": "basic tabs example",
            variant: "scrollable",
            scrollButtons: "auto",
            allowScrollButtonsMobile: !0,
            children: t.map((e, t) =>
              (0, o.jsx)(
                s.A,
                {
                  sx: { fontWeight: "bold", fontSize: "12px" },
                  label: e,
                  ...r(t),
                },
                e
              )
            ),
          }),
        });
      }
    },
    22011: (e, t, a) => {
      a.d(t, { A: () => c });
      var l = a(65043),
        n = a(96446),
        i = a(68903),
        s = a(73213),
        o = a(47533),
        r = a(81728),
        d = a(70579);
      function c(e) {
        let { onThemeSelect: t = () => {}, webTheme: a } = e;
        const { selectedSetting: c } = l.useContext(r.A),
          { setSelectedTheme: m } = l.useContext(o.A),
          [u, x] = l.useState(
            (null === c || void 0 === c ? void 0 : c.selectedTheme) || 1
          ),
          [h, p] = l.useState(1);
        return (0, d.jsx)(l.Fragment, {
          children: (0, d.jsx)(n.A, {
            dividers: !0,
            children: (0, d.jsx)(i.Ay, {
              spacing: 2,
              container: !0,
              children: a
                ? s.A.websiteThemes.map((e) =>
                    (0, d.jsx)(
                      i.Ay,
                      {
                        item: !0,
                        sx: {
                          display: "flex",
                          justifyContent: "center",
                          alignItems: "center",
                        },
                        children: (0, d.jsx)("div", {
                          onClick: () => {
                            return (a = e.theme), t(a), void x(a);
                            var a;
                          },
                          children: (0, d.jsx)("img", {
                            style: {
                              height: "150px",
                              width: "200px",
                              objectFit: "contain",
                              border:
                                parseInt(u) === e.theme
                                  ? "2px solid green"
                                  : "2px solid lightgray",
                              borderRadius: "5px",
                              overflow: "hidden",
                            },
                            src: e.image,
                            alt: "Theme ".concat(e.theme),
                          }),
                        }),
                      },
                      e.theme + e.image
                    )
                  )
                : s.A.idCardThemes.map((e) =>
                    (0, d.jsx)(
                      i.Ay,
                      {
                        item: !0,
                        sx: {
                          display: "flex",
                          justifyContent: "center",
                          alignItems: "center",
                        },
                        children: (0, d.jsx)("div", {
                          onClick: () => {
                            return (a = e.theme), t(a), void p(a);
                            var a;
                          },
                          children: (0, d.jsx)("img", {
                            style: {
                              height: "150px",
                              width: "200px",
                              objectFit: "contain",
                              border:
                                parseInt(h) === e.theme
                                  ? "2px solid green"
                                  : "2px solid lightgray",
                              borderRadius: "5px",
                              overflow: "hidden",
                            },
                            src: e.image,
                            alt: "Theme ".concat(e.theme),
                          }),
                        }),
                      },
                      e.theme + e.image
                    )
                  ),
            }),
          }),
        });
      }
    },
    95855: (e, t, a) => {
      a.d(t, { A: () => S });
      var l = a(65043),
        n = a(96446),
        i = a(26240),
        s = a(85865),
        o = a(42518),
        r = a(77739),
        d = a(17392),
        c = a(45903),
        m = a(83462),
        u = a(29347),
        x = a(35316),
        h = a(4219),
        p = a(30344),
        j = a(39336),
        g = a(33438),
        A = a(70579);
      function y(e) {
        let {
          open: t = !1,
          onClose: a = () => {},
          styles: l = {},
          selectedFiles: r = [],
          setSelectFiles: c = () => {},
          customOnChage: y = !1,
          onRemove: f = () => {},
        } = e;
        const v = (0, i.A)();
        let b = (0, p.A)(v.breakpoints.down("sm"));
        return (0, A.jsxs)(m.A, {
          fullScreen: b,
          open: t,
          onClose: a,
          PaperProps: { sx: { width: "100%", maxWidth: 650, ...l } },
          children: [
            (0, A.jsx)(h.A, {
              children: r.length > 1 ? "Selected files" : "Selected file",
            }),
            (0, A.jsx)(j.A, {}),
            (0, A.jsx)(x.A, {
              sx: { padding: "10px" },
              children: r.map(
                (e, t) => (
                  console.log(e.name, "gg"),
                  (0, A.jsxs)(
                    n.A,
                    {
                      sx: {
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                      },
                      children: [
                        (0, A.jsx)(s.A, { children: e.name }),
                        (0, A.jsx)(d.A, {
                          size: "small",
                          onClick: y
                            ? () => f(e.name)
                            : () => {
                                return (
                                  (t = e.name),
                                  void c(r.filter((e) => e.name !== t))
                                );
                                var t;
                              },
                          children: (0, A.jsx)(g.A, { fontSize: "small" }),
                        }),
                      ],
                    },
                    t
                  )
                )
              ),
            }),
            (0, A.jsx)(u.A, {
              children: (0, A.jsx)(o.A, {
                onClick: a,
                size: "small",
                variant: "contained",
                children: "Close",
              }),
            }),
          ],
        });
      }
      var f = a(93851),
        v = a(11206);
      const b = (0, c.A)(n.A)(() => ({
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        padding: "10px",
        columnGap: "5px",
      }));
      function S(e) {
        let {
          name: t,
          multi: a = !0,
          label: c = "default label",
          required: m = !1,
          onChange: u = () => {},
          value: x,
          selectedFiles: h = [],
          disabled: p = !1,
          setSelectedFiles: j = () => {},
          customOnChange: g = !1,
          onRemove: S = () => {},
          accept: k = "",
          previousFile: C = "",
          ...D
        } = e;
        (0, i.A)();
        const [w, I] = (0, l.useState)(!1);
        return (0, A.jsxs)(A.Fragment, {
          children: [
            (0, A.jsxs)(b, {
              mt: 1,
              children: [
                (0, A.jsxs)(n.A, {
                  component: "div",
                  onClick: () => I(!0),
                  sx: {
                    borderRadius: "5px",
                    padding: "8px",
                    backgroundColor: "white",
                    border: "1px solid lightgray",
                    height: "30px",
                    cursor: "pointer",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    overflow: "hidden",
                  },
                  children: [
                    (0, A.jsx)(s.A, {
                      component: "div",
                      onClick: () => I(!0),
                      sx: {
                        fontWeight: "bold",
                        borderRadius: "5px",
                        padding: "5px",
                        backgroundColor: "white",
                        color: "black",
                        height: "30px",
                        width: "30px",
                        textAlign: "center",
                      },
                      children: h.length,
                    }),
                    (0, A.jsx)(f.A, { fontSize: "14px" }),
                  ],
                }),
                (0, A.jsxs)(o.A, {
                  fullWidth: !0,
                  component: "label",
                  size: "small",
                  variant: "outlined",
                  children: [
                    (0, A.jsx)("input", {
                      type: "file",
                      multiple: a,
                      accept: k,
                      hidden: !0,
                      onChange: g
                        ? (e) => u(e)
                        : (e) => {
                            const t = e.target.files;
                            if (t.length > 0) {
                              let e = [];
                              for (let a = 0; a < t.length; a++) {
                                const l = t[a];
                                e.push(l);
                              }
                              j([...e]);
                            } else console.log("No files selected");
                          },
                    }),
                    c,
                  ],
                }),
                C &&
                  (0, A.jsx)(r.A, {
                    title: "Uploaded File Link",
                    children: (0, A.jsx)(d.A, {
                      component: "div",
                      size: "small",
                      color: "primary",
                      variant: "outlined",
                      onClick: () => window.open(C, "_blank"),
                      children: (0, A.jsx)(v.A, { fontSize: "small" }),
                    }),
                  }),
              ],
            }),
            (0, A.jsx)(y, {
              open: w,
              selectedFiles: h,
              setSelectFiles: j,
              onClose: () => I(!1),
              customOnChage: g,
              onRemove: S,
            }),
          ],
        });
      }
    },
    83094: (e, t, a) => {
      a.d(t, { A: () => d });
      a(65043);
      var l = a(60446),
        n = a.n(l),
        i = a(58390),
        s = a(79344),
        o = a(89302),
        r = a(70579);
      const d = function (e) {
        let {
          name: t,
          label: a,
          formik: l,
          required: d,
          openTo: c = "day",
          views: m = ["year", "month", "day"],
          inputFormat: u = "DD/MM/YYYY",
          disabled: x = !1,
          disableFutureDates: h = !1,
        } = e;
        return (0, r.jsx)(i.$, {
          dateAdapter: o.R,
          children: (0, r.jsx)(s.l, {
            disableFuture: h,
            sx: {
              "& .MuiInputBase-input": { height: "8px" },
              marginTop: "16px",
              width: "100%",
            },
            required: d,
            name: t,
            variant: "outlined",
            size: "small",
            label: a,
            disabled: x,
            slotProps: { textField: { InputLabelProps: { fontSize: "90px" } } },
            openTo: c,
            closeOnSelect: !0,
            views: m,
            format: u,
            value: n()(l.values[t]) || null,
            onChange: (e) => l.setFieldValue(t, n()(e)),
          }),
        });
      };
    },
    61327: () => {},
    3341: (e, t, a) => {
      e.exports = a.p + "static/media/deleteicon.60b6f90a465370fb216b.png";
    },
  },
]);
//# sourceMappingURL=2580.b71ca73f.chunk.js.map
